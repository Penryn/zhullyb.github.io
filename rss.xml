<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>竹林里有冰的博客</title>
  
  <subtitle>zhullyb&#39;s blog</subtitle>
  <link href="https://zhul.in/rss.xml" rel="self"/>
  
  <link href="https://zhul.in/"/>
  <updated>2023-03-26T09:57:59.000Z</updated>
  <id>https://zhul.in/</id>
  
  <author>
    <name>竹林里有冰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>隐式转发——骚套路建站方案</title>
    <link href="https://zhul.in/2023/03/26/implicit-forwarding-is-a-new-site-deploying-method/"/>
    <id>https://zhul.in/2023/03/26/implicit-forwarding-is-a-new-site-deploying-method/</id>
    <published>2023-03-25T16:10:02.000Z</published>
    <updated>2023-03-26T09:57:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实很久以前就接触到了国内 DNS 解析服务商提供的这个「隐式 URL」 这种 “DNS 记录类型”了，但我域名没有备案，一直没有机会去体验。</p><p><img src="https://bu.dusays.com/2023/03/26/641f1e2cd8809.png" alt="DNSPOD 的解析面板中提供的记录类型"></p><p>今天社团内某个同学在折腾自己博客的时候又用到了「隐式 URL」，于是就借此机会了解了一下相关内容。</p><p><a href="https://docs.dnspod.cn/dns/help-redirect-url/">DNSPOD 文档的描述</a>如下</p><blockquote><p><strong>隐性转发</strong>：用的是 iframe 框架技术、非重定向技术，效果为浏览器地址栏输入 <code>http://www.dnspod.cn</code> 回车，打开网站内容是目标地址 <code>http://cloud.tencent.com/</code> 的网站内容，但地址栏显示当前地址 <code>http://www.dnspod.cn</code> 。</p></blockquote><p>也就是说，所谓「隐式 URL」，只不过是域名解析的服务商用他们的服务器去响应了访客的请求，并回应了一段使用了 iframe 的 html 。这段代码打开了一个大小为 100% 的窗口去请求了被“隐式代理”的站点。我这位同学域名是备案在阿里云下的，阿里云所使用的 html 代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;100%&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://example.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">noframes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://example.com&quot;</span>&gt;</span>Click here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">noframes</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在下图中，我通过更改 hosts 文件实现将百度的域名在本地被解析到 localhost，并使用 iframe 标签将 b 站嵌入到页面中。当然，这并不能说明什么事情，不过是我个人的恶趣味罢了。</p><p><img src="https://bu.dusays.com/2023/03/26/641f2272ab7fb.png" alt="example"></p><p>将 <code>http://example.com</code>改为目标站点，我们完全可以摆脱国内云服务商，在自己的服务器上直接实现「隐式代理」的效果。</p><p><strong>而这种方案，恰巧可以用于在境内机子上建站，尤其是针对未备案的域名。</strong></p><p>碍于 Github Pages 在境内的访问体验并不好，所以直接把博客部署在 Github Pages 下一直都不是首选，因此很多人都会选择去购买一台境内的小鸡，带宽虽然不大，但跑个博客什么的其实没什么大问题，但备案就很麻烦了。</p><p>我们可以通过在 Github Pages（或者其他境外的服务器） 上挂一个 <code>index.html</code> ，html 中使用 iframe 嵌套一个部署在境内小鸡上的网页来规避掉备案的问题。而境内小鸡可以选用非标准端口去监听请求。</p><img src="https://bu.dusays.com/2023/03/26/642014b05bb43.png" alt="使用隐式转发" style="zoom:67%;" /><img src="https://bu.dusays.com/2023/03/26/642014519ce2a.png" alt="2.drawio.png" style="zoom:67%;" /><p>这样带来的好处是访客只需要从境外的服务器上获取一个不到 1 KB 大小的 html ，随后的所有请求都是指向境内云服务器的，所以网页打开时的体验会得到改善。</p><p>隐式转发拥有以下优势：</p><ul><li>直接向境内的云服务器发送请求，速度会得到改善 （相比于直接部署在境外服务器上的方案）</li><li>不怎么消耗境外服务器的流量 （相比于使用境外服务器反向代理的方案）</li><li>浏览器的地址栏不会直接显示 ip 或端口号（相比于未备案使用境内服务器的非标准端口的方案）</li><li>不需要备案（相比于备案后使用境内服务器的 80/443 端口的方案）</li></ul><p>但也存在以下劣势：</p><ul><li>移动端设备访问时好像还是会展示 PC 端的界面（存疑</li><li>现代浏览器访问时可能会有 <code>strict-origin-when-cross-origin</code> 的问题（一般好像是出现在 iframe 的 html 是 https 访问，而目标站点是 http 访问的情况？）</li><li>一些古老的浏览器可能不支持 iframe （？</li><li>访问目标站点的其他路径时，浏览器地址栏的显示的地址不会变</li></ul><hr><p>那么应<a href="https://bu.dusays.com/2023/03/26/64201607999e3.png">某些群友的要求</a>，本文的第二作者为 <a href="https://blog.f1nley.xyz/">Finley</a>，通信作者为 <a href="https://blog.chordvers.com/">LanStarD</a>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Network" scheme="https://zhul.in/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>在 vps 上配合 caddy 部署 siteproxy</title>
    <link href="https://zhul.in/2023/02/01/deploy-siteproxy-with-caddy-on-vps/"/>
    <id>https://zhul.in/2023/02/01/deploy-siteproxy-with-caddy-on-vps/</id>
    <published>2023-02-01T14:33:53.000Z</published>
    <updated>2023-02-01T15:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前趁着春节活动的时候在某 vps 服务商买了 1 年的 vps，线路不算太好，但勉强够用，于是打算在上面部署一些反代程序。在群友的推荐下，发现了这款名为 <a href="https://github.com/netptop/siteproxy">siteproxy</a> 的开源项目。</p><p>siteproxy 相较于我在 <code>r.zhullyb.top</code> 部署的那个反代，其特点是可以运行在 vps 上，且将会替换被反代页面上的所有 url，因此遇到使用相对路径的网页也可以从容应对。</p><p>在项目的 README 中介绍了一种部署方案，但我仍有以下几点不太满意</p><ul><li>README 中的方案仅支持 nginx 部署，但我希望使用 caddy</li><li>README 中的方案使用 npm 安装了 <code>forever</code> 来达到保活的目的，甚至为此安装了 nvm，但我一不希望使用 npm 在系统上安装软件、二不希望安装 nvm 与 forever</li><li>原项目把根目录页做成了一个导航，指向了一些比较敏感的站点，而我希望换掉这个网页。</li></ul><p>因此这篇博客也就应运而生。</p><h2 id="反代-8011-端口"><a href="#反代-8011-端口" class="headerlink" title="反代 8011 端口"></a>反代 8011 端口</h2><p>根据项目 README 的描述，我们应当使用 nginx 去反代 <code>127.0.0.1:8011</code> 端口，但我是 caddy 用户，此前也<a href="/2022/05/30/use-caddy-to-proxy-wikipedia/">有过使用 caddy 反代</a>的经验，所以很容易写出一段使得程序可以正确运行的 <code>Caddyfile</code>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx">example.<span class="hljs-section">com</span> &#123;<br>        <span class="hljs-attribute">reverse_proxy</span>   <span class="hljs-number">127.0.0.1:8011</span> &#123;<br>                <span class="hljs-attribute">header_up</span> Host &#123;upstream_hostport&#125;<br>                <span class="hljs-attribute">header_up</span> X-Real-IP &#123;http.request.remote.host&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-For &#123;http.request.remote.host&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-Port &#123;http.request.port&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-Proto &#123;http.request.scheme&#125;<br>                <span class="hljs-attribute">header_up</span> Accept-Encoding identity<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将 <code>example.com</code> 的 A 记录解析到 vps 主机的 ip，并使用 <code>systemctl</code> 重新启动 caddy，这一步就算完成了。</p><h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><p>我在 vps 上安装的发行版是 Archlinux，所以直接 <code>pacman -S nodejs</code> 安装完就是了，别的发行版应该也可以直接调用系统默认的包管理器安装 <code>node</code> 或者 <code>nodejs</code> 完成这一步。</p><h2 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h2><p>首先，我们需要一个地方来存放我们下载的程序，我使用的是 <code>/opt</code> 路径。</p><p>我们可以直接根据 README 所说的，直接 clone 整个项目，但我本人并不想这么做，项目里似乎有太多对于 vps 用户没有用的东西了。此外，整个项目首页我也不想要，首页的导航指向了一些比较敏感的网站，而我的反代就想安安心心的一个人用。</p><p>综合以上需求，我所需要的文件一共就五个: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── config.js<br>├── index.js<br>├── logger.js<br>├── package.json<br>└── Proxy.js<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/siteproxy<br><span class="hljs-built_in">cd</span> /opt/siteproxy<br>wget https://raw.githubusercontent.com/netptop/siteproxy/master/&#123;config.js,index.js,logger.js,package.json,Proxy.js&#125;<br></code></pre></td></tr></table></figure><p>然后补上一个 <code>index.html</code></p><p>我这边选择直接使用 JavaScript 将对于 / 的访问直接重定向到我的博客。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;html&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;0; url=https://zhul.in/&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Redirect to <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>https://zhul.in/<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>在 <code>/opt/siteproxy</code> 目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>npm 将会根据 <code>package.json</code> 的内容自动安装所需的依赖。</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$EDITOR</span> /opt/siteproxy/config.js<br></code></pre></td></tr></table></figure><p>按照 README 所说，修改 <code>serverName</code> 字段</p><p><img src="https://bu.dusays.com/2023/02/01/63da866e26712.png" alt="需要修改的 serverName 字段"></p><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><p>这里我选择使用 systemd 帮助我实现 siteproxy 程序的开机自启动，service 文件是我直接根据 frp 程序提供的 service 改的。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs abnf">cat /usr/lib/systemd/system/siteproxy.service <br>-----<br>[Unit]<br><span class="hljs-attribute">Description</span><span class="hljs-operator">=</span>SiteProxy<br><span class="hljs-attribute">After</span><span class="hljs-operator">=</span>network-online.target<br><span class="hljs-attribute">Wants</span><span class="hljs-operator">=</span>network-online.target<br><br>[Service]<br><span class="hljs-attribute">Type</span><span class="hljs-operator">=</span>simple<br><span class="hljs-attribute">User</span><span class="hljs-operator">=</span>nobody<br><span class="hljs-attribute">Restart</span><span class="hljs-operator">=</span>on-failure<br><span class="hljs-attribute">RestartSec</span><span class="hljs-operator">=</span><span class="hljs-number">5</span>s<br><span class="hljs-attribute">Environment</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;NODE_PATH=/opt/siteproxy/&quot;</span><br><span class="hljs-attribute">ExecStart</span><span class="hljs-operator">=</span>node --tls-min-v1.<span class="hljs-number">0</span> /opt/siteproxy/index.js <br><br>[Install]<br><span class="hljs-attribute">WantedBy</span><span class="hljs-operator">=</span>multi-user.target<br></code></pre></td></tr></table></figure><p>随后使用 <code>systemctl enable siteproxy --now</code> 启动即可访问。</p><h2 id="为反代站点添加访问密码（可选）"><a href="#为反代站点添加访问密码（可选）" class="headerlink" title="为反代站点添加访问密码（可选）"></a>为反代站点添加访问密码（可选）</h2><p>参考<a href="/2021/10/21/picuploader-on-archlinux-with-caddy/#%E8%AE%BE%E7%BD%AE%E8%AE%BF%E9%97%AE%E5%AF%86%E7%A0%81%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89">我的另一篇博客</a>。</p><h2 id="使用防火墙程序禁止-8011-的公网访问（可选）"><a href="#使用防火墙程序禁止-8011-的公网访问（可选）" class="headerlink" title="使用防火墙程序禁止 8011 的公网访问（可选）"></a>使用防火墙程序禁止 8011 的公网访问（可选）</h2>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="nodejs" scheme="https://zhul.in/tags/nodejs/"/>
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="OpenSource Project" scheme="https://zhul.in/tags/OpenSource-Project/"/>
    
    <category term="siteproxy" scheme="https://zhul.in/tags/siteproxy/"/>
    
    <category term="Caddy" scheme="https://zhul.in/tags/Caddy/"/>
    
  </entry>
  
  <entry>
    <title>onedrive(by abraunegg) —— 一个 Linux 下的开源 OneDrive 客户端(cli)</title>
    <link href="https://zhul.in/2022/12/24/onedrive-abraunegg-recommendation/"/>
    <id>https://zhul.in/2022/12/24/onedrive-abraunegg-recommendation/</id>
    <published>2022-12-24T14:40:13.000Z</published>
    <updated>2022-12-31T00:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这款 Linux 下的 OneDrive 客户端我其实一年前就已经在用了，最近打算给自己的 vps 重装系统并重新部署下 aria 的下载服务，顺便把上传到 OneDrive 的功能增加进去，便又想到了这款运行在命令行中的第三方开源 Linux 客户端，去谷歌上搜索了一番，依然没有什么成规模的中文博客去写它的用法，于是就打算自己来写。<del>那肯定不是因为我博客这个月没有什么题材</del></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>abraunegg 用 D 语言写的 OneDrive 客户端安装起来并不是什么难事，Ubuntu/Debian/Fedora 等常见发行版的仓库中均有它的身影，具体情况在 <a href="https://github.com/abraunegg/onedrive/blob/master/docs/INSTALL.md">Github 项目页面</a>中都有描述。</p><p>在 Archlinux 下，我可以直接从 AUR/ArchlinuxCN 中安装 <code>onedrive-abraunegg</code> 这个包来安装这个项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S onedrive-abraunegg<br></code></pre></td></tr></table></figure><h2 id="运行前配置"><a href="#运行前配置" class="headerlink" title="运行前配置"></a>运行前配置</h2><blockquote><p>本章内容中的所用到的和没有用到的命令都可以在<a href="https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md">该项目的 Github 仓库</a>中找到。</p></blockquote><p>在终端直接运行 <code>onedrive</code> 命令，程序将打印出一行地址。</p><p><img src="https://bu.dusays.com/2022/12/24/63a71dbfd6ed3.png" alt="登陆地址"></p><p>使用浏览器打开地址，就会跳出微软的登陆页面，正常登陆即可。</p><p>登陆成功后，浏览器将会显示一片白屏，不必慌张，直接将浏览器地址栏中的网址复制后粘贴进终端中即可完成配置，获取到的 <code>refresh_token</code> 将会被保存到 <code>$HOME/.config/onedrive</code> 下。</p><p><img src="https://bu.dusays.com/2022/12/24/63a71e1f9c916.png" alt="浏览器显示白屏"></p><p><img src="https://bu.dusays.com/2022/12/24/63a71ec6d5aca.png" alt="授权成功"></p><p>账号授权成功以后我有两个迫切的需求需要在开始同步前解决: </p><ul><li>我不希望把我 OneDrive 里所有的文件下载下来，我在 OneDrive 中存放了至少 1T 的数据，而我的系统盘就只有 512G，这绝对是放不下的，所以我想仅同步部分文件夹。</li><li>我需要修改被同步到的文件夹的路径，我不想把 OneDrive 上的文件下载到我的 <code>/home</code> 下。</li></ul><hr><p>要解决第一个需求，我们可以通过创建 <code>sync_list</code> 的方式指定我们要同步的文件，在 <code>$HOME/.config/onedrive</code> 路径下创建 <code>sync_list</code> ，并填入需要的文件或文件夹名，或在 <code>!</code>或<code>-</code> 后面写上不想同步的文件或文件夹名即可，支持通配符，在<a href="https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md#performing-a-selective-sync-via-sync_list-file">原仓库的文档中</a>给出了非常详细的描述。</p><hr><p>我们可以先使用 <code>onedrive --display-config</code> 命令查看我们当前的配置情况。（我这边直接应用 Github 文档中展示的内容）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">onedrive version                             = vX.Y.Z-A-bcdefghi<br>Config path                                  = <span class="hljs-regexp">/home/</span>alex<span class="hljs-regexp">/.config/</span>onedrive<br>Config <span class="hljs-keyword">file</span> found in config path             = <span class="hljs-keyword">true</span><br>Config option <span class="hljs-string">&#x27;sync_dir&#x27;</span>                     = <span class="hljs-regexp">/home/</span>alex/OneDrive<br>Config option <span class="hljs-string">&#x27;enable_logging&#x27;</span>               = <span class="hljs-keyword">false</span><br>...<br>Selective sync <span class="hljs-string">&#x27;sync_list&#x27;</span> configured        = <span class="hljs-keyword">false</span><br>Config option <span class="hljs-string">&#x27;sync_business_shared_folders&#x27;</span> = <span class="hljs-keyword">false</span><br>Business Shared Folders configured           = <span class="hljs-keyword">false</span><br>Config option <span class="hljs-string">&#x27;webhook_enabled&#x27;</span>              = <span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p>这很显然，OneDrive 中的文件默认将会被保存到 <code>$HOME/OneDrive</code> 中。为了修改这个位置项，我们直接在 <code>$HOME/.config/onedrive/</code> 路径下创建一个名为 <code>config</code> 的文件，把此处给的 c<a href="https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md#the-default-configuration-file-is-listed-below">onfiguration examples</a> 全部复制进去，找到 <code>sync_dir</code> 把前面的注释删掉，改成自己喜欢的路径 <del>（别问我为什么写 /tmp，问就是我内存够大</del></p><p><img src="https://bu.dusays.com/2022/12/25/63a7282ee55e7.png" alt="修改同步路径！"></p><p>修改好此处的配置文件后，可以再次运行 <code>onedrive --display-config</code> 检查自己的配置文件格式有没有问题、自己更改的配置项有没有生效，这样就解决了我的第二个需求。</p><h2 id="Standalone-Mode-Monitor-Mode"><a href="#Standalone-Mode-Monitor-Mode" class="headerlink" title="Standalone Mode / Monitor Mode?"></a>Standalone Mode / Monitor Mode?</h2><p>这款 OneDrive 客户端支持以两种方式运行，monitor 模式将会监控本地磁盘上的文件状态，因而在同步路径内的文件从一个路径移动到另一个路径时，客户端将不会傻傻地执行「在原路径删除远端文件-重新上传新路径的本地文件」的这一个过程，具体使用 monitor 或 standalone 模式还请自行斟酌，可参考 <a href="https://github.com/abraunegg/onedrive/blob/master/docs/known-issues.md#moving-files-into-different-folders-should-not-cause-data-to-delete-and-be-re-uploaded">Moving files into different folders should not cause data to delete and be re-uploaded</a> .</p><h2 id="开始同步"><a href="#开始同步" class="headerlink" title="开始同步"></a>开始同步</h2><p>使用该客户端执行同步的命令很简单，即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">onedrive --synchronize<br></code></pre></td></tr></table></figure><p>但可选的运行参数很多，我只举出最常用的几个例子</p><h3 id="–dry-run"><a href="#–dry-run" class="headerlink" title="–dry-run"></a>–dry-run</h3><p>使用 <code>--dry-run</code> 选项后，OneDrive 将不会执行同步操作，它将在终端输出原本将会被执行的操作以供你排查自己的配置是否正确。</p><h3 id="–local-first"><a href="#–local-first" class="headerlink" title="–local-first"></a>–local-first</h3><p>字面意思，<code>--local-first</code> 即为本地优先，同步时如果遇到文件冲突将会优先参考本地的情况。</p><h3 id="–single-directory"><a href="#–single-directory" class="headerlink" title="–single-directory"></a>–single-directory</h3><p><code>--single-directory</code> 后面需要跟一个子文件夹在 OneDrive 根目录中的相对路径，这将使本次的同步操作仅对单个文件夹生效。</p><h3 id="–download-only"><a href="#–download-only" class="headerlink" title="–download-only"></a>–download-only</h3><p>字面意思，<code>--download-only</code> 即为仅下载模式。</p><h3 id="–upload-only"><a href="#–upload-only" class="headerlink" title="–upload-only"></a>–upload-only</h3><p>字面意思，<code>--upload-only</code>即为仅上传模式，后跟 <code>--no-remote-delete</code>将不会在 OneDrive 网盘中删除本地相较于网盘中缺少的文件，真正做到 upload only.</p><h3 id="–resync"><a href="#–resync" class="headerlink" title="–resync"></a>–resync</h3><p>当下列配置项被更改时，需要执行 <code>--resync</code> 来确保客户端正在按照更新后的配置文件来同步你的数据</p><ul><li>sync_dir</li><li>skip_dir</li><li>skip_file</li><li>drive_id</li><li>Modifying sync_list</li><li>Modifying business_shared_folders</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="OpenSource Project" scheme="https://zhul.in/tags/OpenSource-Project/"/>
    
    <category term="Experience" scheme="https://zhul.in/tags/Experience/"/>
    
    <category term="OneDrive" scheme="https://zhul.in/tags/OneDrive/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】关于2022年11月的事件的一些话[Z-Library]</title>
    <link href="https://zhul.in/2022/11/21/a-few-words-about-the-events-of-november-2022/"/>
    <id>https://zhul.in/2022/11/21/a-few-words-about-the-events-of-november-2022/</id>
    <published>2022-11-21T05:24:33.000Z</published>
    <updated>2022-11-21T07:28:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>正如我们所知道的那样，Z-Library 的主域名在前不久已经被美国警方给 take down 了，目前仅剩下 Telegram Bot 和 Tor 网络两种访问方式是我们仍然可以信任的。在11月18日，Z-Library 于其博客上发布了<a href="http://bookszlibb74ugqojhzhg2a63w5i2atv5bqarulgczawnbmsb6s6qead.onion/blog/36">一篇新的文章（onion链接）</a>，此处是我的翻译版本。</p></blockquote><hr><blockquote><p>As many of you know, on November 3rd most of our domains were seized and some our servers were suspended by the United States Department of  Justice and Federal Bureau of Investigation. In addition, on November 16 the United States Department of Justice <a href="https://www.justice.gov/usao-edny/pr/two-russian-nationals-charged-running-massive-e-book-piracy-website">published</a> the indictment against two citizens of Russia, Anton and Valeria. They  are accused of criminal copyright infringement, wire fraud and money  laundering to operate the Z-Library.</p></blockquote><p>正如你们大多数人所知道的那样，在11月3日，我们大多数的域名和一部分服务器被美国司法部和联邦调查局封禁了。此外，在11月16日，美国司法部出<a href="https://www.justice.gov/usao-edny/pr/two-russian-nationals-charged-running-massive-e-book-piracy-website">发布了</a>针对两个俄罗斯公民—— Anton 和 Valeria 的指控。他们因经营 Z-Library 而被指控犯有侵犯版权、电汇欺诈和洗钱等罪名。</p><blockquote><p>We refrain commenting on the alleged Anton and Valeria involvement in  the Z-Library project and the charges against them. We are very sorry  they are arrested. We also regret that some authors have suffered  because of Z-Library and ask for their forgiveness. We do our best to  respond to all complaints about files hosted in our library if it  violates author’s rights.</p></blockquote><p>我们不评论 Anton 和 Valeria 涉嫌参与 Z-Library 项目的行为以及对他们的指控。我们对他们的被捕感到非常抱歉，也对一些因为 Z-Library 而遭受的损失的作者表示歉意，并请求他们的原谅。如果我们的网站中托管的文件侵犯了作者的权利，我们会尽最大努力回应所有的投诉。</p><blockquote><p>We see the resonance recent events caused, we see how many  people support and believe in Z-Library. Thank you for your support, it  is extremely valuable to us. Thank you for each donation you make. You  are the ones who making the existence of the Z-Library possible. We  believe the knowledge and cultural heritage of mankind should be  accessible to all people around the world, regardless of their wealth,  social status, nationality, citizenship, etc. This is the only purpose  Z-Library is made for.</p></blockquote><p>我们看到最近发生的事件所引起的共鸣，我们看到了有多少人支持并信任 Z-Library。 感谢您的支持，这对我们来说极其珍贵。我们感激您的每一笔捐款，你们是使 Z-Library 的存在成为可能的人。 我们认为，人类的知识和文化遗产应该为全世界所有人所用，无论其财富、社会地位、国籍、公民身份等，而这，正是 Z-Library 存在的唯一目的。</p><blockquote><p align="right">My makeup may be flaking<br>But my smile still stays on<p></blockquote><p align="right">我的妆容可能会脱落<br>但我的笑容将会永存</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="翻译" scheme="https://zhul.in/tags/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="Z-Library" scheme="https://zhul.in/tags/Z-Library/"/>
    
  </entry>
  
  <entry>
    <title>使用 vercel+supabase 免费部署 umami</title>
    <link href="https://zhul.in/2022/11/08/free-umami-deploy-plan/"/>
    <id>https://zhul.in/2022/11/08/free-umami-deploy-plan/</id>
    <published>2022-11-08T05:37:53.000Z</published>
    <updated>2022-12-31T00:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>讲起静态网站的访客统计，我最先使用的是百度统计，但后来转到了 umeng，发现后续的几天百度爬虫的光顾次数反而多了起来。好家伙，使用百度统计相当于把自己网站访问量向百度全盘托出，<del>我说我的博客怎么还不被百度收录呢</del>。</p><p>后来，umeng 推出了新的服务条款，好像是说不再向未备案的站点提供服务，随后不得不转向自部署的开源网站统计程序。</p></blockquote><p>umami 提供了多种部署方式，在 vps 上可以非常轻松地使用 docker 一键部署，但上次 vps 到期时用 1Mbps 的小水管拖了好久都没有把博客前几个月的访客数据拖下来，一气之下我选择直接丢掉了这些可有可无的数据。</p><p>所以这一次，我决定放弃在自己的 vps 上部署，转去探索免费的部署方案。</p><p>umami 的官方文档上提供了非常多的部署方案，我个人比较喜欢 vercel，本站的随机图片 api 就是挂在 vercel 上的，界面比较简洁，且境内访问还算OK。</p><p><img src="https://bu.dusays.com/2022/11/08/6369ee9308dc3.png" alt="umami官方文档提供的部署方案"></p><p>但问题在于 vercel 本身并不提供免费的数据库，所以我们不得不去寻找一些长期免费提供数据库的供应商，我选择了 <a href="https://supabase.com/pricing">supabase</a>。</p><p>在下图中选择顶栏的 <strong>Pricing</strong> 后看到这个 <strong>$0/month</strong> 就<del>疯狂戳烂这个 Get Started</del></p><p><img src="https://bu.dusays.com/2022/11/08/6369ef8d3451e.png" alt="supabase价目表"></p><p>随便填写个项目名然后输入一个足够强大的密码，地区选择美国就行，东部西部无所谓（毕竟我也不知道 vercel 的机房是在东部还是西部）</p><p><img src="https://bu.dusays.com/2022/11/08/6369f03faba15.png" alt="创建项目ing"></p><p>看到这个小小的绿标就说明数据库正在初始化(<del>你先别急，让我先急</del></p><p><img src="https://bu.dusays.com/2022/11/08/6369f0d98a59c.png" alt="项目初始化中"></p><p><img src="https://bu.dusays.com/2022/11/08/6369f209c27aa.png" alt="进行一通设置，把网站关闭后直接打入冷宫（x"></p><p>随后打开官方文档，点击其<a href="https://umami.is/docs/running-on-vercel">描述 vercel 那一页</a>中大大的 <strong>Deploy</strong></p><p><img src="https://bu.dusays.com/2022/11/08/6369f2bda5f78.png" alt="vercel on Document"></p><p>初始化过程中，vercel 会要求你创建一个 git 仓库，一般私有库就够了。</p><p><img src="https://bu.dusays.com/2022/11/08/6369f33ccf6d0.png" alt="创建仓库"></p><p>随后需要我们设置两个环境变量，第一个 <code>DATABASE_URL</code> 就是我们刚刚从 supabase 中复制下来并替换好 password 的 url，第二个 <code>HASH_SALT</code>需要你随意生成一长串字符串<del>（比如你可以找一个新手让他帮你退出 vim</del></p><p><img src="https://bu.dusays.com/2022/11/08/6369f3adbd34d.png" alt="设置环境变量"></p><p>点击 <strong>Deploy</strong> 并等上两分钟，我们就部署完啦（首页没东西，白屏是正常的</p><p><img src="https://bu.dusays.com/2022/11/08/6369f58f6acd4.png" alt="部署成功"></p><p>来到项目首页，点击任意域名即可访问到我们部署的 umami，不过 vercel 的域名近年来也有被污染的情况，建议在设置里绑定自己的域名。</p><p><img src="https://bu.dusays.com/2022/11/08/6369f5ec7a0e2.png" alt="项目首页"></p><p>哦对了，别忘了 umami 的默认用户名密码是<code>admin</code>和<code>umami</code>，别到时候点击进去看到登陆框一脸懵，这是在文档里写过的。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Network" scheme="https://zhul.in/tags/Network/"/>
    
    <category term="OpenSource Project" scheme="https://zhul.in/tags/OpenSource-Project/"/>
    
    <category term="umami" scheme="https://zhul.in/tags/umami/"/>
    
  </entry>
  
  <entry>
    <title>我的博客部署方案</title>
    <link href="https://zhul.in/2022/11/04/my-blog-plan/"/>
    <id>https://zhul.in/2022/11/04/my-blog-plan/</id>
    <published>2022-11-04T08:41:28.000Z</published>
    <updated>2022-11-06T16:02:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来，我的博客使用的几乎都是 Hexo 框架。</p><p>静态博客的一大优点就是可以支持 Serverless 部署，这使得我们可以直接在 Github Pages、Vercel 等平台直接部署上我的博客，如果用上 <code>.eu.org</code> <del>或者非洲国家免费域名</del>就可以实现零成本的博客部署。</p><p>当然，我现在的博客并非是零成本搭建的，如你所见，我购入了印度国别域名 <code>zhul.in</code> 来凑出 <em>竹林</em> 的谐音。并在 Github Pages、Vercel 等平台的访问质量每况愈下的情况下又购入了位于香港的 VPS，这就引申出了今天的内容——介绍我博客的部署方案。</p><p>我的博客是使用 HK vps + Github Pages 两处部署实现的，通过 dnspod 免费版的域名分境内/外解析实现了分流。当境内的访客访问我的博客时，他们将会被解析到香港的 vps 上以获得更好的体验，而境外的访客将会被解析到 Github pages，毕竟 Github Pages 在境外的速度并不慢，并且稳定性肯定比我这小鸡要好得多。</p><p>不过关于通过 dns 解析分流这件事，之前看<a href="https://www.cities.ee/read-1553.html">城南旧事</a>的博客中有提到可以使用境外的 GeoScaling 完成，其免费支持全球分as、城市、经纬等智能解析，也支持自编辑脚本，看起来以后可以去试一试。</p><p><img src="https://bu.dusays.com/2022/11/04/6364d4f46ff1c.png" alt="Dnspod截图"></p><p>而 Hexo 框架最被人诟病的一点是更新麻烦。这一点不可否认，使用 <code>hexo generate</code> 生成静态网页文件再部署到服务器上的过程在一台新设备上是不小的工作量，它涉及 git、nodejs 的安装，涉及到 ssh key 和 rsync，整个环境的搭建就要废上不小的工夫。</p><p>在博客内容的更新方面，我选择了将整个 Hexo 的 workdir 全部上传到 github，使用 Github Action 帮助我同时完成静态页面的生成和 Github Pages 及 vps 的部署工作。具体的代码可以直接<a href="https://github.com/zhullyb/zhullyb.github.io/blob/master/.github/workflows/deploy.yml">见我的 GIthub 仓库</a>，我在这里简单讲下思路。</p><ol><li><p>安装 nodejs</p><p>这个没什么可说的，有现成的 Github Action 去完成这件事，我这边直接使用了<code>actions/setup-node@v2</code>。</p></li><li><p>使用 npm/yarn 安装相关依赖</p><p>这个直接跑 <code>yarn install</code> 即可。</p></li><li><p>为每个文件重新设定最后修改时间</p><p>这一步其实是挺重要的，Hexo框架生成每篇文章的最后修改时间的依据是该文件的最后修改时间，而对于 Github Action 的容器来说，每一个文件都刚刚被下载下来，都是最新的，这就会导致你的每一篇文章每次部署时都会被认为刚才修改过。</p><p>我们这边可以直接使用 git 记录的时间来作为文件的最后修改时间。（参考 <a href="https://mrseawave.github.io/blogs/articles/2021/01/07/ci-hexo-update-time/">Sea’s Blog</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git ls-files | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> filepath; <span class="hljs-keyword">do</span> <span class="hljs-built_in">touch</span> -d <span class="hljs-string">&quot;<span class="hljs-subst">$(git log -1 --format=&#x27;@%ct&#x27; $filepath)</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$filepath</span>&quot;</span> &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Fixed: <span class="hljs-variable">$filepath</span>&quot;</span>; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li><p>设置时区</p><p>读我的博客的人应该大多都是东八区的人，那我们应当把 Github Action 容器的时区设置为东八区，和自己 <code>git commit</code> 时所使用的设备的时间保持一致，否则某些文章的日期可能会发生一天的偏移。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> TZ=<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>生成静态网页文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn build<br></code></pre></td></tr></table></figure></li><li><p>部署到 Github Pages</p><p>使用 <code>peaceiris/actions-gh-pages@v3</code></p></li><li><p>初始化 Github Action 容器上的 ssh 私钥</p><p>应当在 Github 仓库的设置里先新建一个 secret，填入自己的 ssh 私钥（更加标准的做法应当是为 github action 专门生成一对 ssh 密钥，将公钥上传到自己的 vps，将私钥上传到 Github 仓库的 secret 中）。</p><p><img src="https://bu.dusays.com/2022/11/04/6364dbbfeb8f6.png" alt="github secret setting"></p><p>我这边直接从<a href="https://blog.zzy-ac.top/2021/07/06/yong-github-actions-bu-shu-hexo/">点墨阁</a>那边抄了点代码直接用。</p></li><li><p>使用 hexo 的 deploy 插件调用 rsync 将静态文件上传到自己服务器的对应目录（static server 你应当已经设置好了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn deploy<br></code></pre></td></tr></table></figure></li></ol><hr><p>注: 本篇博客中引用的所有博客页面均在 <code>web.archive.org</code> 进行了存档，如后续遇到页面打不开的问题请自行前往查询存档。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Network" scheme="https://zhul.in/tags/Network/"/>
    
    <category term="Github Action" scheme="https://zhul.in/tags/Github-Action/"/>
    
  </entry>
  
  <entry>
    <title>使用 VirtScreen 将 Pad 作为副屏</title>
    <link href="https://zhul.in/2022/10/04/use-virtscreen-to-turn-pad-into-another-screen/"/>
    <id>https://zhul.in/2022/10/04/use-virtscreen-to-turn-pad-into-another-screen/</id>
    <published>2022-10-03T16:19:20.000Z</published>
    <updated>2022-10-03T17:29:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于浙江工地大专的朝晖尚9宿舍实在是太小了，我没有办法放下一块便携显示屏，所以只能把家中闲置的 Huawei Pad M6 作为自己的副屏。</p></blockquote><p>经过一轮搜索下来，我找到了 <a href="https://github.com/kbumsik/VirtScreen">VirtScreen</a> 作为工具。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 Archlinux 上，大概有三种以上的方式进行安装: </p><p>一、使用 AUR 上的 <a href="https://aur.archlinux.org/package/virtscreen/">virtscreen</a></p><p>遇到的唯一一个麻烦是作为依赖之一的 <code>python-quamash</code> 在 python3.10 上无法直接安装。通过 AUR 的评论区得知，需要将 <code>collections.Mapping</code> 改为 <code>collections.abc.Mapping</code> 方可通过安装。</p><p>二、使用 dderjoel 的 fork 进行安装</p><p>见 <a href="https://github.com/dderjoel/VirtScreen/blob/master/package/archlinux/PKGBUILD">https://github.com/dderjoel/VirtScreen/blob/master/package/archlinux/PKGBUILD</a></p><p>三、直接通过 appimage 安装，不过需要自己手动安装 <code>x11vnc</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="系统层"><a href="#系统层" class="headerlink" title="系统层"></a>系统层</h3><p>打开软件以后，我们需要先在 <code>Display-&gt;Virtual Display-&gt;Advaced</code> 选择 VIRTUAL1 作为显示屏。</p><p>如果没有这个选项，可能需要根据自己的显卡做出相应的调整。</p><p>可以参考 <a href="https://wiki.archlinux.org/title/Extreme_Multihead#Using_a_virtual_output">ArchWiki</a>。</p><h3 id="软件层"><a href="#软件层" class="headerlink" title="软件层"></a>软件层</h3><p>在这里，我们需要根据我们作为副屏的设备的屏幕分辨率来计算我们需要在 VirtScreen 中设置的分辨率参数。</p><p>我的 Huawei Pad M6 是 2560*1600 的分辨率，但 VirtScreen 最高支持只有 1920*1080，所以我们需要选择 1280*800，并开启高分辨率选项。</p><p>VNC 那边只需要根据自己的需求设置一下密码即可。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在 VirtScreen 的 Display 界面点击 “Enable Virtual Screen”，切换到 VNC 界面点击 “Start VNC Server”，可以勾选右侧的 “Auto”。</p><p>Pad 端只需要安装任意一个 VNC 客户端即可，我这里使用的是”VNC Viewer”。</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://bu.dusays.com/2022/10/04/633b1bd1ba8f4.webp" alt="效果图"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Hardware" scheme="https://zhul.in/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>在 Archlinux 下使用 l2tp 协议连接校园网</title>
    <link href="https://zhul.in/2022/09/29/use-l2tp-protocol-to-connect-internet/"/>
    <id>https://zhul.in/2022/09/29/use-l2tp-protocol-to-connect-internet/</id>
    <published>2022-09-29T06:30:46.000Z</published>
    <updated>2022-09-29T06:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于高考爆炸，所以不得不进入浙江工地大专来度过自己接下来四年的人生（希望到时候可以借助学校的力量润出去）。</p></blockquote><p>学校这边由于某些不可描述的原因，将校园卡与宽带捆绑销售，且每次登陆校园网时都需要使用定制的 l2tp 协议客户端进行上网，且该客户端将会禁用用户的无线网卡（<del>这不明摆着想让我们宿舍每个人都花一次钱</del>）。</p><p><img src="https://bu.dusays.com/2022/09/29/63353e0e1978c.png" alt="学校定制的 l2tp 拨号客户端"></p><p>更惨的是，学校仅提供了 Windows 与 MacOS 的客户端。</p><p>在 <a href="https://imbearchild.cyou/">BearChild</a> 的提醒下，我意识到 Linux 下也可以有 l2tp 协议。</p><p>谷歌搜索了一番，我在简书上捞到了这篇文章<a href="https://www.jianshu.com/p/85cd5bd3c7a2">《ubuntu 连校园网 via l2tp》</a>。不过这显然有些麻烦，我们的客户端不需要 pppoe 拨号，只需要插上网线后连接 l2tp 协议即可联网。</p><p>所幸，NetworkManager 非常贴心地为我们提供了 l2tp 的插件，在 Archlinux 下使用如下命令即可完成安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S networkmanager-l2tp<br></code></pre></td></tr></table></figure><p>安装完成后，就可以在图形化界面下进行我们的设置操作。</p><p>由于定制的客户端已经把 l2tp 服务器 ip 写死且显示在界面上了，我们就不需要再去抓包截取服务器 ip，直接使用这边的 <code>192.168.115.1</code> 即可。</p><p><img src="https://bu.dusays.com/2022/09/29/63354161dbe28.png" alt="KDE 下的 NetworkManager l2tp 设置界面"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="Network" scheme="https://zhul.in/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>为 Element 添加自己喜欢的贴纸</title>
    <link href="https://zhul.in/2022/08/10/add-sticker-support-for-element/"/>
    <id>https://zhul.in/2022/08/10/add-sticker-support-for-element/</id>
    <published>2022-08-10T11:51:19.000Z</published>
    <updated>2023-01-13T17:52:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在读这篇文章之前，你应该已经知道 element、matrix 是什么，这部分内容咱就不过多展开讲了。</p></blockquote><h2 id="需要准备的"><a href="#需要准备的" class="headerlink" title="需要准备的"></a>需要准备的</h2><ul><li>PC 端 element</li><li>python3.6+ 环境</li><li>能够挂静态资源的站点（比如 Github Pages、Gitlab Pages、Vercel 等免费平台的账号）</li><li>可能需要能够突破大局域网限制的网络环境</li></ul><p>需要用到的项目 <a href="https://github.com/maunium/stickerpicker">maunium/stickerpicker</a></p><h2 id="克隆主项目"><a href="#克隆主项目" class="headerlink" title="克隆主项目"></a>克隆主项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/maunium/stickerpicker.git &amp;&amp; <span class="hljs-built_in">cd</span> stickerpicker<br></code></pre></td></tr></table></figure><h2 id="使用-pip-安装依赖"><a href="#使用-pip-安装依赖" class="headerlink" title="使用 pip 安装依赖"></a>使用 pip 安装依赖</h2><p>其实本来想直接用包管理去安装这个项目的依赖的，可惜我看了一眼依赖列表，有整整一半的依赖没有被 Fedora 打包，所以干脆就直接用 pip 安装算了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install .<br></code></pre></td></tr></table></figure><h2 id="选择一：将本地图片制成贴纸包"><a href="#选择一：将本地图片制成贴纸包" class="headerlink" title="选择一：将本地图片制成贴纸包"></a>选择一：将本地图片制成贴纸包</h2><p>在项目根目录下创新一个新的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> &lt;pack directory&gt;<br></code></pre></td></tr></table></figure><p>将需要的图片放入其中。如果需要排序，可以在图片的文件名最前面加上数字标号。</p><p>执行命令进行打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sticker-pack &lt;pack directory&gt; --add-to-index web/packs/<br></code></pre></td></tr></table></figure><p>如果想要给目录贴纸包命名，则可以追加<code>--title &lt;custom title&gt;</code>，否则将直接设置为目录名</p><h2 id="选择二：从-tg-获取现成的贴纸包"><a href="#选择二：从-tg-获取现成的贴纸包" class="headerlink" title="选择二：从 tg 获取现成的贴纸包"></a>选择二：从 tg 获取现成的贴纸包</h2><p>项目内已经为我们准备了 <code>sticker-import</code> 命令来帮助我们直接从 tg 获取表情包，那我们直接收下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sticker-import &lt;pack_url&gt;<br></code></pre></td></tr></table></figure><p>第一次使用时，会要求我们登陆 matrix 和 tg 账号</p><p>matrix 的 <code>homeserver</code> 和 <code>access token</code> 可以在 PC 端 element 的设置里找到</p><p><img src="https://bu.dusays.com/2022/08/11/62f4dab8c7647.webp" alt="element 在 pc 端上而设置界面"></p><p>tg 登陆时需要你输入手机号码，或者某一个 tg bot 的 token，这个大家都懂。</p><p>运行完成后，贴纸包就被上传到了你所使用的 matrix homeserver 上。</p><hr><p>接着我们需要做的事情就是将 <code>web</code> 文件夹部署到 github pages 等做成静态站点，这个比较简单，不再赘述，我这里直接部署在了 <code>https://matrix-sticker.zhullyb.top</code> 我们下文就直接拿它做演示，看得上的也可以直接拿来用。另外，<a href="https://blog.zhaose.cyou/">@朝色</a> 的 url 也可以直接拿来使用 <code>https://sticker.zhaose.cyou/web/</code></p><h2 id="添加到-element"><a href="#添加到-element" class="headerlink" title="添加到 element"></a>添加到 element</h2><p>这是本篇文章最吊诡的地方，element 其实并没有为我们准备这么一个添加自定义 sticker 的地方，从某种意义上讲，我们是把我们的 sticker 给 hack 进去。</p><p>在 element 的 pc 端找到任意一个对话框，输入 <code>/devtools</code> 并发送</p><p><img src="https://bu.dusays.com/2022/08/11/62f4f4d55f4d3.png" alt="如图"></p><p>将会出现如下页面，选择 <code>Explore account data</code></p><p><img src="https://bu.dusays.com/2022/08/11/62f4f5179fd73.png" alt="1660220693791.png"></p><p>找到 <code>m.widgets</code>，如果没有，就点击下图标出的按钮</p><p><img src="https://bu.dusays.com/2022/08/11/62f4f57459b6f.png" alt="1660220786171.png"></p><p>在新的页面中，填写如下内容，url 那一行应当改为自己部署的页面，并发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;stickerpicker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;m.stickerpicker&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://matrix-sticker.zhullyb.top/?theme=$theme&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Stickerpicker&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;@you:matrix.server.name&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;state_key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stickerpicker&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;m.widget&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stickerpicker&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/08/11/62f4f6d9e120e.png" alt="发送请求"></p><p>重启 element，此时就可以享受到自己导入的 sticker 了，手机端的 element 设置也将会被同步。</p><p>补一张效果图</p><p><img src="https://bu.dusays.com/2022/08/11/62f4f7728b1e6.png" alt="效果图"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nodejs16：是我配不上 openssl 3 咯？</title>
    <link href="https://zhul.in/2022/08/04/a-fucking-store-about-openssl3-and-nodejs16/"/>
    <id>https://zhul.in/2022/08/04/a-fucking-store-about-openssl3-and-nodejs16/</id>
    <published>2022-08-04T09:31:49.000Z</published>
    <updated>2023-02-04T01:51:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://bu.dusays.com/2022/08/04/62eba4eabc963.png" alt="长毛象的截图.png"></p><p>今年上半年升级 Fedora 36 的时候遇到了这个问题。</p><p>那会儿很无奈，一直在等 nodejs16 合并提供 <code>--openssl-legacy-provider</code> 的<a href="https://github.com/nodejs/node/pull/42972">那个 PR</a>。nodejs16 是一个 lts 版本，照道理来说，既然要提供 Long-term Support，而 openssl 1 作为它的依赖之一，生命周期结束又在 nodejs16 之前，那是不是应该给 nodejs16 backport 在 nodejs17 上实现的 <code>--openssl-legacy-provider</code> 参数选项呢？否则绝大多数发行版都会在 openssl 1 的生命周期结束之前切换到 openssl 3，那 nodejs16 不就没法用了嘛。</p><p>然而，nodejs 在他们的官网上发布的<a href="https://nodejs.org/en/blog/announcements/nodejs16-eol/">一篇博客</a>刷新了我的世界观，而此前的那个 PR 甚至一度被关停。（此处有<a href="https://whiteboard-ui8.pages.dev/translation/nodejs-eol-v16-0626/">寒晶雪提供的中文翻译</a>）</p><p>博客称他们将会把 nodejs16 的生命周期结束时间提前以防止 openssl 1 生命周期在 nodejs16 生命周期结束之前结束（这种做法甚至还有先例）</p><p>很无奈，那会儿有两个 npm 管理的软件没法在 Fedora 36 上编译出来，就一直搁置了下去。</p><hr><p>不过好在，事情还是有转机的。（要不然就这档子鸡毛蒜皮的小事我也不会专门去写篇博客出来）</p><p>前几天我给 <a href="https://github.com/atpoossfl/repo">atpoossfl 仓库</a>打了 rpm 版本的 nvm 以后，意外地发现 nvm 所提供的 nodejs 会自带 openssl。</p><p><img src="https://bu.dusays.com/2022/08/04/62ebadf02a5b3.png" alt="此为 nvm 安装的 nodejs14 目录"></p><p>所以我们只需要使用 nvm 安装的 nodejs16 即可解决 Fedora36 以后没有 openssl 1 的问题。</p><blockquote><p>使用 Fedora 的用户需要注意，Fedora 官方源中的<code>yarnpkg</code>在打包时遇到了错误，他们将 <code>/usr/lib/node_modules/yarn/bin/yarn.js</code> 的 shebang 给改成了 <code>#!/usr/bin/node</code>，应当改回 <code>#!/usr/bin/env node</code>才能让 yarn 正常使用上 nvm 提供的 nodejs；或者干脆添加 <a href="https://dl.yarnpkg.com/rpm/yarn.repo">dl.yarnpkg.com</a> 提供的 <code>yarn</code> 软件包。在写 specfile 的 <code>BuildRequires</code> 时，可以直接写成 <code>/usr/bin/yarn</code> 来避免频繁在 <code>yarn</code> 和 <code>yarnpkg</code> 这两个包名间改动。</p></blockquote><hr><p>更好的消息是，nodejs 已经在 <code>v16.17.0-proposal</code> 和 <code>v16.x-staging</code> 分支收下了这个为 nodejs16 提供 <code>--openssl-legacy-provider</code> 的 <a href="https://github.com/nodejs/node/commit/e7b99e8c8d229ee2cc1d657ae44f715e7e5f852f">commit</a>。相信在不久的将来，这个 commit 将会进入主线，并在 <code>v16.17</code> 版本的 nodejs16 上发挥它的作用。</p><p><img src="https://bu.dusays.com/2022/08/04/62ebb0927943f.png" alt="commit"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Fedora" scheme="https://zhul.in/tags/Fedora/"/>
    
    <category term="nodejs" scheme="https://zhul.in/tags/nodejs/"/>
    
    <category term="openssl" scheme="https://zhul.in/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>如何拯救失声的 hollywood</title>
    <link href="https://zhul.in/2022/07/25/restore-the-sound-of-hollywood/"/>
    <id>https://zhul.in/2022/07/25/restore-the-sound-of-hollywood/</id>
    <published>2022-07-25T03:25:44.000Z</published>
    <updated>2022-08-22T15:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>我刚开始接触 Linux 下的 hollywood 时，我记得它运行时是有声音的，应该是 007 的主题音乐，如今再次装上 hollywood，却发现音乐没了。</p><p>在 Github 找到 hollywood，发现有一个 <a href="https://github.com/dustinkirkland/hollywood/issues/58">issue</a> 也提到了这个问题。</p><p>原作者在该 issue 中回复道</p><blockquote><p>没错，它只是一段视频，音频受到版权保护。</p></blockquote><p>所以不难看出，作者因为版权问题而去掉了音频，进而导致 hollywood 失声。但我们作为用户，是不是可以想办法获取到老版本中那段带有音频的 mp4 文件呢？</p><p>答案是肯定的。</p><p>得益于 git 的版本控制特色，在 hollywood 的 github 仓库中，我们可以找到原来的 <a href="https://github.com/dustinkirkland/hollywood/blob/67839229f878a08521885e9fc05dd2d3ba10ddd1/share/hollywood/mi.mp4">mp4 文件</a>。</p><p>下载这个 mp4 文件后，我们将其放入 <code>/usr/share/hollywood/</code> 路径下，重命名为 <code>soundwave.mp4</code>，并确保其被正确设定为 0644 权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo install -Dm644 ./mi.mp4 /usr/share/hollywood/soundwave.mp4<br></code></pre></td></tr></table></figure><p>接下来试着跑一跑 <code>hollywood</code>，发现依然没有声音。再次查阅源码，发现缺少了 <code>mplayer</code> 这个依赖。</p><p>使用包管理器安装 <code>mplayer</code> 后，运行 <code>hollywood</code> 就可以听到声音了。</p><p>然而，你觉不觉得这个音乐。。。听上去怪怪的。。。</p><p>没错，作者在去掉音频后，给 <code>soundwave.mp4</code> <a href="https://github.com/dustinkirkland/hollywood/commit/95f77d570d86cd8b8fe0e0939049609f81d1bae0#diff-3e2bf53af1a38136a109ac4fa1b11189e7b6fcd4385e1c68683093f73c6ac485">设定了加速播放</a>。而我们现在需要这段视频被原速播放。编辑 <code>/usr/lib/hollywood/mplayer</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs diff">#!/bin/bash<br>#<br># Copyright 2014 Dustin Kirkland &lt;dustin.kirkland@gmail.com&gt;<br>#<br># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br># you may not use this file except in compliance with the License.<br># You may obtain a copy of the License at<br>#<br>#    http://www.apache.org/licenses/LICENSE-2.0<br>#<br># Unless required by applicable law or agreed to in writing, software<br># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br># See the License for the specific language governing permissions and<br># limitations under the License.<br>command -v mplayer &gt;/dev/null 2&gt;&amp;1 || exit 1<br>trap &quot;pkill -f -9 lib/hollywood/ &gt;/dev/null 2&gt;&amp;1; exit&quot; INT<br>PKG=hollywood<br>dir=&quot;$(dirname $0)/../../share/$PKG&quot;<br><span class="hljs-deletion">-DISPLAY= mplayer -vo caca -loop 0 -ss $((RANDOM % 100)) -speed 100 $MPLAYER_OPTS $dir/soundwave.mp4</span><br><span class="hljs-addition">+DISPLAY= mplayer -vo caca -loop 0 $MPLAYER_OPTS $dir/soundwave.mp4</span><br></code></pre></td></tr></table></figure><p>再次运行，确认修改已经成功。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Fun" scheme="https://zhul.in/tags/Fun/"/>
    
  </entry>
  
  <entry>
    <title>处理 fcitx5 的文字候选框在 tg 客户端上闪烁的问题</title>
    <link href="https://zhul.in/2022/07/03/fcitx5-blinking-on-tg-under-wayland-kde/"/>
    <id>https://zhul.in/2022/07/03/fcitx5-blinking-on-tg-under-wayland-kde/</id>
    <published>2022-07-03T05:52:44.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章开头，先要感谢 fcitx5 的开发者 <a href="https://www.csslayer.info/wordpress/">老K</a> 帮我 debug 这个问题</p></blockquote><h2 id="鬼畜的文字候选框"><a href="#鬼畜的文字候选框" class="headerlink" title="鬼畜的文字候选框"></a>鬼畜的文字候选框</h2><p>在新装的 Fedora 36 KDE Wayland 下使用 fcitx5 时遇到了文字候选框前后移动晃眼的问题（如下图）</p><p><img src="https://bu.dusays.com/2022/07/03/62c13162a6efc.gif" alt="fcitx5 blinking"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>当我向老K提出这个问题上的时候，老K告诉我这是预期行为，一共有两个解决方案。</p><ul><li>使用 qt 的 text input</li><li>关掉 kwin 的淡入淡出特效</li></ul><p>但由于我并不熟悉 KWin 的特效，所以我选择了前者的方案。</p><p>首先，需要确保自己的 Plasma 版本在 5.24 或以上，fcitx5 的版本号在 5.0.14 以上。</p><p>然后我们需要让 KWin 去启动 fcitx5。KCM 为此提供了一个非常简单的方式，如下图</p><p><img src="https://bu.dusays.com/2022/07/03/62c134907ada9.png" alt="选择 fcitx5 就好啦"></p><p>随后需要确保环境变量没有设置 <code>QT_IM_MODULE </code>。一定要确保这个变量不存在，连空也不行，必须是 unset。</p><p>理论上来说，是不需要重启的，但我的环境变量是 <code>fcitx5-autostart</code> 这个 rpm 包在 <code>/etc/profile.d/fcitx5.sh</code>里面设置的，我需要重启系统来使新的环境变量生效。</p><p>重启后，如果没有什么意外的话，就算成功了。</p><h2 id="绝对不会缺席的意外"><a href="#绝对不会缺席的意外" class="headerlink" title="绝对不会缺席的意外"></a>绝对不会缺席的意外</h2><p>很遗憾，我遇到了意外。</p><p>完成上述操作后，文字候选框依然有问题。</p><p>在老K的正确推测下，是因为我在 Fedora 下曾经使用过 <code>im-settings</code>，该程序在 <code>$HOME/.config/environment.d/</code> 路径下重新帮我设置回了 <code>QT_IM_MODULE</code> 这个变量，从而使得 tg 启动时还在使用 IM MODULE，而不是预期的 qt text input。</p><p>删除这两个影响环境变量的文件后，在 tg 输入时，fcitx5 的文字候选框恢复了正常。</p><h2 id="debug-过程中用到的两个方式"><a href="#debug-过程中用到的两个方式" class="headerlink" title="debug 过程中用到的两个方式"></a>debug 过程中用到的两个方式</h2><h3 id="dbus-send"><a href="#dbus-send" class="headerlink" title="dbus-send"></a>dbus-send</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dbus-send --print-reply=literal --dest=org.fcitx.Fcitx5 /controller org.fcitx.Fcitx.Controller1.DebugInfo<br></code></pre></td></tr></table></figure><p>运行如上命令后，我得到了如下的输出</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">   Group [x11::1] has 0 InputContext(s)<br>Group [wayland:] has 5 InputContext(s)<br>  IC [a50fe208d42e4611b240c0b66a2fa0b9] <span class="hljs-keyword">program</span>:konsole frontend:dbus <span class="hljs-keyword">cap</span>:e001800060 focus:1<br>  IC [d7d4d5c05e9c445aab1af9c7dfb5fbd4] <span class="hljs-keyword">program</span>:telegram-desktop frontend:dbus <span class="hljs-keyword">cap</span>:e001800060 focus:0<br>  IC [ac72ec3edf58481bbdf838352520efd5] <span class="hljs-keyword">program</span>:krunner frontend:dbus <span class="hljs-keyword">cap</span>:e001820060 focus:0<br>  IC [d8b450176e204953837248f786204c29] <span class="hljs-keyword">program</span>:plasmashell frontend:dbus <span class="hljs-keyword">cap</span>:e001800060 focus:0<br>  IC [df252979343d42ebbe9bd82ead6ff194] <span class="hljs-keyword">program</span>: frontend:wayland <span class="hljs-keyword">cap</span>:40 focus:0<br><span class="hljs-keyword">Input</span> Context without group<br></code></pre></td></tr></table></figure><p>老K指出，出现了 telegram 的那一行表明 tg 还是在用 IM Module，所以是环境变量有问题</p><h3 id="proc-查看程序运行时的环境变量"><a href="#proc-查看程序运行时的环境变量" class="headerlink" title="/proc 查看程序运行时的环境变量"></a>/proc 查看程序运行时的环境变量</h3><p><img src="https://bu.dusays.com/2022/07/03/62c138b030469.png" alt="获取到的环境变量"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.csslayer.info/wordpress/linux/use-plasma-5-24-to-type-in-alacritty-or-any-other-text-input-v3-client-with-fcitx-5-on-wayland/">Use Plasma 5.24 to type in Alacritty (Or any other text-input-v3 client) with Fcitx 5 on Wayland</a></p><p><a href="https://fcitx-im.org/wiki/FAQ#Candidate_window_is_blinking_under_wayland_with_Fcitx_5">Candidate window is blinking under wayland with Fcitx 5</a></p><p><a href="https://www.cnblogs.com/hupeng1234/p/6735403.html">查看进程的环境变量</a></p><p><em>注: 上述参考资料均已在 <code>web.archive.org</code> 和 <code>archive.ph</code> 做过存档，如遇到原站点无法访问的情况，可自行前往这两个站点查看存档。</em></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="笔记" scheme="https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="KDE" scheme="https://zhul.in/tags/KDE/"/>
    
  </entry>
  
  <entry>
    <title>使用caddy反向代理维基百科中文站点</title>
    <link href="https://zhul.in/2022/05/30/use-caddy-to-proxy-wikipedia/"/>
    <id>https://zhul.in/2022/05/30/use-caddy-to-proxy-wikipedia/</id>
    <published>2022-05-30T00:59:21.000Z</published>
    <updated>2022-08-10T13:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>反代的目的无非是两点</p><ul><li>满足自己在无代理情况下访问无法访问的站点的需求</li><li>方便将站点分享给亲朋好友。</li></ul><p>一直以来，我都想用 caddy 去反代一份维基百科来用，今天刚好就顺手解决了。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>用于反代的机子需要有对目标站点的访问能力</li><li>最好准备一个新的域名作为白手套，防止被污染</li><li>建议增加密码保护，一来使得小鸡流量不被滥用，二来防止防火墙检测到站点内容</li><li>本文使用的 caddy 开启了 <code>replace_response</code> 插件，可以使用 <code>xcaddy</code> 编译或直接前往 <a href="https://caddyserver.com/download">https://caddyserver.com/download</a> 勾选相应插件后下载。安装时，建议先根据官方文档安装原版 caddy，再用启用了 <code>replace_response</code> 插件的 caddy 二进制文件覆盖掉原版 caddy，这样就不需要去手写 systemd 相关的文件了。</li></ul><h2 id="Caddyfile"><a href="#Caddyfile" class="headerlink" title="Caddyfile"></a>Caddyfile</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs nginx">&#123;<br>        <span class="hljs-attribute">order</span> replace after encode<br>&#125;<br><br>https://zhwiki.example.com &#123;<br><br>        <span class="hljs-attribute">reverse_proxy</span> * https://zh.wikipedia.org &#123;<br>                <span class="hljs-attribute">header_up</span> Host &#123;upstream_hostport&#125;<br>                <span class="hljs-attribute">header_up</span> X-Real-IP &#123;http.request.remote.host&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-For &#123;http.request.remote.host&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-Port &#123;http.request.port&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-Proto &#123;http.request.scheme&#125;<br>                <span class="hljs-attribute">header_up</span> Accept-Encoding identity<br>                header_down location (https://zh.wikipedia.org/)(.*) https://zhwiki.example.com/<span class="hljs-variable">$2</span><br>                header_down location (https://zh.m.wikipedia.org/)(.*) http://m.zhwiki.example.com/<span class="hljs-variable">$2</span><br>        &#125;<br><br>        replace &#123;<br>                &quot;upload.wikimedia.org&quot; &quot;up.zhwiki.example.com&quot;<br>                &quot;zh.wikipedia.org&quot; &quot;zhwiki.example.com&quot;<br>                &quot;zh.m.wikipedia.org&quot; &quot;m.zhwiki.example.com&quot;<br>        &#125;<br>&#125;<br><br>https://m.zhwiki.example.<span class="hljs-section">com</span> &#123;<br><br>        <span class="hljs-attribute">reverse_proxy</span> * https://zh.m.wikipedia.org &#123;<br>                <span class="hljs-attribute">header_up</span> Host &#123;upstream_hostport&#125;<br>                <span class="hljs-attribute">header_up</span> X-Real-IP &#123;http.request.remote.host&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-For &#123;http.request.remote.host&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-Port &#123;http.request.port&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-Proto &#123;http.request.scheme&#125;<br>                <span class="hljs-attribute">header_up</span> Accept-Encoding identity<br>                header_down location (https://zh.wikipedia.org/)(.*) https://zhwiki.example.com/<span class="hljs-variable">$2</span><br>                header_down location (https://zh.m.wikipedia.org/)(.*) http://m.zhwiki.example.com/<span class="hljs-variable">$2</span><br>        &#125;<br><br>        replace &#123;<br>                &quot;upload.wikimedia.org&quot; &quot;up.zhwiki.example.com&quot;<br>                &quot;zh.wikipedia.org&quot; &quot;zhwiki.example.com&quot;<br>                &quot;zh.m.wikipedia.org&quot; &quot;m.zhwiki.example.com&quot;<br>        &#125;<br>&#125;<br><br>https://up.zhwiki.example.<span class="hljs-section">com</span> &#123;<br>        <span class="hljs-attribute">reverse_proxy</span> * https://upload.wikimedia.org &#123;<br>                <span class="hljs-attribute">header_up</span> Host &#123;upstream_hostport&#125;<br>                <span class="hljs-attribute">header_up</span> X-Real-IP &#123;http.request.remote.host&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-For &#123;http.request.remote.host&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-Port &#123;http.request.port&#125;<br>                <span class="hljs-attribute">header_up</span> X-Forwarded-Proto &#123;http.request.scheme&#125;<br>                <span class="hljs-attribute">header_up</span> Accept-Encoding identity<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h2><p>第一大段是启用 <code>replace_response</code> 插件的部分，直接照抄即可。</p><p>第二和第三大段的思路是一致的，分别反向代理了 PC 端和移动段的网页。两行 <code> header_down</code> 的写法是受到了知乎上那篇 Github 反代的启发，避免了源站发出 302 重定向时访客被带到源站去。replace 部分不用多说，就是将针对三个源站域名的请求改到反代站域名。</p><p>第四大段就是中规中举地反代了 <code>upload.wikimedia.org</code> 这个域名，上面存放的大多数是媒体文件，如果条件允许的话其实可以考虑使用多个服务器反代。</p><p>密码保护在我这份 Caddyfile 中没有启用，如果有需要的话可以参考我的<a href="/2021/10/21/picuploader-on-archlinux-with-caddy/#%E8%AE%BE%E7%BD%AE%E8%AE%BF%E9%97%AE%E5%AF%86%E7%A0%81%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89">另一篇博客</a>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://caddyserver.com/docs/">Caddy 官方文档</a><br><a href="https://zhuanlan.zhihu.com/p/476390779">The Road to Serfdom——如何为GitHub搭建反向代理</a><br><a href="https://ichon.me/post/1026.html">使用 Caddy 配置 Wikipedia 反向代理</a><br><a href="https://learningman.top/archives/365">使用 Caddy 反代 ghcr.io</a></p><p><em>所有参考资料除官方文档外均使用 web.archive.org 和 archive.ph 进行存档，如有无法访问的情况，请自行前往存档站获取历史存档。</em></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Caddy" scheme="https://zhul.in/tags/Caddy/"/>
    
  </entry>
  
  <entry>
    <title>创建一个本地的 Fedora 镜像源</title>
    <link href="https://zhul.in/2022/05/11/setup-a-local-fedora-source/"/>
    <id>https://zhul.in/2022/05/11/setup-a-local-fedora-source/</id>
    <published>2022-05-10T20:18:26.000Z</published>
    <updated>2022-08-22T15:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Fedora 36 在多次跳票后，总算是在 5月10日正式发布了。截止北京时间 5月11日凌晨两点，上海交通大学开源镜像站的上游 <code>rsync://download-ib01.fedoraproject.org/</code>  仍然没有同步 Fedora 36 的 Release 源。鉴于 Release 自 freeze 以后基本是不会有什么大变动的，也不需要及时同步更新，干脆就直接建立一个本地的镜像源。</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>一块足够大的硬盘</p><p>根据我个人实测，单 Fedora 36 的 x86_64 架构 的 Release 源中的 binary rpm 就占用了 89.6 GB，具体准备多的的硬盘空间还得看你具体需要同步些什么。</p></li><li><p>符合要求的上游</p><p>这里所说的符合要求一共是两个方面，一是允许 rsync 同步，二是有你想要的文件。我通过 getfedora.org 的下载按钮的转发目标得知 <code>mirror.karneval.cz</code> 已经完成了 Fedora 36 Release 源的同步。</p></li><li><p> 良好的网络条件</p></li></ol><p>   这里说的良好的网络条件，并不一定是说需要访问境外站点的能力，而是你和你的上游之间的网络访问畅通，不要动不动就i断开连接那种。如果你选择的是国内镜像站作为你的上游，那一般不会有什么问题。</p><h2 id="开始同步"><a href="#开始同步" class="headerlink" title="开始同步"></a>开始同步</h2><p>现在的主流方案一般都是选择 <code>rsync</code> 直接开整。</p><h3 id="试探环节"><a href="#试探环节" class="headerlink" title="试探环节"></a>试探环节</h3><p>很多镜像站的 rsync 文件路径和 http 文件路径路径是不同的。</p><p>比如说，我这里用的 mirror.karneval.cz 的 http 页面显示的 fedora 仓库路径在 <code>/pub/fedora</code>，但 rsync 同步时需要使用 <code>/fedora</code> 路径。</p><p>为了确定这一点，我们可以先通过 <code>rsync rsync://example.com</code> 进行预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync rsync://mirror.karneval.cz<br></code></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/05/11/627b2177c4da2.png" alt="image-20220511103736493"></p><p>通过一层一层预览目录的方式，找到需要同步的路径是 <code>/fedora/linux/releases/36/Everything/x86_64/os/</code></p><h3 id="同步环节"><a href="#同步环节" class="headerlink" title="同步环节"></a>同步环节</h3><p>通过 <code>mkdir</code> 和 <code>cd</code> 创建并进入我们准备用于同步源码的文件夹，然后开始执行同步命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync -avP rsync://mirror.karneval.cz/fedora/linux/releases/36/Everything/x86_64/os/ .<br></code></pre></td></tr></table></figure><p><em>Ps: 中途如果由于各种原因而中断了同步过程，可以再次使用上述命令继续同步，rsync 会保证文件完整性。</em></p><p><img src="https://bu.dusays.com/2022/05/11/627b22fa44446.png" alt="耗费两个半小时，同步成功"></p><h2 id="安装、配置并启用-static-server-可选"><a href="#安装、配置并启用-static-server-可选" class="headerlink" title="安装、配置并启用 static server (可选)"></a>安装、配置并启用 static server (可选)</h2><p>如果只需要本机使用，那么直接跳过这一步即可；如果需要给局域网内的其他机器提供镜像源，那么需要启用 static server。</p><p>我这里选择的是 caddy，性能虽然比 nginx 略逊一筹，但胜在配置简单。</p><p>caddy 的安装可以直接参考<a href="https://caddyserver.com/docs/install">官方文档</a>，这里不再赘述。</p><p>配置也不过那么几行的事情，我给个 example。端口号只要和别的程序没有冲突，就可以随意指定。443 端口需要 ssl 证书比较麻烦，局域网内直接用非标准端口即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">:<span class="hljs-number">14567</span> &#123;<br>        root * <span class="hljs-regexp">/the/</span>directory<span class="hljs-regexp">/you/u</span>se<br><br>        file_server &#123;<br>                browse<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完后直接以普通用户的权限启用即可，使用 systemd 启用需要解决 caddy 用户对目标无权限的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">caddy run --config /etc/caddy/Caddyfile<br></code></pre></td></tr></table></figure><p>浏览器输入对应的 ip 和端口，应该就可以访问了。</p><p><img src="https://bu.dusays.com/2022/05/11/627b2ebd23331.png" alt="image-20220511113417004"></p><h2 id="修改源配置文件"><a href="#修改源配置文件" class="headerlink" title="修改源配置文件"></a>修改源配置文件</h2><p>由于我们仅同步了 Release 源，就只需要修改 <code>/etc/yum.repo.d/fedora.repo</code> 即可。</p><p>如果镜像源在本机上，可以直接使用 <code>file://</code> 协议头: </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff">[fedora]<br>name=Fedora $releasever - $basearch<br><span class="hljs-addition">+ baseurl=file:///the/directory/you/use</span><br><span class="hljs-deletion">- metalink=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&amp;arch=$basearch</span><br>enabled=1<br>countme=1<br>metadata_expire=7d<br>repo_gpgcheck=0<br>type=rpm<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch<br>skip_if_unavailable=False<br></code></pre></td></tr></table></figure><p>如果镜像源在同局域网设备上，通过 <code>http://</code> 协议也能达到相同的效果: </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff">[fedora]<br>name=Fedora $releasever - $basearch<br><span class="hljs-addition">+ baseurl=http://192.168.1.233:14567</span><br><span class="hljs-deletion">- metalink=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&amp;arch=$basearch</span><br>enabled=1<br>countme=1<br>metadata_expire=7d<br>repo_gpgcheck=0<br>type=rpm<br>gpgcheck=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch<br>skip_if_unavailable=False<br></code></pre></td></tr></table></figure><p><em>Ps: 提供镜像源的机子的局域网 ip 可以通过 <code>ip -br a</code> 命令获取</em></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Fedora" scheme="https://zhul.in/tags/Fedora/"/>
    
    <category term="Caddy" scheme="https://zhul.in/tags/Caddy/"/>
    
  </entry>
  
  <entry>
    <title>好软推荐——FastOCR</title>
    <link href="https://zhul.in/2022/04/14/fastocr-experience/"/>
    <id>https://zhul.in/2022/04/14/fastocr-experience/</id>
    <published>2022-04-13T21:55:18.000Z</published>
    <updated>2022-12-31T00:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天在 PC 端有 OCR 的需求，需求如下</p><ul><li>自带框选功能或者图片上传前的编辑功能</li><li>硬盘占用小，不要 electron (((已经受够了</li><li>支持系统托盘或者快捷键快速调出</li><li>免费</li></ul><p>在<a href="https://liolok.com/">李皓奇</a>的推荐下试用了 Arch 群<a href="https://github.com/BruceZhang1993">兔兔</a>拿 python 和 qt 写的 <a href="https://github.com/BruceZhang1993/FastOCR">fastocr</a>，体验可以说是相当不错了。四个要求基本都能完美满足！</p><p><img src="https://bu.dusays.com/2022/04/14/a4ddb3b05e19c.gif" alt="操作简单快捷"></p><p>支持 <em>百度</em>、<em>有道</em>、<em>旷视Face++</em> 三家的接口，免费额度绝对够我试用的（大不了一家用完了换一家嘛</p><p><img src="https://bu.dusays.com/2022/04/14/488835757d5e3.png" alt="设置界面"></p><p>此外，空间占用小，算上依赖也不过 31MB 的硬盘空间占用，连半个 electron 都不到，运行起来反而更加流畅 &lt;^_^&gt;</p><p><img src="https://bu.dusays.com/2022/04/14/a404346841d02.png" alt="诶？哪里来的atpoossfl"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="OpenSource Project" scheme="https://zhul.in/tags/OpenSource-Project/"/>
    
    <category term="Experience" scheme="https://zhul.in/tags/Experience/"/>
    
  </entry>
  
  <entry>
    <title>抛弃PicGo，直接使用curl将图片上传到LskyPro</title>
    <link href="https://zhul.in/2022/03/31/upload-pic-to-lskypro-with-curl/"/>
    <id>https://zhul.in/2022/03/31/upload-pic-to-lskypro-with-curl/</id>
    <published>2022-03-31T11:19:14.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>前一阵子为了图床折腾了好长一段时间。刚开始用的是 cloudinary，虽然每月有限制，但强在境内访问速度还不错，可惜后来 <code>res.cloudinary.com</code> 这个域名在某些地方被 DNS 污染了，而自定义域名是付费版的功能，就不得不放弃了。</p><p>后来也尝试过 npm图床 的方案，可惜面对这种滥用公共资源的行为我无法接受<del>（肯定不是因为受不了那繁琐的上传步骤，随便传张图都得 bump 下版本号的原因）</del>，而且现在境内的能作为图床使用的 npm 镜像似乎也就只剩下 <code>npm.elemecdn.com</code> 这一个能够正常回源了，没准哪天就用不了了，所以就去投奔了<a href="https://dusays.com/">杜老师</a>的<a href="https://7bu.top/">去不图床</a>。</p><p>去不图床采用开源图床程序 <a href="https://www.lsky.pro/">Lsky Pro</a> 搭建，没有免费服务，且配置了鉴黄服务，看起来就是打算长久做下去的图床站点。境内使用腾讯云cdn，境外采用 cloudflare cdn，速度都挺让我满意的。<del>（杜老师看见请给我打钱，或者多送我点空间也行</del>（x</p><p>Typora 一直是我写博客的主用 Markdown 编辑器，之前我采用 Typora 调用 <a href="https://github.com/xiebruce/PicUploader">PicUploader(php)</a> 自动上传图片的方案写博客，体验相当不错，如图: </p><p><img src="https://bu.dusays.com/2022/08/10/62f3b881e3c4c.gif"></p><p>可惜 PicUploader 目前仍然没有支持 LskyPro 的上传，我采用的是现在烂大街的 Typora+PicGo+LskyPro插件 的方案去实现 Typora 的自动上传图片功能。</p><p>这个方案有明显的弊端：</p><ul><li>PicGo 运行依赖于 electron，极大地消耗了系统资源。</li><li>PicGo 面对多张图片( &gt;=4张 )同时上传时容易报错。</li><li>PicGo 对于 Linux 的支持比较有限，作者可能不熟悉 Linux，直到半个月前我去交了一个 pr 才支持 wayland 下使用 wl-clipboard 将图片链接复制到粘贴版。</li></ul><p>正好 LskyPro 有详细的文档，应该可以用 curl 手糊一段 Shell 脚本实现直接上传，资源占用小，唯一的弊端是上传完成后的图片不容易管理。脚本如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">export</span> TOKEN=YOU_TYPE_IT<br><span class="hljs-built_in">export</span> UPLOAD_API_URL=https://7bu.top/api/upload<br><br><span class="hljs-keyword">for</span> images <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">do</span><br>        curl -s -X POST <span class="hljs-variable">$UPLOAD_API_URL</span> -F <span class="hljs-string">&quot;token=<span class="hljs-variable">$TOKEN</span>&quot;</span> -F <span class="hljs-string">&quot;image=@<span class="hljs-variable">$images</span>&quot;</span> | jq -r .data.url<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><blockquote><p>2022/04/02更新: 第六行 $@ - “$@”，解决文件名中出现空格时导致的上传失败问题。</p></blockquote><p>需要借助 jq 来读取返回的 json，各 Linux 发行版源内应该都有打包，自行安装即可。</p><p>授予x可执行权限后，Typora 内直接填写自定义命令输入脚本所在位置即可实现 Typora 自动上传图片了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Shell Script" scheme="https://zhul.in/tags/Shell-Script/"/>
    
    <category term="图床" scheme="https://zhul.in/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="Lsky Pro" scheme="https://zhul.in/tags/Lsky-Pro/"/>
    
  </entry>
  
  <entry>
    <title>使用 Github Action 跑 rpmbuild</title>
    <link href="https://zhul.in/2022/03/06/run-rpmbuild-with-github-action/"/>
    <id>https://zhul.in/2022/03/06/run-rpmbuild-with-github-action/</id>
    <published>2022-03-06T08:02:54.000Z</published>
    <updated>2022-11-04T09:44:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直打算用 Github Action 跑 rpmbuild 构建 rpm 包，然后传到 Action 的 Artifacts 里面，用户就可以在登陆 Github 帐号的情况下进行下载。只要不发 Release，应该就不算「再分发」的行为，也就自然规避了再分发闭源软件的法律风险。</p><p>然而，现有的那些 Action 几乎全都是针对 CentOS 老古董定制的，，有些甚至连 buildrequires 都不帮你安装，而且大部分情况下都不支持 Source 直接填写一个链接，需要你直接提供 Source 文件。我自己又不可能在 Github 的仓库里用 lfs 强行存一个 200MB+ 的二进制文件，显然是不符合我要求的。还有几个项目使用 mock 去构建的，但使用 mock 构建需要提前用 rpmbuild 生成 srpm，在我们的个人电脑上可以理解为用一个干净的 chroot 打包防止自己的环境受污染，但在一个全新的、用完一次就要扔掉的 docker 里面还要防止环境被污染似乎有些画蛇添足的嫌疑。</p><p>最终，我选择了 <a href="https://github.com/marketplace/actions/rpm-build">naveenrajm7/rpmbuild</a> 这个项目。（虽然我并不理解为什么他要用 nodejs 去调用系统命令去执行 rpmbuild 等一系列步骤，我也没学过这类语言。不过项目的 <a href="https://github.com/naveenrajm7/rpmbuild/blob/master/src/main.ts">main.ts</a> 我还是能仿写的。）</p><p>在经过三四个小时的摸爬滚打下，我还是成功地将这个项目按照我的想法改完了。</p><ul><li>采用 Fedora 35 作为 host 进行 rpmbuild</li><li>自动安装 buildrequires</li><li>自动下载 source</li><li>允许仓库内自带本地 source</li><li>移除针对 srpm 的构建</li></ul><p><img src="https://bu.dusays.com/2022/03/06/bb263c91c7bf4.png"></p><p>改完后的 action 在 <a href="https://github.com/zhullyb/rpmbuild-github-action">zhullyb/rpmbuild-github-action</a>，欢迎使用。</p><p>最终是在 <a href="https://github.com/zhullyb/dingtalk-for-fedora">zhullyb/dingtalk-for-fedora</a> 项目成功实装了，有兴趣的访客们可以去尝试着一起来白嫖 Github Action 呀！ &gt;_&lt;</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Fedora" scheme="https://zhul.in/tags/Fedora/"/>
    
    <category term="RPM Package" scheme="https://zhul.in/tags/RPM-Package/"/>
    
    <category term="Github Action" scheme="https://zhul.in/tags/Github-Action/"/>
    
  </entry>
  
  <entry>
    <title>如何打出一个「-git」的rpm包</title>
    <link href="https://zhul.in/2022/02/07/how-to-package-a-git-rpm-package/"/>
    <id>https://zhul.in/2022/02/07/how-to-package-a-git-rpm-package/</id>
    <published>2022-02-07T02:23:29.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p> 本文中，笔者通过 github api 获取最新的 commit_id ，以一种曲线救国的方式成功为 rpm 打下了一个 <code>-git</code> 包。</p><h2 id="On-Archlinux"><a href="#On-Archlinux" class="headerlink" title="On Archlinux"></a>On Archlinux</h2><p>用过 AUR 的 Arch 用户应该知道，makepkg 支持 “-git” 包。当我们执行 makepkg 时，PKGBUILD 中的 <code>pkgver</code> 函数会自动被运行，并将输出的结果作为本次打包的版本号。这是一个非常棒的设计，我们不需要去手动更新 PKGBUILD，就可以直接从 git 服务区拉取最新的 master 分支编译打包，对于跟进开发进度而言非常方便。</p><p>一般来说，一个 <code>-git</code> 包的版本号会分成 2~4 个部分，最为核心的是 <code>count</code> 和 <code>commit_id</code>：<code>count</code>用于记录这是第几次提交，通过提交的次数作为版本号的靠前部分可以帮助包管理器比较版本号的新旧，比如第21次提交的代码一定比第18次的更加新，而21也正好比18大，包管理器也就凭借着这个数字来保证其可以在用户在更新的时候为用户选择一个更新版本的包；而 <code>commit_id</code>则可以帮助人类更快定位这个包是在哪一次代码提交以后编译的，以帮助 开发者/用户 定位问题。</p><h2 id="On-Fedora"><a href="#On-Fedora" class="headerlink" title="On Fedora"></a>On Fedora</h2><p>然而，这个思路在 rpm 上似乎无法实现。rpmbuild 执行的时候会事先根据版本号在 BUILDROOT 路径下创造一个 <code>%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-%&#123;arch&#125;</code>的目录，如此一来，就必须先确定版本号，无法像 PKGBUILD 那样使用一个 pkgver 的函数去自动更新版本号。此外，rpm 似乎专注于软件包的 Reproducibility，也就是希望拿到了指导 rpmbuild 打包的 specfile 以后打出一个相同包的能力，因此，使用同一份 specfile 在不同时间打出一个不同包的这种行为似乎并不符合 Fedora/Redhat 的哲学，所以我们怕是等不到 rpm 支持这个功能的那一天了。</p><h2 id="Turn-of-events"><a href="#Turn-of-events" class="headerlink" title="Turn of events"></a>Turn of events</h2><p>当然，这也并非不可能完成的任务，在 <a href="https://yanqiyu.info/">西木野羰基</a> 的指引下，我在 Fedora Docs 找到了<a href="https://docs.fedoraproject.org/en-US/packaging-guidelines/SourceURL/#_branch_example">对于某个 Branch 的打包样版</a>。其实也就是直接从 github 下载 master 分支的 master.tar.gz 压缩包来获取最新的源码，这样就确保了每一次 rpmbuild 的时候都能获取最新的源码。接下来需要处理的就是版本号的问题。</p><h2 id="Sad-Story"><a href="#Sad-Story" class="headerlink" title="Sad Story"></a>Sad Story</h2><p>很可惜，master.tar.gz 压缩包中并不包括 <code>.git</code> 文件，我们无法通过 <code>git rev-list --count HEAD</code> 来获取 <code>count</code> 计数，此外，最新的 <code>commit_id</code> 我们也不得而知。即使我们知道这些参数，也无法在 rpmbuild 执行之前自动把这些参数填进 specfile 中。</p><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><p>好在天无绝人之路，在 Liu Sen 的 <a href="https://forum.suse.org.cn/t/topic/13626">RPM 中宏的简单介绍</a> 一文中发现宏其实也可以类似 bash 中的 <code>$()</code> 一样定义成系统运行某些命令后的结果，通过仿写 copr 上 <em>atim/fractal</em> 的 <a href="https://download.copr.fedorainfracloud.org/results/atim/fractal/fedora-35-x86_64/03000082-fractal-master/fractal-master.spec">specfile</a> 定义了下面两个宏。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">%global timenow %(echo $(<span class="hljs-keyword">date</span> +%Y%m%d.%H%M))<br>%global commit_short_id %(api_result=$(curl -s https:<span class="hljs-comment">//api.github.com/repos/&lt;username&gt;/&lt;reponame&gt;/branches/master | head -n 4 | tail -n 1); echo $&#123;api_result:12:7&#125;)</span><br></code></pre></td></tr></table></figure><p>版本号就可以直接写成 <code>%&#123;timenow&#125;.%&#123;commit_id_short&#125;</code></p><ul><li><p><code>%&#123;timenow&#125;</code> 是直接通过运行系统的 date 命令获得一个精确到分钟的时间来当作 <code>count</code> 给 dnf 判断版本号大小使用</p></li><li><p><code>%&#123;commit_id_short&#125;</code> 从 api.github.com 获取到该仓库最新的 commit 号，配合粗制滥造的 shell 命令做切片，提取前7 位，帮助用户和开发者快速定位源码版本使用。当然，也可以选择直接使用 <code>jq</code> 作为 json 的解释器，不过 copr 大概率没有预装，生成 srpm 的时候估计就会报错。</p></li></ul><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>至此，我们成功解决了在 rpm 上打 <code>-git</code> 包的问题，不过仍然有以下缺点</p><ul><li>仅支持 github 上的项目，对于其他的 git 托管服务商还需要去查阅他们的 api 文档</li><li>粗制滥造的 shell 命令可能不足以应对以后的 github api 变更</li><li>使用了精确到分钟的时间作为计数器，导致版本号过长</li><li>使用 copr 打包的时候，有概率出现 srpm 与 rpm 之间版本号出现分钟级的差异</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Fedora" scheme="https://zhul.in/tags/Fedora/"/>
    
    <category term="RPM Package" scheme="https://zhul.in/tags/RPM-Package/"/>
    
  </entry>
  
  <entry>
    <title>雪藏在开源镜像站点中的那些常用却不为人知的软件</title>
    <link href="https://zhul.in/2022/01/19/the-common-software-hidden-in-mirrors/"/>
    <id>https://zhul.in/2022/01/19/the-common-software-hidden-in-mirrors/</id>
    <published>2022-01-19T05:01:30.000Z</published>
    <updated>2022-08-10T13:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天在下载 微PE 的时候眼睛突然一瞥，发现了山东大学的开源镜像站。突然间才发现在各个开源镜像站点中提供了许多那些我们误以为只能顶着断断续续的 Github  网络才能下载的软件。</p><p>下面这张列表主要来自山东大学的镜像站中的「常用软件」和南京大学的「github-release」。<del>我严重怀疑南京大学就是把整个 tuna 给搬了一遍过来。</del></p><table><thead><tr><th></th><th><a href="https://mirrors.sdu.edu.cn/">山东大学</a></th><th><a href="https://mirrors.nju.edu.cn/">南京大学</a></th><th><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学</a></th></tr></thead><tbody><tr><td>7-zip</td><td><a href="https://mirrors.sdu.edu.cn/software/Windows/7-Zip/">https://mirrors.sdu.edu.cn/software/Windows/7-Zip/</a></td><td></td><td></td></tr><tr><td>balena-io/etcher</td><td></td><td><a href="https://mirrors.nju.edu.cn/github-release/balena-io/etcher/LatestRelease/">https://mirrors.nju.edu.cn/github-release/balena-io/etcher/LatestRelease/</a></td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/balena-io/etcher/LatestRelease/">https://mirrors.tuna.tsinghua.edu.cn/github-release/balena-io/etcher/LatestRelease/</a></td></tr><tr><td>git-for-windows</td><td><a href="https://mirrors.sdu.edu.cn/github-release/git-for-windows_git/">https://mirrors.sdu.edu.cn/github-release/git-for-windows_git/</a></td><td><a href="https://mirrors.nju.edu.cn/github-release/git-for-windows/git/LatestRelease/">https://mirrors.nju.edu.cn/github-release/git-for-windows/git/LatestRelease/</a></td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/git-for-windows/git/LatestRelease/">https://mirrors.tuna.tsinghua.edu.cn/github-release/git-for-windows/git/LatestRelease/</a></td></tr><tr><td>Krita</td><td></td><td><a href="https://mirrors.nju.edu.cn/kde/stable/krita/">https://mirrors.nju.edu.cn/kde/stable/krita/</a></td><td></td></tr><tr><td>libreoffice</td><td></td><td></td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/libreoffice/libreoffice/">https://mirrors.tuna.tsinghua.edu.cn/libreoffice/libreoffice/</a></td></tr><tr><td>Magisk</td><td></td><td><a href="https://mirrors.nju.edu.cn/github-release/topjohnwu/Magisk/LatestRelease/">https://mirrors.nju.edu.cn/github-release/topjohnwu/Magisk/LatestRelease/</a></td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/topjohnwu/Magisk/LatestRelease/">https://mirrors.tuna.tsinghua.edu.cn/github-release/topjohnwu/Magisk/LatestRelease/</a></td></tr><tr><td>Motrix</td><td><a href="https://mirrors.sdu.edu.cn/github-release/agalwood_Motrix/">https://mirrors.sdu.edu.cn/github-release/agalwood_Motrix/</a></td><td></td><td></td></tr><tr><td>obs-studio</td><td><a href="https://mirrors.sdu.edu.cn/software/Windows/OBS%20Studio/">https://mirrors.sdu.edu.cn/software/Windows/OBS%20Studio/</a></td><td><a href="https://mirrors.nju.edu.cn/github-release/obsproject/obs-studio/LatestRelease/">https://mirrors.nju.edu.cn/github-release/obsproject/obs-studio/LatestRelease/</a></td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/obsproject/obs-studio/LatestRelease/">https://mirrors.tuna.tsinghua.edu.cn/github-release/obsproject/obs-studio/LatestRelease/</a></td></tr><tr><td>office tool plus</td><td><a href="https://mirrors.sdu.edu.cn/software/Windows/Office%20Tool%20Plus/">https://mirrors.sdu.edu.cn/software/Windows/Office%20Tool%20Plus/</a></td><td></td><td></td></tr><tr><td>picgo</td><td><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/">https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/</a></td><td></td><td></td></tr><tr><td>rufus</td><td><a href="https://mirrors.sdu.edu.cn/software/Windows/Rufus/">https://mirrors.sdu.edu.cn/software/Windows/Rufus/</a></td><td><a href="https://mirrors.nju.edu.cn/github-release/pbatard/rufus/LatestRelease/">https://mirrors.nju.edu.cn/github-release/pbatard/rufus/LatestRelease/</a></td><td></td></tr><tr><td>qBittorrent</td><td><a href="https://mirrors.sdu.edu.cn/software/Windows/qBittorrent/">https://mirrors.sdu.edu.cn/software/Windows/qBittorrent/</a></td><td></td><td></td></tr><tr><td>ventoy</td><td><a href="https://mirrors.sdu.edu.cn/github-release/ventoy_Ventoy/">https://mirrors.sdu.edu.cn/github-release/ventoy_Ventoy/</a></td><td><a href="https://mirrors.nju.edu.cn/github-release/ventoy/Ventoy/LatestRelease/">https://mirrors.nju.edu.cn/github-release/ventoy/Ventoy/LatestRelease/</a></td><td></td></tr><tr><td>virtualbox</td><td></td><td><a href="https://mirrors.nju.edu.cn/virtualbox/">https://mirrors.nju.edu.cn/virtualbox/</a></td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/virtualbox/">https://mirrors.tuna.tsinghua.edu.cn/virtualbox/</a></td></tr><tr><td>vlc</td><td></td><td><a href="https://mirrors.nju.edu.cn/videolan-ftp/">https://mirrors.nju.edu.cn/videolan-ftp/</a></td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/videolan-ftp/">https://mirrors.tuna.tsinghua.edu.cn/videolan-ftp/</a></td></tr><tr><td>winehq</td><td></td><td><a href="https://mirrors.nju.edu.cn/winehq/">https://mirrors.nju.edu.cn/winehq/</a></td><td><a href="https://mirrors.bfsu.edu.cn/winehq/">https://mirrors.bfsu.edu.cn/winehq/</a></td></tr><tr><td>wepe</td><td><a href="https://mirrors.sdu.edu.cn/software/Windows/WePE/">https://mirrors.sdu.edu.cn/software/Windows/WePE/</a></td><td></td><td></td></tr><tr><td>winscp</td><td><a href="https://mirrors.sdu.edu.cn/software/Windows/WinSCP/">https://mirrors.sdu.edu.cn/software/Windows/WinSCP/</a></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在Fedora搭建jekyll环境——dnf module</title>
    <link href="https://zhul.in/2022/01/12/dnf-module-in-setting-up-the-jekyll/"/>
    <id>https://zhul.in/2022/01/12/dnf-module-in-setting-up-the-jekyll/</id>
    <published>2022-01-12T14:11:42.000Z</published>
    <updated>2022-08-10T15:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>我之前的博客一直用的是<a href="https://github.com/qiubaiying/qiubaiying.github.io">这个主题</a>，直接使用 Fedora 官方源里的 <code>rubygem-jekyll</code> 似乎无法正常安装 Gemfile 中的依赖。之前使用 Archlinux 的时候，我是直接从 AUR 安装了一个 <code>ruby-2.6</code> 来使用的，但最近转到 Fedora 以后似乎就没法用这样的方案来解决了。</p><p>好在天无绝人之路，Fedora 也提供了安装老版本的 ruby 的方案——使用 dnf 的 module 功能。</p><h2 id="关于-dnf-module"><a href="#关于-dnf-module" class="headerlink" title="关于 dnf module"></a>关于 dnf module</h2><p>关于 dnf 的 module 功能到底是用来做什么的，其实我并不清楚。虽说 Fedora 提供了<a href="https://docs.fedoraproject.org/en-US/modularity/">文档</a>，但就凭我的读中文文档都吃力的水准，似乎没有办法通过英文文档来理解这个全新的概念，<del>所以我选择直接莽过去</del>。</p><p>就我目前的理解而言，dnf 的 module 似乎并不致力于帮助用户完成系统内某一程序的新老版本共存的难题，而仅仅是给用户提供了停留在老版本软件的权利。module 所负责的，是保证老版本的程序能在你的系统上正常运行起来，而不会因为其他组件的更新而导致老版本的程序无法正常使用。</p><h3 id="基本的使用方法"><a href="#基本的使用方法" class="headerlink" title="基本的使用方法"></a>基本的使用方法</h3><p>通过下列命令可以查看目前所支持的 module</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf module list<br></code></pre></td></tr></table></figure><p>通过下列命令可以选择 module 所要停留的版本( 以 ruby 2.7 为例 )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf module <span class="hljs-built_in">enable</span> ruby:2.7<br></code></pre></td></tr></table></figure><p>通过下列命令可以取消锁定 module 程序所要停留的版本( 以 ruby 为例 )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf module reset ruby<br></code></pre></td></tr></table></figure><h2 id="开始配置该-jekyll-主题的运行环境"><a href="#开始配置该-jekyll-主题的运行环境" class="headerlink" title="开始配置该 jekyll 主题的运行环境"></a>开始配置该 jekyll 主题的运行环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf module install ruby:2.7<br>sudo dnf install ruby-devel<br><br><span class="hljs-built_in">cd</span> /path/to/the/jekyll-blog/<br>bundle install --path vendor/bundle<br></code></pre></td></tr></table></figure><p>完成后，我们即可在 jekyll-blog 目录下 使用 <code>bundle exec jekyll</code> 来正常运行 jekyll 了。试着跑一下 <code>bundle exec jekyll server</code></p><p><img src="https://bu.dusays.com/2022/08/10/62f3caeec8ef6.webp" alt="成功，彻彻底底！"></p><h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><p><a href="https://docs.fedoraproject.org/en-US/modularity/">Fedora Docs</a></p><p><a href="https://github.com/openSUSE-zh/page-opensuse-zh/blob/main/CONTRIBUTING.md">openSUSE 中文社区主页贡献指南</a></p><p><a href="https://blog.kagesenshi.org/2021/05/ruby24-fedora34.html">Switching to use Ruby 2.7 (or older) in Fedora 34 using DNF Modules</a> 「<a href="https://web.archive.org/web/20220112143005/https://blog.kagesenshi.org/2021/05/ruby24-fedora34.html">WebArchive</a>」</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Fedora" scheme="https://zhul.in/tags/Fedora/"/>
    
  </entry>
  
  <entry>
    <title>pacman更新时遇到「GPGME 错误：无数据」</title>
    <link href="https://zhul.in/2022/01/01/pacman-gpgme-error-no-data/"/>
    <id>https://zhul.in/2022/01/01/pacman-gpgme-error-no-data/</id>
    <published>2022-01-01T15:42:09.000Z</published>
    <updated>2022-08-22T15:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好久没有更新博客了，今天来炒一炒暑假里的冷饭。故事的主人公是 <a href="https://wszqkzqk.github.io/">星外之神</a>，目前正在北大读书的大佬，<del>那天帮他解决问题以后还恬不知耻地问他要了个友链。</del></p></blockquote><h2 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h2><p>当初是使用pacman更新时遇上了「GPGME 错误：无数据」的问题，我尝试复现了下，大概是下面这样的情况。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[zhullyb@<span class="hljs-symbol">Archlinux</span> ~]$ sudo pacman -<span class="hljs-symbol">Syu</span><br>错误：<span class="hljs-symbol">GPGME</span> 错误：无数据<br>错误：<span class="hljs-symbol">GPGME</span> 错误：无数据<br>错误：<span class="hljs-symbol">GPGME</span> 错误：无数据<br>:: 正在同步软件包数据库...<br> core                                <span class="hljs-number">137.6</span> <span class="hljs-symbol">KiB</span>   <span class="hljs-number">598</span> <span class="hljs-symbol">KiB</span>/s <span class="hljs-number">00</span>:<span class="hljs-number">00</span> [------------------------------------] <span class="hljs-number">100</span><span class="hljs-comment">%</span><br> extra                              <span class="hljs-number">1566.0</span> <span class="hljs-symbol">KiB</span>  <span class="hljs-number">6.12</span> <span class="hljs-symbol">MiB</span>/s <span class="hljs-number">00</span>:<span class="hljs-number">00</span> [------------------------------------] <span class="hljs-number">100</span><span class="hljs-comment">%</span><br> community                             <span class="hljs-number">6.0</span> <span class="hljs-symbol">MiB</span>  <span class="hljs-number">20.6</span> <span class="hljs-symbol">MiB</span>/s <span class="hljs-number">00</span>:<span class="hljs-number">00</span> [------------------------------------] <span class="hljs-number">100</span><span class="hljs-comment">%</span><br>错误：<span class="hljs-symbol">GPGME</span> 错误：无数据<br>错误：<span class="hljs-symbol">GPGME</span> 错误：无数据<br>错误：<span class="hljs-symbol">GPGME</span> 错误：无数据<br>错误：未能同步所有数据库（无效或已损坏的数据库 (<span class="hljs-symbol">PGP</span> 签名)）<br></code></pre></td></tr></table></figure><p>英文版的提示应该是长成下面这个样子</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[zhullyb@Archlinux ~]$ sudo pacman -Syu<br><span class="hljs-keyword">error: </span>GPGME error: No data<br><span class="hljs-keyword">error: </span>GPGME error: No data<br><span class="hljs-keyword">error: </span>GPGME error: No data<br>:: Synchronizing package databases...<br> core                                137.6 KiB   574 KiB/s 00:00 [------------------------------------] 100%<br> extra                              1566.0 KiB  5.66 MiB/s 00:00 [------------------------------------] 100%<br> community                             6.0 MiB  18.1 MiB/s 00:00 [------------------------------------] 100%<br><span class="hljs-keyword">error: </span>GPGME error: No data<br><span class="hljs-keyword">error: </span>GPGME error: No data<br><span class="hljs-keyword">error: </span>GPGME error: No data<br><span class="hljs-keyword">error: </span>failed to synchronize all databases (invalid or corrupted database (PGP signature))<br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo rm <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/pacman/</span>sync/*.sig<br></code></pre></td></tr></table></figure><p>很简单，就这一条命令就够了。</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>pacman在更新数据库文件时也会尝试下载<code>$repo.db.sig</code>，这里的<code>$repo</code>可以是core、extra、community、archlinuxcn等仓库名。</p><p>但是无论是官方源还是archlinuxcn源，<strong>大多数源的数据库文件</strong>都不会被签名，也就<strong>不会存在 .db.sig 文件</strong>。</p><p>pacman 尝试下载时这些数据库文件的签名文件时，镜像站就会返回 <strong>404 的http状态码</strong>告诉pacman: “你个傻叉，神他妈没有这个文件！”</p><p>pacman 挨了一顿骂，也就善罢甘休，没有再动这个念头，所以我们每次更新也都相安无事。</p><p>而出现这种错误的情况大多是发生在 校园网、酒店免费WIFI 这种<strong>需要登陆以后才能上网的网络环境</strong>。</p><p>因为 pacman 尝试下载 <code>.db.sig</code> 文件时被登陆网页劫持了（这点你们应该深有感受，如果你在这种网络环境下没有登陆，你无论访问什么网页都会被重定向到登录界面，http的状态码此时是200，不是404）。从没见过 <code>.db.sig</code>的 pacman 此时两眼放光，由于没有挨骂，他就迅速地把登录界面当成是<code>.db.sig</code>下载下来了。</p><p>下载下来以后，pacman 激动地摆弄起 <code>.db.sig</code>，甚至发现里面没有自己期待已久的 GPG签名数据并开始报错时仍然不愿意撒手，因此此时无论再怎么同步源码、再怎么 Syyu 也不会有效果，必须人工干预。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>Cutefish的前世今生</title>
    <link href="https://zhul.in/2021/12/12/the-history-of-cutefish/"/>
    <id>https://zhul.in/2021/12/12/the-history-of-cutefish/</id>
    <published>2021-12-11T16:10:34.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CutefishOS是由我们国内的开发者主导（目前也主要是他们在开发）的桌面环境。不过似乎对于他的前世今生，似乎很多人都有误解。尤其是很多人认为他是一个Archlinux-based发行版；部分用户分不清他到底是基于Debian还是基于Ubuntu；还有人把它和 JingOS 弄混了。</p></blockquote><p>先把这些问题的回答写在最前面: </p><p>CutefishOS 是一个基于Debian的发行版，他的前身 CyberOS 是一个基于 Archlinux 的发行版。但要注意: Cutefish （不加OS）可以单独指代 CutefishOS 所使用的桌面环境，为了避免混淆，本文中我将使用CutefishDE来指代他的桌面环境。</p><p>CutefishOS 和 JingOS 目前只是官网互加友链的关系，并不是相同的东西。Cutefish的开发方向是基于qt重写一套UI，而JingOS则更像是在开发一套KDE的主题。</p><hr><h2 id="Cutefish的历史"><a href="#Cutefish的历史" class="headerlink" title="Cutefish的历史"></a>Cutefish的历史</h2><h3 id="CyberOS的故事"><a href="#CyberOS的故事" class="headerlink" title="CyberOS的故事"></a>CyberOS的故事</h3><p>第一次体验到这个UI其实是在21年的3月，在Archlinux的QQ群里，群主向我们推荐了 CyberOS ，这是一个基于 Archlinux 的发行版。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cae911901.webp" alt="QQ群公告"></p><p>由于基于 Archlinux，我直接就添加了CyberOS的源作为第三方源安装上了CyberDE，<del>那会儿还顺手水了篇博客，由于后来事情发展太快，这篇博客早就不适用了，就干脆删了，现在在我的Github还能找到那会儿的<a href="https://github.com/zhullyb/blog/blob/20210430/_posts/2021-03-21-install-cyber-desktop-on-your-archlinux.md">存档</a>。</del></p><h3 id="更名CutefishOS"><a href="#更名CutefishOS" class="headerlink" title="更名CutefishOS"></a>更名CutefishOS</h3><p>后来根据 CutefishOS 的QQ群的群主所说，是因为当时没注重海外平台的宣发，导致 CyberOS 的用户名在 Twitter 被抢注，因此决定改名 CutefishOS 。由于时间较为久远，QQ群的聊天记录已经几乎找不到了，我无法放出。</p><p>关于CutefishOS的创始时间我已经记不清了，但是可以推测是在21年的4~5月份左右。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="通过whois查询得知`cutefishos.com` 这个域名注册时间为21年3月31日">[1]</span></a></sup><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Cutefish进入Archlinux官方源](https://github.com/archlinux/svntogit-community/commit/b92bb9ae8fd35178cdfebb6f56b55f20722aa7dd)是在5月26日">[2]</span></a></sup><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[CyberOS的Github仓库](https://github.com/cyberos)最后一次内容变更是在21年的5月23日">[3]</span></a></sup></p><h3 id="官网上线"><a href="#官网上线" class="headerlink" title="官网上线"></a>官网上线</h3><p>21年5月12日，<a href="https://cutefishos.com/">cutefishos.com</a> 上线，暂时不提供安装镜像。</p><h3 id="进军Arch系"><a href="#进军Arch系" class="headerlink" title="进军Arch系"></a>进军Arch系</h3><p>5月26日，CutefishDE进入 <a href="https://archlinux.org/groups/x86_64/cutefish/">Archlinux官方源</a>。</p><p>同日，Github 组织 manjaro-cutefish 放出了使用 CutefishDE 的 <a href="https://github.com/manjaro-cutefish/download/releases">manjaro安装镜像</a>。这个组织和官方的 github.com/cutefishos 没有共同维护者，因此可以基本断定是第三方打包的。</p><h3 id="Ubuntu第三方打包版的跟进"><a href="#Ubuntu第三方打包版的跟进" class="headerlink" title="Ubuntu第三方打包版的跟进"></a>Ubuntu第三方打包版的跟进</h3><p>大约在7月中旬左右<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="这里参考的是 cutefish-ubuntu/cutefish-ubuntu.github.io 仓库的[第一个commit](https://github.com/cutefish-ubuntu/cutefish-ubuntu.github.io/commit/237a480992a74d8c75c1f4ec51511550ce97c64b)的时间">[4]</span></a></sup>，Github出现了一位名为 cutefish-ubuntu 的用户，开始在 Ubutnu 上编译 CutefishDE ，并通过 <a href="https://cutefish-ubuntu.github.io/">GithubPages</a> 发布安装镜像，依然是第三方打包的安装镜像。</p><h3 id="官方版本释出"><a href="#官方版本释出" class="headerlink" title="官方版本释出"></a>官方版本释出</h3><p>21年国庆长假期间，cutefishos.com 释出由 Cutefish官方发布的<a href="https://cutefishos.com/download">基于Debian的CutefishOS镜像</a>，搭载的DE是 0.5 版本的，英文版网页提供 Google Drive 和 Mega 的下载链接，中文版本网页非常贴心地添加了使用飞书下载的方式方便国内用户下载。</p><h3 id="RPM系的跟进"><a href="#RPM系的跟进" class="headerlink" title="RPM系的跟进"></a>RPM系的跟进</h3><h4 id="COPR"><a href="#COPR" class="headerlink" title="COPR"></a>COPR</h4><p>copr上分别有三名用户打包了CutefishDE/CyberDE，我以表格形式简单罗列一下</p><table><thead><tr><th>用户名</th><th>打包的DE</th><th>第一次打包日期</th></tr></thead><tbody><tr><td>rmnscnce</td><td>cutefish</td><td>2021.8.19</td></tr><tr><td>cappyishihara</td><td>cyber</td><td>2021.11.17</td></tr><tr><td>jesonlay</td><td>cutefish</td><td>2021.12.06</td></tr></tbody></table><h4 id="论坛用户"><a href="#论坛用户" class="headerlink" title="论坛用户"></a>论坛用户</h4><p>21年12月2日，一为名为<a href="https://bbs.cutefishos.com/u/gesangtome">gesangtome</a>的网友在CutefishOS的论坛上<a href="https://bbs.cutefishos.com/d/331-fedoracutefish">发布了自己编译的CutefishDE</a>。</p><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>通过whois查询得知<code>cutefishos.com</code> 这个域名注册时间为21年3月31日<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/archlinux/svntogit-community/commit/b92bb9ae8fd35178cdfebb6f56b55f20722aa7dd">Cutefish进入Archlinux官方源</a>是在5月26日<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/cyberos">CyberOS的Github仓库</a>最后一次内容变更是在21年的5月23日<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>这里参考的是 cutefish-ubuntu/cutefish-ubuntu.github.io 仓库的<a href="https://github.com/cutefish-ubuntu/cutefish-ubuntu.github.io/commit/237a480992a74d8c75c1f4ec51511550ce97c64b">第一个commit</a>的时间<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="OpenSource Project" scheme="https://zhul.in/tags/OpenSource-Project/"/>
    
  </entry>
  
  <entry>
    <title>wolai再打包遇到的问题--electron应用的dev判断机制</title>
    <link href="https://zhul.in/2021/12/03/dev-app-update-in-wolai/"/>
    <id>https://zhul.in/2021/12/03/dev-app-update-in-wolai/</id>
    <published>2021-12-03T14:53:25.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前对于electron懵懵懂懂的时候就把 <a href="https://www.wolai.com/">wolai</a> 给打包上了 AUR ，那会儿年少无知，也不懂得把内置的 electron 拆开来换成系统内置的以节省空间。前一阵子给CN源打完 Motrix 以后突然想起来自己在 AUR 上还有维护一个叫 wolai 的electron 应用，于是打算把软件内置的 electron 拆出来。尝试使用 <code>electron /path/to/app.asar</code> 命令启动的时候发现了以下的问题。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3caf822bec.webp" alt="报错了"></p><p>虽然这个报错无关紧要，直接右上角叉掉也不影响软件正常使用，但是就这样推上 AUR 似乎有些不太妥当。于是使用搜索引擎查找答案。</p><p>发现是使用系统自带的 electron 启动时，app.asar 内置的一个叫 <code>electron-updater</code> 的模块在自动检测更新时会误认为我们此时处于开发模式，于是会尝试读取 app.asar 内部的 dev-app-update.yml 以查询更新。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/electron-userland/electron-builder/issues/1505">[1]</span></a></sup></p><p>但问题在于这个 app.asar 并不是 wolai 开发者在开发时使用 development 模式打出来的包，应该是 production ，所以内置的那个文件名叫 app-update.yml ，少了个dev 前缀，就很尴尬。</p><p>以下内容来自一篇简书的文章<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.jianshu.com/p/15bde714e198">[2]</span></a></sup></p><blockquote><p>所以调试的时候可以建一个default-app.yml文件放在D:\hzhh123\workspace\vue-work\electron-demo1\node_modules\electron\dist\resources\default_app.asar 下，这里就涉及到asar解压缩，但是这样会很麻烦，打包后也需要这样替换，麻烦，所幸electron-updater中提供了这个文件的属性配置updateConfigPath，可以通过设置这个属性来解决这个问题</p></blockquote><p>很遗憾，我们并不是该应用的开发者，并不能指定<code>electron-uploader</code>构建时的参数，所以只能考虑解压缩 app.asar 手动放入 dev-app-update.yml 的方案。</p><p>根据又一篇简书的文章<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.jianshu.com/p/17d97e6bf174">[3]</span></a></sup>，我们了解到 npm 中有一个叫 asar 的程序可以帮助我们解压缩 app.asar。我这里直接将内容搬过来</p><blockquote><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">asar extract 压缩文件  解压文件夹<br></code></pre></td></tr></table></figure><p>压缩：如果压缩文件存在，则会被替换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">asar pack 文件夹  压缩文件名<br></code></pre></td></tr></table></figure></blockquote><p>原文是让我们直接使用 npm 下载安装 asar 程序，然而这就会让打包过程变得很复杂，所幸 Archlinux 官方源中已经将这个程序打完了，我们可以直接将 asar 写入 makedepends。</p><p>大概就写成了这个样子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">asar extract <span class="hljs-variable">$&#123;srcdir&#125;</span>/squashfs-root/resources/app.asar <span class="hljs-variable">$&#123;srcdir&#125;</span>/new_app<br><span class="hljs-built_in">mv</span>  <span class="hljs-variable">$&#123;srcdir&#125;</span>/squashfs-root/resources/app-update.yml <span class="hljs-variable">$&#123;srcdir&#125;</span>/new_app/dev-app-update.yml<br>asar pack <span class="hljs-variable">$&#123;srcdir&#125;</span>/new_app <span class="hljs-variable">$&#123;srcdir&#125;</span>/squashfs-root/resources/app.asar<br></code></pre></td></tr></table></figure><p>程序正常启动，没有弹出之前的对话框了。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cafb6b04d.webp" alt="成功啦"></p><p>参考: </p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/electron-userland/electron-builder/issues/1505">https://github.com/electron-userland/electron-builder/issues/1505</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.jianshu.com/p/15bde714e198">https://www.jianshu.com/p/15bde714e198</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.jianshu.com/p/17d97e6bf174">https://www.jianshu.com/p/17d97e6bf174</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="electron" scheme="https://zhul.in/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>Typora与我</title>
    <link href="https://zhul.in/2021/11/26/typora-and-me/"/>
    <id>https://zhul.in/2021/11/26/typora-and-me/</id>
    <published>2021-11-26T15:05:05.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Typora 要收费了，$14.9 买断制，支持三设备激活。而且尚且不知道这里买断的是单个大版本更新还是多个大版本更新。</p><p>很多人说，不要紧，我们有VsCode、我们有Vnote、我们有MarkText。。。</p><p>但我还是不习惯。</p><hr><p>Typora真的就是个非常纯粹的Markdown编辑器，他有所见即所得的视觉效果，同时为我提供了沉浸式的写作体验。</p><p>当我在使用Typora写文章的时候，我就是个非常单纯的内容创作者，我不需要去考虑各种Markdown的语法格式，我只需要用文字写下我所想的，然后通过右键菜单把文字的样式调整到一个能够合理突出主次的程度，便完成了。若是用的时间长了，记住了打开菜单时旁边现实的快捷键，那速度便更快了。即使有插入图片/视频的需求，我也只需要将图片复制进 Typora 的编辑框，我在Typora预先设置好的自定义上传命令会自动调用我部署在本地的<a href="https://github.com/xiebruce/PicUploader">PicUploader</a>完成上传，并将媒体文件以 Markdown/html 语法呈现在编辑框中。</p><p>这样一来，我的行文思路就是连贯、不受打断的。即使需要从系统中截取一些图片作说明用途，我也可以通过 Flameshot 截取图片并简单画几个箭头、标几个序号或者框几个按钮后复制到剪切板，并最终粘贴到Typora的编辑框中，整个过程就像是我在和别人QQ聊天时截个图发过去一般简单。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3b881e3c4c.gif" alt="gif缩略图有点小，建议是点开来看"></p><p>倘若我使用别的Markdown编辑器，我便需要将图片保存到本地、手动上传到图床、手动写markdown的<code>![]()</code>语法，如此一来，我的精力就被分散了，那我也就不会有为文章插入图片的兴趣，抑或是插入完某张图片以后深感心力憔悴，便把写了一半的文章束之高阁，欺骗自己将来有一天我会继续完成这篇文章。</p><hr><p><del>总而言之，Typora对于我而言确实是非常有用的工具，而我将在接下来的半年到一年时间中过渡到其他的开源Markdown编辑器中。即使改变我的使用习惯将是一件非常痛苦的事情，但我不得不这么做。Typora内置的electron在Archlinux的滚动更新下不知道过多久会出现与系统不兼容的情况<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="baidunetdisk-bin内置的electron已经无法在如今的Archlinux上跑起来了，目前唯一的解决方案是拆包、并使用系统级的electron去启动百度网盘，也就是AUR的baidunetdisk-electron。但是typora运用了一些混淆/加密的手段，使得只有他内置的electron才可以正确启动程序。">[1]</span></a></sup>，所以这意味着继续使用老版本的Typora并不是长久之策，我需要在此之前尽快切换到其他的Markdown编辑器。而我不是个商业公司的Markdown工程师，单纯为了个人兴趣而花大价钱去买这一款生产力工具却无法得到经济回馈似乎并不是一个明智的选择。</del></p><p>反转了，仔细阅读Typora官网的Q&amp;A后发现了这么一条:</p><blockquote><p><strong>Can I use Typora for free ?</strong></p><p>You will have a 15 days free trial before the purchase. If you use  dev version or Linux version, you will have unlimited trial time if you  keep Typora updated. But we may show “trial button” or disable certain  features to encourage you to purchase our app, but basic and most  functions will be kept.</p></blockquote><p>看起来 Dev 版和 Linux版本在最新版本可以无限试用下去，那我不考虑改变我的写作习惯了。</p><blockquote><p>注: Dev 版藏得有点深，在<a href="https://typora.io/releases/dev">这里</a></p></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>baidunetdisk-bin内置的electron已经无法在如今的Archlinux上跑起来了，目前唯一的解决方案是拆包、并使用系统级的electron去启动百度网盘，也就是AUR的baidunetdisk-electron。但是typora运用了一些混淆/加密的手段，使得只有他内置的electron才可以正确启动程序。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Casual Talk" scheme="https://zhul.in/tags/Casual-Talk/"/>
    
  </entry>
  
  <entry>
    <title>我是来吹CloudflareMirrors的</title>
    <link href="https://zhul.in/2021/11/21/use-cloudflare-mirrors/"/>
    <id>https://zhul.in/2021/11/21/use-cloudflare-mirrors/</id>
    <published>2021-11-20T17:48:49.000Z</published>
    <updated>2022-08-10T15:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Cloudflare也开始提供<a href="https://cloudflaremirrors.com/">Linux开源镜像站</a>了。</p><p>虽然在中国大陆地区，Cloudflare速度日常抽风，不适合作为我们本机镜像源，但完全可以用于境外VPS。平常我们对国内的镜像站比较熟悉，也知道自己的网络环境使用哪个镜像站会稍微快一些，但一旦出了国，这些经验就没有用了。</p><p>作为一家老牌的CDN网站加速服务提供商，Cloudflare提供的网络服务在全球范围内都非常快（<del>嗯，对，全球范围不包含中国大陆</del>）</p><p>无论你的vps是在美国日本，还是香港新加坡，cloudflare都能提供非常稳定高速的服务，只需要记住cloudflare镜像站的域名，便可以抛弃挑选镜像站的烦恼。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3c9a9448a4.webp"></p><p>根据网页上所说，cloudflare会以「反代就近的镜像站」+「缓存」的形式来提供服务，<del>既然都要通过cloudflare网络，那中国大陆地区就可以彻底别想了</del>，能够给几乎所有地区提供不错的服务。目前说是只提供了「<a href="https://cloudflaremirrors.com/archlinux/">Archlinux</a>」和「<a href="https://cloudflaremirrors.com/debian/">Debian</a>」的服务，但是根据我考证下来，其实「<a href="https://cloudflaremirrors.com/ubuntu/">Ubuntu</a>」和「<a href="https://cloudflaremirrors.com/centos/">CentOS</a>」也有，只不过没写在页面上罢了。那么废话不多说，我们上境外的vps测一下下载速度如何。</p><p><a href="https://cloudflaremirrors.com/">cloudflaremirrors</a> 在我这台位于美国达拉斯机房的1Gbps机器上可以跑到80MB/s+的速度，虽然没有跑满理论速率，但也算是相当喜人的成绩了。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccc8d7c82.webp"></p><p>小结: </p><p>CloudflareMirrors非常适合境外的vps使用，免去了用户自行给一个个镜像站测速的麻烦。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>deepin-elf-verify究竟是何物？</title>
    <link href="https://zhul.in/2021/11/20/what-is-deepin-elf-verify/"/>
    <id>https://zhul.in/2021/11/20/what-is-deepin-elf-verify/</id>
    <published>2021-11-19T16:00:00.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>越来越多上架在 Deepin 应用商店中的 deb 包中开始依赖了一个叫做 <code>deepin-elf-verify</code> 的依赖，今天来讲讲这个<del>神奇</del>的 <code>deepin-elf-verify</code> 到底为何物，为什么这么多程序都要依赖于他来工作。</p><h2 id="下载拆包"><a href="#下载拆包" class="headerlink" title="下载拆包"></a>下载拆包</h2><p>打开 <a href="https://mirrors.bfsu.edu.cn/">Bfsu镜像站</a> ，可以很轻松地找到 <a href="https://mirrors.bfsu.edu.cn/deepin/dists/apricot/main/binary-amd64/Packages">Packages</a> —— 在 apt 源中记录了各个文件信息（包括他在仓库中的相对位置）的这么一个<em>神奇</em>的文件，就是体积有点大，达到了68MB的样子。我们可以通过以下命令检索今天的主角——<code>deepin-elf-verify</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s https://mirrors.bfsu.edu.cn/deepin/dists/apricot/main/binary-amd64/Packages | grep deepin-elf-sign | grep pool<br></code></pre></td></tr></table></figure><p>得到了输出: </p><blockquote><p>Filename: pool/main/d/deepin-elf-verify/deepin-elf-verify_0.2.0.6-1_amd64.deb</p></blockquote><p>我们就可以把完整的下载链接拼出来: <a href="https://mirrors.bfsu.edu.cn/deepin/pool/main/d/deepin-elf-verify/deepin-elf-verify_0.2.0.6-1_amd64.deb">https://mirrors.bfsu.edu.cn/deepin/pool/main/d/deepin-elf-verify/deepin-elf-verify_0.2.0.6-1_amd64.deb</a></p><p>下载解压，大概是这么一个目录结构: </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">deepin-elf-verify_0.<span class="hljs-number">2.0</span>.<span class="hljs-number">6</span>-<span class="hljs-number">1</span>_amd64<br>├── control<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.xz</span><br>├── data<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.xz</span><br>└── debian-binary<br></code></pre></td></tr></table></figure><p>是个常规的deb包该有的结构了。</p><ul><li>control.tar.xz 中存放了deb包的相关信息</li><li>data.tar.xz 是整个包最终会被安装到系统中的文件</li></ul><p>终于到了激动人心的时刻了，打开 data.tar.xz ！</p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccc192986.webp" alt="空的？"></p><p><strong>搞错了，再来</strong></p><p>打开UOS的<a href="https://uos.deepin.cn/uos/">源链接</a>，使用<code>curl</code>+<code>grep</code>检索<code>deepin-elf-verify</code>在源中的相对位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sL https://uos.deepin.cn/uos/dists/eagle/main/binary-amd64/Packages | grep deepin-elf-verify | grep pool<br></code></pre></td></tr></table></figure><p>获得输出: </p><blockquote><p>Filename: pool/main/d/deepin-elf-verify/deepin-elf-verify_0.0.14.5-1_amd64.deb<br>Filename: pool/main/d/deepin-elf-verify/deepin-elf-verify-dbgsym_0.0.14.5-1_amd64.deb</p></blockquote><p>拼接为链接: <a href="https://uos.deepin.cn/uos/pool/main/d/deepin-elf-verify/deepin-elf-verify_0.0.14.5-1_amd64.deb">https://uos.deepin.cn/uos/pool/main/d/deepin-elf-verify/deepin-elf-verify_0.0.14.5-1_amd64.deb</a></p><p>下载后打开 <code>data.tar.xz</code></p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccc53d544.webp" alt="看来还是有东西的"></p><h2 id="说说结论吧"><a href="#说说结论吧" class="headerlink" title="说说结论吧"></a>说说结论吧</h2><h3 id="对于UOS"><a href="#对于UOS" class="headerlink" title="对于UOS"></a>对于UOS</h3><p>在UOS下，<code>deepin-elf-verify</code>用于检测用户运行的进程是否被deepin信任的证书签名过，虽然有些过于限制用户，对于一个将要广泛用于政府机关的发行版而言是可以理解的。</p><h3 id="对于deepin"><a href="#对于deepin" class="headerlink" title="对于deepin"></a>对于deepin</h3><ul><li><p><code>deepin-elf-verify</code> 在 deepin 上就是个空包。</p></li><li><p>当我们使用 deepin 安装一个含有 <code>deepin-elf-verify</code> 的软件包时，apt 会自动从源内搜索并安装 <code>deepin-elf-verify</code>，由于是个空包，他对于系统不会有任何负担。</p></li><li><p>大多数依赖<code>deepin-elf-verify</code>的程序都把依赖写成了<code>deepin-elf-verify (&gt;= 0.0.16.7-1)</code>，而在deepin源中，<code>deepin-elf-verify</code>版本号是 0.2.0.6，因此在未来的很长一段时间里应该都是满足要求的，说明统信那边并没有「想要让deepin装不上UOS的包」的这种想法，可见在这一点上，统信还没有明显的偏心。</p></li></ul><h3 id="在别的Deb发行版下"><a href="#在别的Deb发行版下" class="headerlink" title="在别的Deb发行版下"></a>在别的Deb发行版下</h3><p><code>deepin-elf-verify</code>存在于、并且仅仅存在于 deepin 和 UOS 的源内。</p><p>而当我们使用别的 deb 发行版（如Debian、Ubuntu）时，apt 无法在他们自己的源内找到 <code>deepin-elf-verify</code> ，apt就会报错并且停止安装。</p><p><strong>小结: 至于其最终目的，是为了__________________________</strong></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="deepin" scheme="https://zhul.in/tags/deepin/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】请别再使用主题装饰我们的软件</title>
    <link href="https://zhul.in/2021/11/05/please-dont-theme-our-apps/"/>
    <id>https://zhul.in/2021/11/05/please-dont-theme-our-apps/</id>
    <published>2021-11-05T12:35:58.000Z</published>
    <updated>2023-02-04T01:51:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>标题中的「我们」当然不是我自己，这是一封来自GNOME开发者针对广大GNOME社区开发者的一封公开信。看着挺有意思的，其中也透露出了GNOME的设计理念，我在这里尽力将其不掺杂个人情感地翻译完。原文可以查看这里: <a href="https://stopthemingmy.app/">https://stopthemingmy.app/</a></em></p><hr><blockquote><p>请从头到尾阅读这封信。</p><p>这份信针对的是那些在默认设置下使用第三方主题破坏软件体验的发行版，而不是那些试图使用第三方主题美化自己桌面的用户。（原文中出现的是tinkerers，意为修补匠）</p></blockquote><p>我们是 GNOME 平台的应用开发者与设计者，我们为自己的成果感到自豪，并努力确保我们的应用能够为人们提供良好的体验。</p><p>然而不幸的是，在许多情况下，我们所有在软件的设计、开发、测试上所做出努力都因为第三方主题而变得徒劳无功。</p><p><img src="https://stopthemingmy.app/assets/stylesheets.png" alt="&lt;font size=&quot;5&quot;&gt;&lt;b&gt;GTK样式&lt;/b&gt;可以使得软件外观看上去不协调、甚至使得软件无法使用&lt;/font&gt;"></p><p><img src="https://stopthemingmy.app/assets/iconthemes.png" alt="&lt;font size=&quot;5&quot;&gt;&lt;b&gt;图表包&lt;/b&gt;可以改变图标的含义，使得显示的图标无法准确的表达开发者的意思。&lt;/font&gt;"></p><p><img src="https://stopthemingmy.app/assets/appicons.png" alt="&lt;font size=&quot;5&quot;&gt;&lt;b&gt;应用图标&lt;/b&gt;是一个软件身份的象征。改变一个软件的图标剥夺了开发者控制其品牌的可能性&lt;/font&gt;"></p><p><em>注: 这些例子纯粹只是用于说明问题，并不针对个别主题。所以，主题开发者们别多想。❤️</em></p><p>当然，还有些不那么直接的后果，包括: </p><ul><li><p>在GNOME软件中心或Flathub 中使用的截图( <strong>Appstream Screenshots</strong> )中的UI会和你实际安装以后的UI看上去完全不同，这使得这些截图失去了原有的意义。</p></li><li><p>如果系统的UI元素和用户帮助文档中出现的元素不同，用户帮助文档将会极大地丢失原有意义。</p></li></ul><p>这些博客文章更详细地解释了主题化的一些问题：</p><ul><li><p>GTK Stylesheets — <a href="https://blogs.gnome.org/tbernard/2018/10/15/restyling-apps-at-scale">Restyling apps at scale</a></p></li><li><p>App Icons — <a href="https://samuelhewitt.com/blog/2017-11-26-linux-themes-third-party-icons">Linux Themes &amp; Third-Party Icons</a></p></li></ul><p><strong>这就是为什么我们心平气和地要求我们的软件不要被主题化。</strong> 它们是被上游所使用的（即默认的） GNOME 样式表、图标和字体 所构建和测试的，因此它们在用户的系统上应该是原汁原味的。</p><p>虽然我们可以直接在我们的应用程序中禁用主题，但我们不想这么做。 我们认为技术性的解决方案可能不会有效，因为这不是技术问题。</p><p>在技术上，我们希望软件可以在没有人工干预的情况下被自动地重新设计，但这到目前为止仍然是个幻想。在这种技术现状被改善之前，这种（应用被主题搞炸）的情况几乎不可能被解决。因此，我们正试图通过这封信向大家告知这种情况，并尽自己的一份力量。 </p><p><strong>如果你想要美化你自己的系统，我们没有意见</strong>。然而，如果你改变了诸如图标、样式表等东西，你应当意识到你的行为不会得到支持（应该是指不会得到社区的帮助）。您遇到的任何问题都应直接报告给主题开发者，而不是软件开发者。</p><p>作为一个平台，<strong>我们坚信GTK应当停止强制默认在所有软件使用同一个样式表</strong>（也就是说应该可以为不同的软件指定不同的GTK样式）。应用程序不必通过把样式表写死来避免这种情况，而是应该使用平台样式表（系统提供的样式表），除非他们魔改了样式表以加入其他内容。 我们意识到这是一个复杂的问题，但假设每个应用程序都适用于每个样式表同样也是一个糟糕的默认设置。 </p><p><strong>如果你是更改了系统样式表和图标的发行版的开发人员，希望你重新考虑此决定</strong>。 在没有任何 QA 的情况下更改第三方应用程序是鲁莽的，并且在任何其他平台上都是不可接受的。 您的行为对我们这些应用程序开发人员造成了很大的伤害，并且正在损害除了您的发行版以外的整个软件生态。</p><p>我们理解发行版需要脱颖而出来吸引用户。但是，我们敦促您想办法在不剥夺我们代理权的情况下做到这一点。 我们厌倦了当人们告诉我们「这个主题魔改得还不错」时，我们必须为我们从未打算支持的设置做额外的工作。你绝对不会对 Blender、Atom、Telegram 或其他第三方应用程序做出这样的魔改。我们的应用程序使用 GTK 并不意味着我们可以接受别人对它们的魔改。</p><p>由于你要使用 GNOME 平台开发，我们预设「你希望这个软件生态是健康的」。如果现实确实如此，我们要求您停止使用主题装饰我们的软件的这一行为。</p><p>署名,</p><ul><li><strong>Alexander Mikhaylenko</strong><br> Maintainer of <a href="https://gitlab.gnome.org/GNOME/gnome-games">Games</a></li><li><strong>Avi Wadhwa</strong><br> Maintainer of <a href="https://gitlab.gnome.org/aviwad/organizer">Organizer</a></li><li><strong>Bilal Elmoussaoui</strong><br> Maintainer of <a href="https://gitlab.gnome.org/World/Authenticator">Authenticator</a>, <a href="https://gitlab.gnome.org/World/design/icon-library">Icon Library</a>, <a href="https://gitlab.gnome.org/World/design/contrast">Contrast</a> and <a href="https://gitlab.gnome.org/World/obfuscate">Obfuscate</a></li><li><strong>Cédric Bellegarde</strong><br> Maintainer of <a href="https://gitlab.gnome.org/World/lollypop">Lollypop</a>, <a href="https://gitlab.gnome.org/World/eolie">Eolie</a>, and <a href="https://gitlab.gnome.org/gnumdk/passbook">Passbook</a></li><li><strong>Christopher Davis</strong><br> Core contributor to <a href="https://gitlab.gnome.org/GNOME/Fractal">Fractal</a></li><li><strong>Daniel García Moreno</strong><br> Maintainer of <a href="https://gitlab.gnome.org/GNOME/Fractal">Fractal</a> and <a href="https://gitlab.gnome.org/danigm/timetrack">Timetrack</a></li><li><strong>Falk Alexander Seidl</strong><br> Maintainer of <a href="https://gitlab.gnome.org/World/PasswordSafe">Password Safe</a></li><li><strong>Felix Häcker</strong>,<br> Maintainer of <a href="https://gitlab.gnome.org/World/Shortwave">Gradio/Shortwave</a>, <a href="https://gitlab.gnome.org/World/Fragments">Fragments</a>, and <a href="https://gitlab.gnome.org/World/Remotely">Remotely</a></li><li><strong>Forever XML</strong><br> Maintainer of <a href="https://codeberg.org/foreverxml/random">Random</a></li><li><strong>Jan Lukas Gernert</strong><br> Author of <a href="https://jangernert.github.io/FeedReader/">FeedReader</a> and <a href="https://gitlab.com/news-flash">NewsFlash</a></li><li><strong>Jordan Petridis</strong><br> Maintainer of <a href="https://gitlab.gnome.org/World/podcasts">Podcasts</a></li><li><strong>Julian Sparber</strong><br> Core contributor to <a href="https://gitlab.gnome.org/GNOME/Fractal">Fractal</a>, maintainer of <a href="https://gitlab.gnome.org/jsparber/teleport">Teleport</a></li><li><strong>Lains</strong><br> Maintainer of <a href="https://github.com/lainsce/notejot">Notejot</a>, <a href="https://github.com/lainsce/khronos">Khronos</a>, <a href="https://github.com/lainsce/dot-matrix">Dot Matrix</a>, <a href="https://github.com/lainsce/quilter">Quilter</a>, and <a href="https://github.com/lainsce/emulsion">Emulsion</a></li><li><strong>Manuel Genovés</strong><br> Maintainer of <a href="https://github.com/UberWriter/uberwriter">UberWriter</a></li><li><strong>Maximiliano Sandoval</strong><br> Maintainer of <a href="https://gitlab.gnome.org/World/decoder">Decoder</a> and <a href="https://gitlab.gnome.org/World/design/lorem">Lorem</a>, core contributor to <a href="https://gitlab.gnome.org/World/PasswordSafe">Password Safe</a></li><li><strong>Michael Gratton</strong><br> Maintainer of <a href="https://gitlab.gnome.org/GNOME/Geary">Geary</a></li><li><strong>Rafael Mardojai C.M.</strong><br> Maintainer of <a href="https://github.com/rafaelmardojai/blanket">Blanket</a>, <a href="https://github.com/dialect-app/dialect">Dialect</a>, <a href="https://github.com/rafaelmardojai/share-preview">Share Preview</a> and <a href="https://github.com/rafaelmardojai/webfont-kit-generator">Webfont Kit Generator</a></li><li><strong>Sophie Herold</strong><br> Maintainer of <a href="https://apps.gnome.org/app/org.gnome.World.PikaBackup/">Pika Backup</a></li><li><strong>Tobias Bernard</strong><br> Designer of <a href="https://gitlab.gnome.org/World/Fragments">Fragments</a> and <a href="https://gitlab.gnome.org/World/podcasts">Podcasts</a> (among others)</li><li><strong>Zander Brown</strong><br> Maintainer of <a href="https://gitlab.gnome.org/World/design/icon-preview">Icon Preview</a></li><li><strong>The <a href="https://usebottles.com/">Bottles</a> Developers</strong></li><li><strong>The <a href="https://pitivi.org/">Pitivi</a> Developers</strong></li></ul><p><em>Note: Even though some of us are Foundation  members or work on GNOME, these are our personal views as individuals,  and not those of the GNOME Project, the GNOME Foundation, or our  employers.</em></p><hr><p><strong>推荐阅读:  <a href="https://whiteboard-ui8.pages.dev/translation/libadwaita-gtk4-TheEvilSkeleton/">《libadwaita：修复 Linux 桌面的可用性问题》</a></strong></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="翻译" scheme="https://zhul.in/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Waydroid on KDE 初体验</title>
    <link href="https://zhul.in/2021/10/31/waydroid-experience-on-kde/"/>
    <id>https://zhul.in/2021/10/31/waydroid-experience-on-kde/</id>
    <published>2021-10-31T07:57:57.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<a href="https://yanqiyu.info/">西木野羰基的博客</a>中看到了其在Fedora中使用waydroid跑明日方舟的<a href="https://bu.dusays.com/2022/08/10/62f3cc0d6b9e8.png">截图</a>，心里有有些痒痒了，决定在Archlinux上尝试使用waydroid。</p></blockquote><h2 id="Waydroid是什么"><a href="#Waydroid是什么" class="headerlink" title="Waydroid是什么"></a>Waydroid是什么</h2><p>Waydroid是一个基于lxc容器技术，用以启动完整安卓系统的方案。</p><p>默认使用了LineageOS-17.1，对应 Aosp10，相比起 anbox 显然是更加新了。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cb238c027.webp" alt="是长成这样"></p><h2 id="内核支持"><a href="#内核支持" class="headerlink" title="内核支持"></a>内核支持</h2><p>waydroid需要内核提供<code>Ashmem</code>和<code>binder</code>支持，西木野羰基是使用的自己编译的内核。而我在使用Archlinux，因此直接使用<code>linux-zen</code>即可。</p><blockquote><p>注: AUR上的<code>linux-xanmod</code>虽然也有这些模块支持，但是在编译时设置了<code>psi=0</code>以提升性能，而waydroid恰巧需要<code>psi=1</code>的支持，故不可使用。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Archlinux已经有人将其打包上传到了AUR，我们直接安装即可。我使用的 AUR Helper 是 yay，所以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S waydroid --noconfirm<br></code></pre></td></tr></table></figure><p>再装个<code>python-pyclip</code>解决剪切板同步的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S python-pyclip<br></code></pre></td></tr></table></figure><h2 id="下载Waydroid镜像"><a href="#下载Waydroid镜像" class="headerlink" title="下载Waydroid镜像"></a>下载Waydroid镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo waydroid init<br></code></pre></td></tr></table></figure><p>这一步将会自动（从SourceForge）下载纯净的LineageOS镜像压缩包并解压，处于中国大陆网络环境的用户记得（          ）</p><p>如果你需要Gapps，可以指定下载Gapps版本，但是这将需要你获取<code>Android ID</code>并向谷歌提交 Custom Rom 的 Gapps 申请。见<a href="https://www.google.com/android/uncertified/">这里</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo waydroid init -s GAPPS<br></code></pre></td></tr></table></figure><h2 id="启用服务"><a href="#启用服务" class="headerlink" title="启用服务"></a>启用服务</h2><p>这个没什么好说的，使用systemctl启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start waydroid-container.service<br></code></pre></td></tr></table></figure><h2 id="开启waydroid"><a href="#开启waydroid" class="headerlink" title="开启waydroid"></a>开启waydroid</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">waydroid session start<br></code></pre></td></tr></table></figure><h2 id="一些简单的使用技巧"><a href="#一些简单的使用技巧" class="headerlink" title="一些简单的使用技巧"></a>一些简单的使用技巧</h2><p>如果你想直接展示整个系统界面，可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">waydroid show-full-ui<br></code></pre></td></tr></table></figure><p>我们也可以用<code>waydroid app launch $&#123;package_name&#125;</code>的方式来启动单个应用（包名可以使用<code>waydroid app list</code>来获取</p><p>当然，可以直接在Linux环境里 安装 某个apk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">waydroid app install path/to/apkfile.apk<br></code></pre></td></tr></table></figure><p>F11有助于解决应用分辨率问题，左Alt有助于解决键盘无法输入的问题。</p><p>Github上有个<a href="https://github.com/casualsnek/waydroid_script">脚本</a>，可以帮助 安装OpenGapps/Magisk/arm转译库/获取Android ID。</p><h2 id="牢骚时间"><a href="#牢骚时间" class="headerlink" title="牢骚时间"></a>牢骚时间</h2><ul><li>对AMD和英伟达的显卡支持都不太行</li><li>不能直接输入中文，还是得借助安卓系统内的输入法。</li><li>不自带arm转译库，通过脚本安装的转译库似乎兼容性挺差（至少我是成功打开什么arm软件</li><li>系统运行的流畅度还可以</li><li>相关的资料似乎有点少，官方的文档也没有写得太详细</li><li>Waydroid会自动在<code>$HOME/.local/share/applications/</code>为wayland内的安装应用添加Desktop文件（这让我有些反感</li></ul><h2 id="一些截图"><a href="#一些截图" class="headerlink" title="一些截图"></a>一些截图</h2><p><img src="https://bu.dusays.com/2022/08/10/62f3cb26cba03.webp"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cc722835c.webp" alt="原生安卓从未变过的应用抽屉"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cc76b986c.webp" alt="这充电速度太刺激啦！"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="Experience" scheme="https://zhul.in/tags/Experience/"/>
    
    <category term="KDE" scheme="https://zhul.in/tags/KDE/"/>
    
    <category term="Waydroid" scheme="https://zhul.in/tags/Waydroid/"/>
    
  </entry>
  
  <entry>
    <title>PicUploader使用系列（二）——为KDE的dolphin添加右键快捷菜单</title>
    <link href="https://zhul.in/2021/10/24/picuploader-with-kde-action/"/>
    <id>https://zhul.in/2021/10/24/picuploader-with-kde-action/</id>
    <published>2021-10-24T14:26:50.000Z</published>
    <updated>2022-08-22T15:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2021/10/21/picuploader-on-archlinux-with-caddy/">上一篇文章</a>我们在Archlinux中成功部署了PicUploader的web端，本文我们来讲讲如何为KDE的dolphin添加右键快捷键上传，效果类似这样。（gif图来自<a href="https://www.xiebruce.top/17.html">PicUploader作者的博客</a>)</p><center><img src="https://img.xiebruce.top/2018/09/11/f4859eda8832f814486fc00df971e3cc.gif" width = "" height = ""></center><h2 id="创建-desktop文件"><a href="#创建-desktop文件" class="headerlink" title="创建.desktop文件"></a>创建.desktop文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.local/share/kservices5/<br><span class="hljs-built_in">touch</span> <span class="hljs-variable">$HOME</span>/.local/share/kservices5/picuploader.desktop<br></code></pre></td></tr></table></figure><h2 id="填上这段内容"><a href="#填上这段内容" class="headerlink" title="填上这段内容"></a>填上这段内容</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[Desktop Entry]<br><span class="hljs-attribute">Actions</span>=PicUploader;<br><span class="hljs-attribute">MimeType</span>=image/jpeg;image/png;<br><span class="hljs-attribute">Type</span>=Service<br><span class="hljs-attribute">X-KDE-Priority</span>=TopLevel<br><span class="hljs-attribute">X-KDE-ServiceTypes</span>=KonqPopupMenu/Plugin<br><span class="hljs-attribute">Icon</span>=/var/www/image/favicon.ico<br><br>[Desktop Action PicUploader]<br><span class="hljs-attribute">Name</span>=Upload with PicUploader<br>Name[zh_CN]=使用PicUploader上传<br><span class="hljs-attribute">Icon</span>=/var/www/image/favicon.ico<br><span class="hljs-attribute">Exec</span>=php /var/www/image/index.php %F | scopy<br></code></pre></td></tr></table></figure><p><strong>注: 这里的 scopy 是我在下面<a href="#%E5%A4%8D%E5%88%B6%E5%88%B0%E7%B2%98%E8%B4%B4%E6%9D%BF">自己创建的一段脚本</a>，用以同时满足x11和wayland下的使用，如果你仅使用x11的话直接改成<code>xclip -selection clipboard</code>即可。</strong></p><p>MimeType指的是文件类型。在这份desktop中，我仅指定了png和jpg文件在右键时会弹出picuploader的上传菜单，如果你需要更多文件类型的MimeType，你可以参考下gwenview的desktop都写了哪些文件类型。</p><blockquote><p>MimeType=inode/directory;image/avif;image/gif;image/jpeg;image/png;image/bmp;image/x-eps;image/x-icns;image/x-ico;image/x-portable-bitmap;image/x-portable-graymap;image/x-portable-pixmap;image/x-xbitmap;image/x-xpixmap;image/tiff;image/x-psd;image/x-webp;image/webp;image/x-tga;application/x-krita;image/x-kde-raw;image/x-canon-cr2;image/x-canon-crw;image/x-kodak-dcr;image/x-adobe-dng;image/x-kodak-k25;image/x-kodak-kdc;image/x-minolta-mrw;image/x-nikon-nef;image/x-olympus-orf;image/x-pentax-pef;image/x-fuji-raf;image/x-panasonic-rw;image/x-sony-sr2;image/x-sony-srf;image/x-sigma-x3f;image/x-sony-arw;image/x-panasonic-rw2;</p></blockquote><h2 id="安装所需组件"><a href="#安装所需组件" class="headerlink" title="安装所需组件"></a>安装所需组件</h2><h3 id="通知提示"><a href="#通知提示" class="headerlink" title="通知提示"></a>通知提示</h3><p>右下角弹出文字提示的功能依赖于<code>libnotify</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S libnotify --needed<br></code></pre></td></tr></table></figure><h3 id="复制到粘贴板"><a href="#复制到粘贴板" class="headerlink" title="复制到粘贴板"></a>复制到粘贴板</h3><p><del>复制到粘贴板的功能依赖于<code>xclip</code></del></p><p><del><code>sudo pacman -S xclip --needed</code></del></p><p>考虑到我可能在 x11 和 wayland 之间反复横跳，仅仅一个<code>xclip</code>看起来满足不了我的需求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S xclip wl-clipboard --needed<br></code></pre></td></tr></table></figure><p>手糊了一段脚本，用以判断对应的运行环境并调用相应的粘贴板工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/scopy<br>---<br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$XDG_SESSION_TYPE</span>&quot;</span> = <span class="hljs-string">&quot;wayland&quot;</span> ]; <span class="hljs-keyword">then</span><br>  wl-copy<br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$XDG_SESSION_TYPE</span>&quot;</span> = <span class="hljs-string">&quot;x11&quot;</span> ]; <span class="hljs-keyword">then</span><br>  xclip -selection clipboard<br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ERROR! You are using <span class="hljs-variable">$XDG_SESSION_TYPE</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>为<code>/usr/bin/scopy</code>授予运行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 755 /usr/bin/scopy<br></code></pre></td></tr></table></figure><h2 id="启用该动作菜单"><a href="#启用该动作菜单" class="headerlink" title="启用该动作菜单"></a>启用该动作菜单</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kbuildsycoca5<br></code></pre></td></tr></table></figure><h2 id="处理普通用户无权写入logs的问题"><a href="#处理普通用户无权写入logs的问题" class="headerlink" title="处理普通用户无权写入logs的问题"></a>处理普通用户无权写入logs的问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 777 -R /var/www/image/logs/<br></code></pre></td></tr></table></figure><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><center><img src="https://bu.dusays.com/2022/08/10/62f36f57f34aa.gif" width = "" height = ""></center><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://cnzhx.net/blog/kde-plasma-5-dolphin-add-action-menu-entry/">在 KDE Plasma 5 的 Dolphin 中添加一个右键动作菜单</a></p><p><a href="https://www.xiebruce.top/17.html">PicUploader: 一个还不错的图床工具</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="KDE" scheme="https://zhul.in/tags/KDE/"/>
    
    <category term="PicUploader" scheme="https://zhul.in/tags/PicUploader/"/>
    
  </entry>
  
  <entry>
    <title>PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader</title>
    <link href="https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/"/>
    <id>https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/</id>
    <published>2021-10-21T14:15:33.000Z</published>
    <updated>2022-08-22T15:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前找对大陆网络友好的图床时，找到了cloudinary，但是全英文界面对操作增加了不少难度，其页面也不是很简洁，让我一下打消了使用网页版的念头。通过搜索，找到了 PicUploader 这一方案，使用php编写，支持cloudinary的api。</p><p>作者在其<a href="https://www.xiebruce.top/17.html">博客</a>中仅提供了nginx的部署方案，我参考其配置文件成功实现了在caddy下的部署，并且花费了数个小时排坑，故写下本文帮助后来者节省时间。</p></blockquote><h2 id="安装caddy和php-fpm以及所需的拓展"><a href="#安装caddy和php-fpm以及所需的拓展" class="headerlink" title="安装caddy和php-fpm以及所需的拓展"></a>安装<code>caddy</code>和<code>php-fpm</code>以及所需的拓展</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S caddy php-fpm php-gd php-sqlite --needed<br></code></pre></td></tr></table></figure><h2 id="配置php-fpm"><a href="#配置php-fpm" class="headerlink" title="配置php-fpm"></a>配置<code>php-fpm</code></h2><h3 id="在-etc-php-php-ini启用PicUploader所需拓展"><a href="#在-etc-php-php-ini启用PicUploader所需拓展" class="headerlink" title="在/etc/php/php.ini启用PicUploader所需拓展"></a>在<code>/etc/php/php.ini</code>启用PicUploader所需拓展</h3><p>PicUploaer依赖于<code>fileinfo</code>、<code>gd</code>、<code>curl</code>、<code>exif</code>、<code>pdo_sqlite</code>拓展，可以使用<code>php -m</code>命令来查看目前加载成功了的插件。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs diff">;extension=bcmath<br>;extension=bz2<br>;extension=calendar<br><span class="hljs-deletion">- extension=curl</span><br><span class="hljs-addition">+ extension=curl</span><br>;extension=dba<br>;extension=enchant<br><span class="hljs-deletion">- extension=exif</span><br><span class="hljs-addition">+ extension=exif</span><br>;extension=ffi<br>;extension=ftp<br><span class="hljs-deletion">- extension=gd</span><br><span class="hljs-addition">+ extension=gd</span><br>;extension=gettext<br>;extension=gmp<br>;extension=iconv<br>;extension=imap<br>;extension=intl<br>;extension=ldap<br>;extension=mysqli<br>;extension=odbc<br>;zend_extension=opcache<br>;extension=pdo_dblib<br>;extension=pdo_mysql<br>;extension=pdo_odbc<br>;extension=pdo_pgsql<br><span class="hljs-deletion">- extension=pdo_sqlite</span><br><span class="hljs-addition">+ extension=pdo_sqlite</span><br>;extension=pgsql<br>;extension=pspell<br>;extension=shmop<br>;extension=snmp<br>;extension=soap<br>;extension=sockets<br>;extension=sodium<br>;extension=sqlite3<br>;extension=sysvmsg<br>;extension=sysvsem<br>;extension=sysvshm<br>;extension=tidy<br>;extension=xmlrpc<br>;extension=xsl<br>extension=zip<br></code></pre></td></tr></table></figure><h3 id="编辑-etc-php-php-ini以增加单文件上传大小限制"><a href="#编辑-etc-php-php-ini以增加单文件上传大小限制" class="headerlink" title="编辑/etc/php/php.ini以增加单文件上传大小限制"></a>编辑<code>/etc/php/php.ini</code>以增加单文件上传大小限制</h3><p><del>查出这个问题浪费了我整整4小时时间。</del></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- upload_max_filesize = 2M</span><br><span class="hljs-addition">+ upload_max_filesize = 100M</span><br></code></pre></td></tr></table></figure><h3 id="编辑-etc-php-php-fpm-d-www-conf使其在运行时使用caddy用户。"><a href="#编辑-etc-php-php-fpm-d-www-conf使其在运行时使用caddy用户。" class="headerlink" title="编辑/etc/php/php-fpm.d/www.conf使其在运行时使用caddy用户。"></a>编辑<code>/etc/php/php-fpm.d/www.conf</code>使其在运行时使用caddy用户。</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">---</span><br>; Unix user/group of processes<br>; Note: The user is mandatory. If the group is not set, the default user&#x27;s group<br>;       will be used.<br><span class="hljs-deletion">- user = http</span><br><span class="hljs-addition">+ user = caddy</span><br><span class="hljs-deletion">- group = http</span><br><span class="hljs-addition">+ group = caddy</span><br>; The address on which to accept FastCGI requests.<br>; Valid syntaxes are:<br>;   &#x27;ip.add.re.ss:port&#x27;    - to listen on a TCP socket to a specific IPv4 address on<br>;                            a specific port;<br>;   &#x27;[ip:6:addr:ess]:port&#x27; - to listen on a TCP socket to a specific IPv6 address on<br><span class="hljs-comment">---</span><br><span class="hljs-comment">---</span><br>; Note: This value is mandatory.<br>listen = /run/php-fpm/php-fpm.sock<br>; and group can be specified either by name or by their numeric IDs.<br>; Default Values: user and group are set as the running user<br>;                 mode is set to 0660<br><span class="hljs-deletion">- listen.owner = http</span><br><span class="hljs-addition">+ listen.owner = caddy</span><br><span class="hljs-deletion">- listen.group = http</span><br><span class="hljs-addition">+ listen.group = caddy</span><br>;listen.mode = 0660<br>; When POSIX Access Control Lists are supported you can set them using<br>; these options, value is a comma separated list of user/group names.<br>; When set, listen.owner and listen.group are ignored<br>;listen.acl_users =<br>;listen.acl_groups =<br><span class="hljs-comment">---</span><br></code></pre></td></tr></table></figure><p><strong>2022年1月14日更新</strong>：在 Fedora 尝试部署的时候遇到了新的坑，Fedora 的相应配置文件为 <code>/etc/php-fpm.d/www.conf</code>，相应修改如下</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs diff">; Unix user/group of processes<br>; Note: The user is mandatory. If the group is not set, the default user&#x27;s group<br>;       will be used.<br>; RPM: apache user chosen to provide access to the same directories as httpd<br><span class="hljs-deletion">-user = apache</span><br><span class="hljs-addition">+user = caddy</span><br>; RPM: Keep a group allowed to write in log dir.<br><span class="hljs-deletion">-user = apache</span><br><span class="hljs-addition">+group = caddy</span><br><br>; The address on which to accept FastCGI requests.<br>; Valid syntaxes are:<br>;   &#x27;ip.add.re.ss:port&#x27;    - to listen on a TCP socket to a specific IPv4 address on<br>;             a specific port;<br><span class="hljs-comment">---</span><br><span class="hljs-comment">---</span><br>; Set permissions for unix socket, if one is used. In Linux, read/write<br>; permissions must be set in order to allow connections from a web server.<br>; Default Values: user and group are set as the running user<br>;                 mode is set to 0660<br><span class="hljs-deletion">-;listen.owner = nobody</span><br><span class="hljs-addition">+listen.owner = caddy</span><br><span class="hljs-deletion">-;listen.owner = nobody</span><br><span class="hljs-addition">+listen.group = caddy</span><br>;listen.mode = 0660<br><br>; When POSIX Access Control Lists are supported you can set them using<br>; these options, value is a comma separated list of user/group names.<br>; When set, listen.owner and listen.group are ignored<br><span class="hljs-deletion">-listen.acl_users = apache,nginx</span><br><span class="hljs-addition">+;listen.acl_users = apache,nginx</span><br>;listen.acl_groups =<br><br>; List of addresses (IPv4/IPv6) of FastCGI clients which are allowed to connect.<br>; Equivalent to the FCGI_WEB_SERVER_ADDRS environment variable in the original<br>; PHP FCGI (5.2.2+). Makes sense only with a tcp listening socket. Each address<br>; must be separated by a comma. If this value is left blank, connections will be<br>; accepted from any ip address.<br>; Default Value: any<br>listen.allowed_clients = 127.0.0.1<br></code></pre></td></tr></table></figure><h2 id="拉取-PicUploader-最新代码"><a href="#拉取-PicUploader-最新代码" class="headerlink" title="拉取 PicUploader 最新代码"></a>拉取 PicUploader 最新代码</h2><p>首先创建一个用于存放代码的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /var/www/<br></code></pre></td></tr></table></figure><p>clone 最新源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo git <span class="hljs-built_in">clone</span> https://github.com/xiebruce/PicUploader.git /var/www/picuploader<br></code></pre></td></tr></table></figure><p>将代码所有权转交给caddy用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> -R caddy:caddy /var/www/picuploader<br></code></pre></td></tr></table></figure><h2 id="编辑Caddyfile"><a href="#编辑Caddyfile" class="headerlink" title="编辑Caddyfile"></a>编辑Caddyfile</h2><p>caddy默认使用<code>/etc/caddy/Caddyfile</code>，因此如果你就部署这一个站点，直接修改这个就好了。</p><p>caddy的语法非常简洁易懂，因此我随手写了几行就能跑起来了。</p><p>下面是我用的Caddyfile，如果你在服务器上部署，请把<code>http://api.picuploader.com</code>更换为你服务器所需要绑定的域名(不带http协议头)，caddy将自动为你申请ssl证书。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>api.picuploader.com &#123;<br>        root * <span class="hljs-regexp">/var/</span>www/picuploader<br><br>        php_fastcgi * unix<span class="hljs-regexp">//</span>run<span class="hljs-regexp">/php-fpm/</span>php-fpm.sock &#123;<br>                index dashboard.php<br>        &#125;<br><br>        file_server &#123;<br>                index index.php<br>        &#125;<br><br>        handle_errors &#123;<br>        root * <span class="hljs-regexp">/etc/</span>caddy/error<br>                rewrite * /error.html<br>                templates<br>                file_server<br>        &#125;<br>&#125;<br><br><span class="hljs-comment"># Import additional caddy config files in /etc/caddy/conf.d/</span><br>import <span class="hljs-regexp">/etc/</span>caddy<span class="hljs-regexp">/conf.d/</span>*<br></code></pre></td></tr></table></figure><p>php我选择了监听本地<code>unix//run/php-fpm/php-fpm.sock</code>的方案，这个路径在上文的<code>/etc/php/php-fpm.d/www.conf</code>可以设置，如需查询，直接使用 <code>grep listen\ = /etc/php/php-fpm.d/www.conf</code>应该就能看见。</p><h3 id="设置访问密码（可选）"><a href="#设置访问密码（可选）" class="headerlink" title="设置访问密码（可选）"></a>设置访问密码（可选）</h3><p>caddy2开始不允许在caddyfile中直接指定明文密码，因此我们需要用<code>hash-password</code>获取加密后的密码密文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">caddy hash-password  --plaintext &lt;YourPassword&gt;<br></code></pre></td></tr></table></figure><p>再在Caddyfile中，加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">basicauth /* &#123;<br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">hashed_password</span>&gt;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改hosts-设置DNS解析"><a href="#修改hosts-设置DNS解析" class="headerlink" title="修改hosts/设置DNS解析"></a>修改hosts/设置DNS解析</h2><p>由于 api.picuploader.com 这个域名不在我手里，而我只是想在本地使用，并不打算部署到服务器，因此修改hosts将这个域名解析到本地是个不错的选择。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sh -c <span class="hljs-string">&quot;echo &#x27;127.0.0.1api.picuploader.com&#x27;  /etc/hosts&quot;</span><br></code></pre></td></tr></table></figure><p>而你若是在服务器上部署，应当去设置DNS解析，这个应该不需要我多说。</p><h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><p>在Archlinux下，我习惯直接用systemd运行<code>caddy</code>和<code>php-fpm</code>以开机自启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> --now caddy php-fpm<br></code></pre></td></tr></table></figure><h2 id="最终测试"><a href="#最终测试" class="headerlink" title="最终测试"></a>最终测试</h2><p>在浏览器内访问 <a href="http://api.picuploader.com/">api.picuploader.com</a> ，如果能看到页面，就算是成功啦。</p><h2 id="设置上传参数"><a href="#设置上传参数" class="headerlink" title="设置上传参数"></a>设置上传参数</h2><p>见作者博客：<a href="https://www.xiebruce.top/117.html">PicUploader: 各图床获取上传图片参数的方法</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="Caddy" scheme="https://zhul.in/tags/Caddy/"/>
    
    <category term="PicUploader" scheme="https://zhul.in/tags/PicUploader/"/>
    
  </entry>
  
  <entry>
    <title>Archlinux坚果云踩坑实录</title>
    <link href="https://zhul.in/2021/10/02/nutstore-guide-on-archlinux-kde/"/>
    <id>https://zhul.in/2021/10/02/nutstore-guide-on-archlinux-kde/</id>
    <published>2021-10-01T16:21:34.000Z</published>
    <updated>2022-12-10T08:12:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Archlinux上，坚果云似乎出现了一些问题。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S nutstore<br></code></pre></td></tr></table></figure><p>这个没什么可说的，AUR还是Archlinuxcn都无所谓，都是一模一样的。</p><h2 id="白屏"><a href="#白屏" class="headerlink" title="白屏"></a>白屏</h2><p>双击图标，咦？怎么白屏了？</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cc797bc09.webp" alt="白屏"></p><p>看看AUR评论区，有人说<code>nutstore-experimental</code>修了？</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cc7df08ad.webp" alt="AUR评论区"></p><p>对比了一下，就是改了改<code>/opt/nutstore/conf/nutstore.properties</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sed -i <span class="hljs-string">&#x27;s|webui.enable=true|webui.enable=false|&#x27;</span> /opt/nutstore/conf/nutstore.properties<br></code></pre></td></tr></table></figure><p>轻松解决</p><h2 id="窗口太小不能登陆"><a href="#窗口太小不能登陆" class="headerlink" title="窗口太小不能登陆"></a>窗口太小不能登陆</h2><p><img src="https://bu.dusays.com/2022/08/10/62f3cc822fbe9.webp" alt="调出窗口规则设置界面"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cc864a783.webp" alt="进行设置"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cc89ca4eb.webp" alt="完成"></p><h2 id="桌面使用了暗色主题导致部分字体不清晰？"><a href="#桌面使用了暗色主题导致部分字体不清晰？" class="headerlink" title="桌面使用了暗色主题导致部分字体不清晰？"></a>桌面使用了暗色主题导致部分字体不清晰？</h2><p><img src="https://bu.dusays.com/2022/08/10/62f3cc8f193b1.webp" alt="这字体鬼看得见？"></p><p>参考<a href="/2021/09/05/wrong-fonts-color-fix-under-kde-with-a-dark-theme/">使用fakehome方案暂时解决跑在KDE暗色主题下的程序使用亮色字体的问题</a>编写启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bwrap --dev-bind / / --tmpfs <span class="hljs-variable">$HOME</span>/.config /usr/bin/nutstore<br></code></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/08/10/62f3cc9245d26.webp" alt="测试通过"></p><h2 id="本地markdown文件的文件类型被识别成了「坚果云-Markdown」"><a href="#本地markdown文件的文件类型被识别成了「坚果云-Markdown」" class="headerlink" title="本地markdown文件的文件类型被识别成了「坚果云 Markdown」"></a>本地markdown文件的文件类型被识别成了「坚果云 Markdown」</h2><p>这个是由于坚果云自作主张推广他自己并不好用的lightapp，写了几条 mime 的规则，如图</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cc95f0dd1.webp" alt="没错，整整5个xml"></p><p>看来在我们的启动命令中也需要防止坚果云接触到<code>$HOME/.local/share/</code>这个路径，所以现在的启动命令得写成这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bwrap --dev-bind / / --tmpfs <span class="hljs-variable">$HOME</span>/.config --tmpfs <span class="hljs-variable">$HOME</span>/.local/share/ /usr/bin/nutstore<br></code></pre></td></tr></table></figure><h2 id="修改desktop文件，使其使用我们自己攥写的启动命令"><a href="#修改desktop文件，使其使用我们自己攥写的启动命令" class="headerlink" title="修改desktop文件，使其使用我们自己攥写的启动命令"></a>修改desktop文件，使其使用我们自己攥写的启动命令</h2><p>首先，复制一份desktop文件到我们的 $HOME 目录下，好处是下次更新的时候我们所做的更改不会被包管理器覆盖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /usr/share/applications/nutstore.desktop <span class="hljs-variable">$HOME</span>/.local/share/applications/<br></code></pre></td></tr></table></figure><p>再修改<code>$HOME/.local/share/applications/nutstore.desktop</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs diff">[Desktop Entry]<br>Encoding=UTF-8<br>Type=Application<br>Terminal=false<br>Icon=nutstore<br><span class="hljs-deletion">-Exec=/usr/bin/nutstore</span><br><span class="hljs-addition">+Exec=bwrap --dev-bind / / --tmpfs $HOME/.config --tmpfs $HOME/.local/share/applications --tmpfs $HOME/.local/share/mime /usr/bin/nutstore</span><br>StartupWMClass=Nutstore<br>Name=Nutstore<br>Name[zh_CN]=坚果云 <br>Comment=Data Sync, Sharing, Backup<br>Comment[zh_CN]=数据同步,共享和备份<br>Categories=Network;Application;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>把老版的火狐顶栏UI带回来</title>
    <link href="https://zhul.in/2021/10/01/bring-firefox-old-topbar-back/"/>
    <id>https://zhul.in/2021/10/01/bring-firefox-old-topbar-back/</id>
    <published>2021-10-01T11:20:23.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://bu.dusays.com/2022/08/10/62f3cca6bb523.webp" alt="这是最新版火狐的顶栏"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccaa2b91c.webp" alt="这是去掉标题栏后的样子"></p><blockquote><p>在Firefox更新UI以后，我就一直感觉不太适应。顶栏的一个个标签页占用的体积达到了原来的1.5~2倍。Thanks to <a href="https://github.com/black7375/Firefox-UI-Fix">black7375/Firefox-UI-Fix</a> ，我们得以把以前的顶栏找回来。</p></blockquote><h3 id="加载新的css"><a href="#加载新的css" class="headerlink" title="加载新的css"></a>加载新的css</h3><p>clone该github项目并进入对应路径后，执行<code>install.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/black7375/Firefox-UI-Fix.git<br><span class="hljs-built_in">cd</span> Firefox-UI-Fix.git<br>./install.sh<br></code></pre></td></tr></table></figure><p>在接下来的对话中，我们选择<code>Photon-Style</code>，这是最接近老版UI的。</p><p>紧接着脚本会要求我们选择我们的Firefox数据文件夹，我们可以打开Firefox，在浏览器地址栏输入<code>about:support</code>查看到我们所使用的数据文件夹路径。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccadd6ce8.webp" alt="about:support"></p><p>使用空格键选择我们的数据文件夹后，在终端上该路径开头处的<code>[ ]</code>中会被打上<code>X</code>，确认无误后，敲回车。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccb1b0ebf.webp" alt="终端显示"></p><p>重启浏览器，顶栏就长成了这样。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccb49ff10.webp" alt="Fix后的顶栏效果"></p><h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><p>为了进一步模仿Firefox经典的配色，我们可以安装上<a href="https://addons.mozilla.org/zh-CN/firefox/addon/photon-colors/">这个主题</a>，变成这样</p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccb7bc14f.webp" alt="应用主题后的样子"></p><h3 id="禁用暗色模式"><a href="#禁用暗色模式" class="headerlink" title="禁用暗色模式"></a>禁用暗色模式</h3><p>如果你的系统主题使用的是深色，导致了诸如<a href="https://mirrors.tuna.tsinghua.edu.cn/">TUNA镜像站</a>自动为你启用了暗色模式，而你想禁用的话，<a href="/2021/04/23/disable-firefox-nightmode-when-your-system-is-using-that/">之前通过修改<code>about:config</code>方案</a>依然适用。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccbb36c5e.webp" alt="修改前"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3ccbe6f31a.webp" alt="修改后"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Firefox" scheme="https://zhul.in/tags/Firefox/"/>
    
    <category term="Bwrap" scheme="https://zhul.in/tags/Bwrap/"/>
    
  </entry>
  
  <entry>
    <title>记录一次原创文章被抄袭</title>
    <link href="https://zhul.in/2021/09/21/csdn-copied-my-article/"/>
    <id>https://zhul.in/2021/09/21/csdn-copied-my-article/</id>
    <published>2021-09-20T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在网站自搜的时候偶然间发现了一个叫「程序员宝宝」的站点转载了我去年在知乎专栏上发的一篇文章<a href="https://zhuanlan.zhihu.com/p/141107518">《Ubuntu下对deepin-wine的使用详解》</a>。</p><p>转载的质量并不高，超链接都没有转载上去，只有干巴巴的图片和文字。翻到结尾处，我一口老血喷出。</p><p> <img src="https://bu.dusays.com/2022/08/10/62f3cacc1ff3f.webp" alt="都不知道哪里来的版权申明"></p><p>我就纳闷了，我作为原创博主，自己都没有给这篇文章挂上CC的版权协议，怎么就有人自称是原创给我挂上了CC协议，要知道我知乎还明确勾选了「转载需要申请」呢。</p><p>抱着吃瓜的心态在谷歌上搜索，我发现了五篇抄袭我的文章。CSDN三篇，还有「程序员宝宝」和「程序员宅基地」使用相同UI的、被我怀疑是机器人搬运的站点。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cad01576d.webp" alt="谷歌搜索结果"></p><p>CSDN那边，我在页面页脚处找到了「在线客服」，注册帐号后联系了客服，客服反应非常迅速，<strong>5分钟内就对抄袭文章进行了下架处理，这点值得表扬。</strong></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cad3ceaa6.webp" alt="CSDN客服聊天记录1"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cad833827.webp" alt="CSDN客服聊天记录2"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cadacac4d.webp" alt="CSDN客服聊天记录3"></p><p>至于「程序员宝宝」和「程序员宅基地」这两个站点，在他们的版权申明中写得很清楚。</p><blockquote><p><strong>如果你是文章作者：</strong></p><p>请通过邮件联系我们，邮件内容包括：</p><ol><li>待删除的文章链接</li><li>发件人是待删除文章作者的证明（如果发件人邮箱地址能证明你是文章作者，此项内容可以为空）</li></ol><p>我们会在收到邮件后7个工作日内进行处理。</p></blockquote><p>但我找遍了整个网站，<strong>根本没有发现站点方的邮箱。</strong></p><p>不知诸位有何解决方案？</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用AUR(Helper)安装软件时究竟发生了什么？对于常见的构建错误如何解决？</title>
    <link href="https://zhul.in/2021/09/11/detailed-explanation-for-aur/"/>
    <id>https://zhul.in/2021/09/11/detailed-explanation-for-aur/</id>
    <published>2021-09-11T11:22:29.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>虽然对于没有能力手动修改/编写PKGBUILD的Arch用户其实是不应该使用AUR中的包的，这些软件的PKGBUILD可以由个人随意发布，并不能保证安全性，但是作为Archlinux的特色，但随着AUR Helper的趋于便利，还是吸引了不少小白使用AUR。本文将主要讲一讲 AUR Helper 帮助我们安装软件时到底做了些什么事情，并提供一些使用AUR Helper构建时常见错误的解决方案。</p></blockquote><h2 id="PartⅠ基本原理"><a href="#PartⅠ基本原理" class="headerlink" title="PartⅠ基本原理"></a>PartⅠ基本原理</h2><h3 id="makepkg是如何工作的？"><a href="#makepkg是如何工作的？" class="headerlink" title="makepkg是如何工作的？"></a><code>makepkg</code>是如何工作的？</h3><p>以钉钉举例，我们可以从AUR上使用 <code>git clone https://aur.archlinux.org/dingtalk-bin.git</code> 获取到由这个包的维护者为我们提前写好的构建脚本。他的目录大概是长成下面这个样子:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dingtalk-bin<br>├── com<span class="hljs-selector-class">.alibabainc</span><span class="hljs-selector-class">.dingtalk</span><span class="hljs-selector-class">.desktop</span><br>├── dingtalk<span class="hljs-selector-class">.sh</span><br>├── <span class="hljs-selector-class">.git</span><br>├── <span class="hljs-selector-class">.gitignore</span><br>├── PKGBUILD<br>├── service-terms-zh<br>└── .SRCINFO<br></code></pre></td></tr></table></figure><ul><li>其中，<code>.git</code>是git的工作目录，可以忽视。</li><li><code>.gitignore</code>属于git的配置文件之一，我们也不用管。</li><li><code>PKGBUILD</code>是这个目录下最重要的东西，是一个用于提供参数的脚本。makepkg通过执行PKGBUILD脚本来获取到参数，自动进行下载和构建过程。</li><li><code>service-terms-zh</code>, <code>com.alibabainc.dingtalk.desktop</code>, <code>dingtalk.sh</code>是包里所需要用到的东西。</li></ul><hr><p>当我们cd到这个目录下执行makepkg时，</p><p>makepkg会调用<code>curl</code> / <code>git</code>下载PKGBUILD中<code>source=()</code>部分中以<code>http(s)</code>协议头或者<code>git+</code>开头的链接，这些东西将会被下载到这个目录的<code>src</code>文件夹下。</p><p>对于curl下载的东西，makepkg会使用校验码核对下载到的文件是否完整、是否是当初这个包的维护者下载到的这一个。</p><p>校验通过后，makepkg会依次执行<code>prepare()&#123;&#125;</code>、<code>build()&#123;&#125;</code>、<code>package()&#123;&#125;</code>函数中的命令陆续完成<em>准备、编译</em>过程，并将最终要打进包里的文件放置到<code>pkg</code>文件夹下。</p><p>最后，makepkg将会将<code>pkg</code>文件夹的内容压缩成包。</p><h3 id="AUR-Helper-干了些什么"><a href="#AUR-Helper-干了些什么" class="headerlink" title="AUR Helper 干了些什么"></a>AUR Helper 干了些什么</h3><p>我们还是以钉钉为例，看看我们执行<code>yay dingtalk-bin</code>时到底发生了什么。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cdb03ec8c.jpg" alt="当你使用yay安装软件到底发生了什么"></p><h2 id="PartⅡ常见错误解决方案"><a href="#PartⅡ常见错误解决方案" class="headerlink" title="PartⅡ常见错误解决方案"></a>PartⅡ常见错误解决方案</h2><p>如果有其他情况觉得可以完善的，欢迎在评论区留言。</p><h3 id="1-base-devel-没有安装"><a href="#1-base-devel-没有安装" class="headerlink" title="1. base-devel 没有安装"></a>1. base-devel 没有安装</h3><p>正如上面所说的，没有安装<code>base-devel</code>组，赶紧补上! </p><p>由于<code>base-devel</code>并不是一个具体的包，而是由多个包构成的包组，其实并没有很好的方法来检测你是否已经安装。</p><p>所以如果你不确定，你也可以执行下面的命令来确保自己已经安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S base-devel --noconfirm --needed<br></code></pre></td></tr></table></figure><hr><p>常见表现: </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR: </span>Cannot find the strip binary required for object file stripping.<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">PKGBUILD: <span class="hljs-built_in">line</span> XXX XXX: <span class="hljs-keyword">command</span> <span class="hljs-title">not</span> <span class="hljs-title">found</span><br></code></pre></td></tr></table></figure><h3 id="2-source源文件下载失败"><a href="#2-source源文件下载失败" class="headerlink" title="2. source源文件下载失败"></a>2. source源文件下载失败</h3><ol><li><h4 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h4><p>国内的网络问题不用多说了，大多数情况下都是Github连接不上。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cc9c9dda8.webp" alt="yay下载失败"></p><p>最简单的解决方案就是把source里下载失败的东西通过特殊手段（比如你浏览器设置下代理，或者找找fastgit这种反代）下载下来以后直接扔到PKGBUILD所在的路径，然后手动执行<code>makepkg -si</code>。</p><blockquote><p>-s代表自动下载makedepend，-i表示构建成功以后自动安装</p><p>yay存放PKGBUILD的默认路径是在<code>$HOME/.cache/yay/$pkgname</code>下面，具体可以参考我的另一篇关于<a href="https://blog.zhullyb.top/2021/04/04/yay-more/#builddir-lt-dir-gt">yay的用法详解</a>的博客。</p></blockquote><p><strong>我在这里再讲一种使用 <a href="http://fastgit.org/"><em>fastgit</em></a> 作为反代加速github下载的方法。</strong><del>如果觉得fastgit帮助到了你，你可以考虑<a href="http://fastgit.org/donate.html">给fastgit项目打钱</a>。</del></p><p>当你的yay出现这个询问菜单时，（也就是出现<code>Diffs to show</code>/<code>显示哪些差异？</code>字样时）</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cca0c7aba.webp"></p><p>我们再开一个终端，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&quot;s|github.com|hub.fastgit.org|g&quot;</span> <span class="hljs-variable">$HOME</span>/.cache/yay/*/PKGBUILD<br></code></pre></td></tr></table></figure><p>接着就下一步安装即可。</p></li><li><h4 id="链接失效"><a href="#链接失效" class="headerlink" title="链接失效"></a>链接失效</h4><p>这种情况多见于维护者维护不到位，上游放出了新版本包并删除老版本包以后维护者没有及时跟进的。你可以去逛一逛AUR的评论区查看解决方案，或者去查找上游的最新版本是多少，尝试更改PKGBUILD中的pkgver参数和checksum以后尝试makepkg。</p></li><li><h4 id="需要手动下载"><a href="#需要手动下载" class="headerlink" title="需要手动下载"></a>需要手动下载</h4><p>一般情况下是上游没有提供直链，makepkg无法自行下载，需要人工介入。解决方法同上面的<a href="#%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98">网络问题</a></p></li></ol><h3 id="3-checksum-错误"><a href="#3-checksum-错误" class="headerlink" title="3. checksum 错误"></a>3. checksum 错误</h3><p>上文已经提到过，checksum用于判断你所下载到的软件和维护者当初下载到的是否一致。但是有些情况下，确实是维护者忘了更新checksum值了，因此我们需要做一个判断。</p><p>打开<code>.SCRINFO</code>，找到checksum报错的那个文件的链接。</p><p>使用wget/curl等工具将他下载下来，可以通过<code>md5sum+文件名</code>的方式获取他们的md5值。连续下载两次，核对两次的检验值是否一致。</p><p>如果结果一致，那么说明并不是网络波动导致的检验值不符，而是维护者没有及时跟进导致的，你可以使用<code>yay -S $pkgname --skipchecksums</code>的方式跳过验证校验值的过程，或者你可以修改PKGBUILD中的校验值为<code>&quot;SKIP&quot;</code>来跳过某一文件的校验后手动<code>makepkg</code>。</p><h3 id="4-tuna反代受限"><a href="#4-tuna反代受限" class="headerlink" title="4. tuna反代受限"></a>4. tuna反代受限</h3><p>tuna的服务器只有一个ip，但当使用他提供的AUR的反代服务时，全国的使用者都会被AUR认为是tuna这一个ip，过大的请求数量可能导致tuna的服务器超出AUR每天给每个ip限制的请求次数。</p><hr><p>具体表现: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Rate <span class="hljs-built_in">limit</span> reached<br></code></pre></td></tr></table></figure><p>解决方案，改回AUR的服务器，使用自己的ip进行请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay --aururl <span class="hljs-string">&quot;https://aur.archlinux.org&quot;</span> --save<br></code></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>关于AUR使用的更多细节可以阅读 <a href="https://blog.zhullyb.top/2021/04/04/yay-more/">《yay进阶》</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>使用fakehome方案暂时解决跑在KDE暗色主题下的程序使用亮色字体的问题</title>
    <link href="https://zhul.in/2021/09/05/wrong-fonts-color-fix-under-kde-with-a-dark-theme/"/>
    <id>https://zhul.in/2021/09/05/wrong-fonts-color-fix-under-kde-with-a-dark-theme/</id>
    <published>2021-09-04T16:00:00.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>9月6日更新：AUR的<code>wemeet-bin</code>维护者sukanka已经将咱的运行指令直接打进了包内，故本文已经基本失去原本的应用意义，但仍可以作为一个案例来解决类似问题。</strong></p><blockquote><p>在使用腾讯最近推出的Linux原生腾讯会议的时候，咱遇到了个十分影响体验的问题。</p><p>我在使用KDE的暗色主题，腾讯回忆自作主张将字体颜色调成了白色。然而，字体背景是白色的没，因此导致对比度下降，字体难以辨认。效果大概是这个鬼样子:</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cb059b229.webp"></p></blockquote><p>然而我一时半会儿却找不到合适的变量在运行腾讯会议之前unset，无法指定它使用一个正确的字体颜色。</p><p>此时，我想到了fakehome的解决方案——bwrap。</p><p>关于bwrap，依云在ta的<a href="https://blog.lilydjwg.me/2021/8/12/using-bwrap.215869.html">博客</a>里讲过运行原理，我在这里直接摘一小段过来</p><blockquote><p>bwrap 的原理是，把 / 放到一个 tmpfs 上，然后需要允许访问的目录通过 bind mount 弄进来。所以没弄进来的部分就是不存在，写数据的话就存在内存里，用完就扔掉了。</p></blockquote><p>而我们要做的，就是开一个tmpfs作为<code>$HOME/.config</code>，让腾讯会议读取不到KDE的主题配置文件。</p><p>使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bwrap --dev-bind / / --tmpfs <span class="hljs-variable">$HOME</span>/.config wemeet<br></code></pre></td></tr></table></figure><p>软件启动确认没有问题后，我们可以更改腾讯会议desktop中的启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-variable">$EDITOR</span> /usr/share/applications/wemeetapp.desktop<br></code></pre></td></tr></table></figure><p>将<code>Exec=</code>后面的命令改成我们刚刚启动所使用的命令即可。</p><blockquote><p>关键词: bwrap, linux, 暗色模式, 深色模式, 夜间模式, 白色字体, 亮色字体</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="Bwrap" scheme="https://zhul.in/tags/Bwrap/"/>
    
  </entry>
  
  <entry>
    <title>来，从AUR给Fedora偷个包</title>
    <link href="https://zhul.in/2021/07/23/build-a-rpm-package-from-aur-with-archlinux/"/>
    <id>https://zhul.in/2021/07/23/build-a-rpm-package-from-aur-with-archlinux/</id>
    <published>2021-07-22T17:50:09.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前一阵子，某Q群里的某初中生居然跳上了Fedora这辆灵车，还一直缠着我要我给他整个打rpm包的教程，说什么要复兴FedoraCN之类的我听不懂的话。碰巧听说Fedora似乎还没有wechat-uos，于是我就寻思着给Fedora打一个，顺便熟悉一下dnf的操作。</p><p>事实上，Fedora和Archlinux的目录结构很相似，理论上来讲Archlinux的大部分包都可以直接解压后塞到Fedora里直接用，对于咱这种日常偷Deb包的Arch用户来说基本没什么难度，唯一的难点在于处理依赖关系。</p></blockquote><p><strong>Tips1: 使用电脑端的访客可以在页面左下角打开侧栏以获取目录。</strong></p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p>如果你是为了wechat-uos这个包而非教程而来的，下载链接在这里。<a href="https://zhullyb.lanzoui.com/ikN55rqr7ah">https://zhullyb.lanzoui.com/ikN55rqr7ah</a></p><h3 id="偷包环境"><a href="#偷包环境" class="headerlink" title="偷包环境"></a>偷包环境</h3><ul><li><p>Archlinux实体机(打包)</p></li><li><p>Fedora虚拟机(依赖查询、测试)</p></li></ul><h3 id="准备好wechat-uos"><a href="#准备好wechat-uos" class="headerlink" title="准备好wechat-uos"></a>准备好wechat-uos</h3><p>首先，咱们先在Archlinux上把我们的<code>wechat-uos</code>先打包好，这个老生常谈的问题我不多赘述了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S wechat-uos --noconfirm<br></code></pre></td></tr></table></figure><h3 id="查找wechat-uos在Archlinux上所需的依赖"><a href="#查找wechat-uos在Archlinux上所需的依赖" class="headerlink" title="查找wechat-uos在Archlinux上所需的依赖"></a>查找wechat-uos在Archlinux上所需的依赖</h3><p>再去查看<code>wechat-uos</code>所需要的依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">zhullyb@Archlinux</span> <span class="hljs-string">~</span>]<span class="hljs-string">$</span> <span class="hljs-string">yay</span> <span class="hljs-string">-Si</span> <span class="hljs-string">wechat-uos</span><br><span class="hljs-string">::</span> <span class="hljs-string">Querying</span> <span class="hljs-string">AUR...</span><br><span class="hljs-attr">Repository      :</span> <span class="hljs-string">aur</span><br><span class="hljs-attr">Name            :</span> <span class="hljs-string">wechat-uos</span><br><span class="hljs-attr">Keywords        :</span> <span class="hljs-string">electron</span>  <span class="hljs-string">patched</span>  <span class="hljs-string">uos</span>  <span class="hljs-string">wechat</span>  <span class="hljs-string">weixin</span><br><span class="hljs-attr">Version         :</span> <span class="hljs-number">2</span><span class="hljs-string">:2.0.0-1145141919</span><br><span class="hljs-attr">Description     :</span> <span class="hljs-string">UOS专业版微信</span> <span class="hljs-string">(迫真魔改版)</span><br><span class="hljs-attr">URL             :</span> <span class="hljs-string">https://www.chinauos.com/resource/download-professional</span><br><span class="hljs-attr">AUR URL         :</span> <span class="hljs-string">https://aur.archlinux.org/packages/wechat-uos</span><br><span class="hljs-attr">Groups          :</span> <span class="hljs-string">None</span><br><span class="hljs-attr">Licenses        :</span> <span class="hljs-string">MIT</span><br><span class="hljs-attr">Provides        :</span> <span class="hljs-string">None</span><br><span class="hljs-attr">Depends On      :</span> <span class="hljs-string">gtk2</span>  <span class="hljs-string">gtk3</span>  <span class="hljs-string">libxss</span>  <span class="hljs-string">gconf</span>  <span class="hljs-string">nss</span>  <span class="hljs-string">lsb-release</span>  <span class="hljs-string">bubblewrap</span><br><span class="hljs-attr">Make Deps       :</span> <span class="hljs-string">imagemagick</span><br><span class="hljs-attr">Check Deps      :</span> <span class="hljs-string">None</span><br><span class="hljs-attr">Optional Deps   :</span> <span class="hljs-string">None</span><br><span class="hljs-attr">Conflicts With  :</span> <span class="hljs-string">None</span><br><span class="hljs-attr">Maintainer      :</span> <span class="hljs-string">DuckSoft</span><br><span class="hljs-attr">Votes           :</span> <span class="hljs-number">16</span><br><span class="hljs-attr">Popularity      :</span> <span class="hljs-number">0.603501</span><br><span class="hljs-attr">First Submitted :</span> <span class="hljs-string">Wed</span> <span class="hljs-number">30</span> <span class="hljs-string">Dec</span> <span class="hljs-number">2020 12:21:51 </span><span class="hljs-string">PM</span> <span class="hljs-string">CST</span><br><span class="hljs-attr">Last Modified   :</span> <span class="hljs-string">Sat</span> <span class="hljs-number">20</span> <span class="hljs-string">Feb</span> <span class="hljs-number">2021 06:53:24 </span><span class="hljs-string">AM</span> <span class="hljs-string">CST</span><br><span class="hljs-attr">Out-of-date     :</span> <span class="hljs-literal">No</span><br></code></pre></td></tr></table></figure><h3 id="查找Fedora上的对应依赖包名"><a href="#查找Fedora上的对应依赖包名" class="headerlink" title="查找Fedora上的对应依赖包名"></a>查找Fedora上的对应依赖包名</h3><p>然后我们需要去Fedora上找一找这些依赖在Fedora上的包名都叫什么。</p><p>比如这个<code>bubblewrap</code>，我们需要的是他提供的<code>bwrap</code>，所以我们直接在Fedora上<code>sudo dnf provides bwrap</code></p><p>再比如<code>gconf</code>并没有在<code>/usr/bin</code>路径下直接留下什么非常具有代表性的可执行文件，所以在Fedora里面寻找等效包就稍微复杂一些，但也并非不能找。</p><p>先在Archlinux下使用<code>pacman -Ql gconf</code>，输出结果有点长，我就截一小段上来。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">[zhullyb@Archlinux ~]$ pacman -Qlq gconf<br><span class="hljs-regexp">/etc/</span><br><span class="hljs-regexp">/etc/g</span>conf/<br><span class="hljs-regexp">/etc/g</span>conf<span class="hljs-regexp">/2/</span><br><span class="hljs-regexp">/etc/g</span>conf<span class="hljs-regexp">/2/</span>evoldap.conf<br><span class="hljs-regexp">/etc/g</span>conf<span class="hljs-regexp">/2/</span>path<br><span class="hljs-regexp">/etc/g</span>conf<span class="hljs-regexp">/gconf.xml.defaults/</span><br><span class="hljs-regexp">/etc/g</span>conf<span class="hljs-regexp">/gconf.xml.mandatory/</span><br><span class="hljs-regexp">/etc/g</span>conf<span class="hljs-regexp">/gconf.xml.system/</span><br><span class="hljs-regexp">/etc/</span>xdg/<br><span class="hljs-regexp">/etc/</span>xdg<span class="hljs-regexp">/autostart/</span><br><span class="hljs-regexp">/etc/</span>xdg<span class="hljs-regexp">/autostart/g</span>settings-data-convert.desktop<br><span class="hljs-regexp">/usr/</span><br><span class="hljs-regexp">/usr/</span>bin/<br><span class="hljs-regexp">/usr/</span>bin/gconf-merge-schema<br><span class="hljs-regexp">/usr/</span>bin/gconf-merge-tree<br><span class="hljs-regexp">/usr/</span>bin/gconfpkg<br><span class="hljs-regexp">/usr/</span>bin/gconftool-<span class="hljs-number">2</span><br>......<br></code></pre></td></tr></table></figure><p>可以发现，<code>gconf</code>还是有不少文件是非常具有代表性的，比如这里的<code>/usr/bin/gconf-merge-tree</code>，我们在Fedora上使用<code>sudo dnf provides gconf-merge-tree</code>很容易就能找到对应的包是<code>GConf2</code>。</p><p><code>lsb-release</code>这个依赖中，我们只是需要<code>/etc/lsb-release</code>这个文件存在让我们的bwrap可以顺利地伪装成uos的样子。Fedora中虽然有<code>redhat-lsb-core</code>这个包算是<code>lsb-release</code>的等效包，但是并不提供这个文件，因此我们只需要在待会儿打包的时候带一个<code>/etc/lsb-release</code>的空文件即可，不需要将<code>redhat-lsb-core</code>写进依赖。</p><p>最终我们可以确定下来需要的依赖为<code>gtk2,gtk3,libXScrnSaver,nss,bubblewrap,GConf2</code>。</p><h3 id="准备打包"><a href="#准备打包" class="headerlink" title="准备打包"></a>准备打包</h3><h4 id="安装rpm-tools"><a href="#安装rpm-tools" class="headerlink" title="安装rpm-tools"></a>安装<code>rpm-tools</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S rpm-tools<br></code></pre></td></tr></table></figure><h4 id="生成工作路径"><a href="#生成工作路径" class="headerlink" title="生成工作路径"></a>生成工作路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -pv <span class="hljs-variable">$HOME</span>/rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125;<br></code></pre></td></tr></table></figure><h4 id="编写-spec-文件"><a href="#编写-spec-文件" class="headerlink" title="编写 spec 文件"></a>编写 spec 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">Name: wechat-uos<br>Version: 2.0.0<br>Release: 1<br>Summary: A wechat client based on electron.<br>License: None<br>URL: https://www.chinauos.com/resource/download-professional<br>Packager: zhullyb<br><br>Requires: gtk2,gtk3,libXScrnSaver,nss,bubblewrap,GConf2<br><br>AutoReqProv: no<br><br>%description<br><br>%prep<br><br>%pre<br><br>%post<br><br>%preun<br><br>%postun<br><br>%files<br>/etc/lsb-release<br>/opt/wechat-uos/<br>/usr/bin/wechat-uos<br>/usr/lib/license/libuosdevicea.so<br>/usr/share/applications/wechat-uos.desktop<br>/usr/share/icons/hicolor/128x128/apps/wechat.png<br>/usr/share/icons/hicolor/16x16/apps/wechat.png<br>/usr/share/icons/hicolor/256x256/apps/wechat.png<br>/usr/share/icons/hicolor/48x48/apps/wechat.png<br>/usr/share/icons/hicolor/64x64/apps/wechat.png<br></code></pre></td></tr></table></figure><h4 id="处理source"><a href="#处理source" class="headerlink" title="处理source"></a>处理source</h4><blockquote><p>一般来说，我们需要配置各种奇奇怪怪的编译命令，但是我这里直接选择了打包二进制文件，一来是减少了对于spec的学习成本，二来是因为wechat-uos本来就不开源，也没什么好编译的。</p></blockquote><p>创建我们<code>wechat-uos</code>的二进制文件所需要放入的文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$HOME</span>/rpmbuild/BUILDROOT/wechat-uos-2.0.0-1.x86_64<br></code></pre></td></tr></table></figure><p>将我们的wechat-uos直接放入对应的文件夹中</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cadde8d65.webp" alt="解压原先打包好的wechat-uos"></p><p>补上我们的<code>/etc/lsb-release</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/rpmbuild/</span>BUILDROOT<span class="hljs-regexp">/wechat-uos-2.0.0-1.x86_64/</span>etc/<br>touch <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/rpmbuild/</span>BUILDROOT<span class="hljs-regexp">/wechat-uos-2.0.0-1.x86_64/</span>etc/lsb-release<br></code></pre></td></tr></table></figure><h3 id="正式打包"><a href="#正式打包" class="headerlink" title="正式打包"></a>正式打包</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">rpmbuild -bb <span class="hljs-attr">--target</span>=x86_64 SPECS/wechat-uos<span class="hljs-selector-class">.spec</span> <span class="hljs-attr">--nodeps</span><br></code></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/08/10/62f3cae15fdcf.webp" alt="打包成功"></p><h3 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf install ./wechat-uos-2.0.0-1.x86_64.rpm<br></code></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/08/10/62f3cae5aa4b0.webp" alt="测试通过"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>rpm的打包工具是我近期<strong>最</strong>想吐槽的东西了，主要槽点有两个。</p><p>其一是：rpm在打包时的默认状态下，会使用 <code>file</code> 命令判断文件，如果是二进制的，用ldd判断依赖；如果是脚本，过滤文件中对应的 <code>use</code>/<code>requires</code>/<code>import</code> 语句，以此来找出内部依赖。<strong>这固然是个非常贴心的小善举，</strong>能够确保软件正常运行，<strong>但完全有可能造成比较奇怪的问题。</strong>比如我本次打包中rpm<strong>自作聪明</strong>地给我添加了一个<code>libffmpeg.so</code>的依赖，这东西整个Fedora自带的四个源里都不存在，在安装测试的时候出现了找不到依赖的情况。想我这种添加了找不到依赖的情况还算是运气好的，之前听说有人在使用opensuse的某个私人源的时候发现安装网易云音乐居然吧wps-office都给依赖上了，我想就是rpm自动检测到了网易云需要某个库，而wps恰好自带了这个库而导致的依赖误报。在Archlinux中，我们有一个叫<code>namcap</code>的小工具能够使用类似的方法检测软件运行时可能所需要的内部依赖，但他并不会默认启用，更不会自说自话的就直接把他添加为依赖，连一声也不吭。</p><p>其二是：rpm检测新增包内文件是否与系统已安装的软件包内的文件因为使用相同路径而冲突时，不仅会核对是否有冲突的同路径同名文件，他<strong>还会核对文件夹</strong>的文件占用情况。这说起来可能会有些抽象，我举个例子。在Fedora中，<code>/usr/bin</code>路径是被<code>filesystem</code>这个包所占有的，所以其他包在打包时是不能直接使用<code>/usr/bin</code>、<code>/usr</code>、甚至<code>/</code>来限定包内文件的范围的（也就是上面spec文件中的%files区域）。而我在第一次打包时，想要直接打包<code>BUILDROOT</code>下的所有文件，于是%files就直接填写了<code>/</code>作为限定，安装时提示<code>/usr/bin</code>和<code>/usr/lib</code>被<code>filesystem</code>这个包所占用，文件冲突。为此我还特意去仔细对比了Fedora自带的<code>filesystem</code>和我这个<code>wechat-uos</code>是否有冲突的文件，实则证明并没有，只是单纯这个<strong>检测机制过于死板</strong>罢了。而在Archlinux中，pacman安装时只会检测包内的文件是否与系统内的现有文件路径产生冲突，而不会非常无意义的去限定哪个文件夹是属于哪个包的。</p><h3 id="附上本文的参考资料"><a href="#附上本文的参考资料" class="headerlink" title="附上本文的参考资料"></a><strong>附上本文的参考资料</strong></h3><blockquote><p>为了避免源网页失效，我特意去<a href="http://web.archive.org/">互联网档案馆</a>做了备份</p></blockquote><p>「<a href="https://blog.csdn.net/get_set/article/details/53453320">RPM打包原理、示例、详解及备查</a>」                             「<a href="http://web.archive.org/web/20210722180835/https://blog.konghy.cn/2015/11/13/rpmbuild/">Archive</a>」</p><p>「<a href="https://blog.konghy.cn/2015/11/13/rpmbuild/">在 Ubuntu 下直接将二进制文件制作成 rpm 包</a>」        「<a href="http://web.archive.org/web/20210722180859/http://blog.sina.cn/dpool/blog/s/blog_6a5aee670101r1si.html">Archive</a>」</p><p>「<a href="http://blog.sina.cn/dpool/blog/s/blog_6a5aee670101r1si.html">解除RPM包的依赖的方法</a>」                                            「<a href="http://web.archive.org/web/20210722180936/https://blog.csdn.net/get_set/article/details/53453320">Archive</a>」</p><p><em>本文同时发布于「<a href="https://zhuanlan.zhihu.com/p/392650904">知乎专栏</a>」，如果你恰好有知乎帐号的话或许可以考虑帮我点个赞？</em></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Fedora" scheme="https://zhul.in/tags/Fedora/"/>
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="RPM Package" scheme="https://zhul.in/tags/RPM-Package/"/>
    
  </entry>
  
  <entry>
    <title>下载一份openharmony的源码</title>
    <link href="https://zhul.in/2021/06/06/download-openharmony-source-code/"/>
    <id>https://zhul.in/2021/06/06/download-openharmony-source-code/</id>
    <published>2021-06-06T08:47:34.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不知道为什么，总是有人告诉我鸿蒙已经开源了，不信可以自己去看源码balabala，其实鸿蒙的手机端目前为止依然没有开源，或者说没有完整完整开源。本文我将介绍如何拉取一份openharmony开源的源码。</p></blockquote><p>首先需要准备以下东西</p><ul><li>一台装有类unix环境的电脑（wsl大概也行）</li><li>6G磁盘剩余空间</li><li>互联网（如果使用手机流量的话大概是1.5G）</li></ul><ol start="0"><li><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>没什么好说的，不再赘述。</p></li><li><h4 id="设置git用户名和邮箱"><a href="#设置git用户名和邮箱" class="headerlink" title="设置git用户名和邮箱"></a>设置git用户名和邮箱</h4></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;you@example.com&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><h4 id="下载repo（这个大多数发行版自己都有打包，但是都比较滞后，不如直接下载最新版的二进制文件设置好path变量直接用）"><a href="#下载repo（这个大多数发行版自己都有打包，但是都比较滞后，不如直接下载最新版的二进制文件设置好path变量直接用）" class="headerlink" title="下载repo（这个大多数发行版自己都有打包，但是都比较滞后，不如直接下载最新版的二进制文件设置好path变量直接用）"></a>下载repo（这个大多数发行版自己都有打包，但是都比较滞后，不如直接下载最新版的二进制文件设置好path变量直接用）</h4></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/bin<br>curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo<br><span class="hljs-built_in">chmod</span> a+x ~/bin/repo<br><br><span class="hljs-built_in">cat</span> &gt;&gt; ~/.bashrc &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string"># set PATH so it includes user&#x27;s private bin if it exists</span><br><span class="hljs-string">if [ -d &quot;\$HOME/bin&quot; ] ; then</span><br><span class="hljs-string">    PATH=&quot;\$HOME/bin:\$PATH&quot;</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><ol start="3"><li><h4 id="新建一个文件夹以同步源码"><a href="#新建一个文件夹以同步源码" class="headerlink" title="新建一个文件夹以同步源码"></a>新建一个文件夹以同步源码</h4></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> openharmony<br></code></pre></td></tr></table></figure><ol start="4"><li><h4 id="进入这个文件夹"><a href="#进入这个文件夹" class="headerlink" title="进入这个文件夹"></a>进入这个文件夹</h4></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> openharmony<br></code></pre></td></tr></table></figure><ol start="5"><li><h4 id="初始化repo"><a href="#初始化repo" class="headerlink" title="初始化repo"></a>初始化repo</h4></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">repo init -u https://gitee.com/openharmony/manifest.git --depth=1<br></code></pre></td></tr></table></figure><p>​    注:  <code>--depth=1</code>是为了仅保留一层commit记录，防止过多的历史commit占用空间，如果你想保留历    史commit，那可以把这里的<code>--depth=1</code>去掉。</p><ol start="6"><li><h4 id="使用repo正式开始同步源码"><a href="#使用repo正式开始同步源码" class="headerlink" title="使用repo正式开始同步源码"></a>使用repo正式开始同步源码</h4></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">repo <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><p>repo在sync的时候其实可以加很多选项，可以通过<code>repo help</code>自行研究，我自己常用的是<code>repo sync  --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune -j$(nproc --all) -f1</code></p><p>看到以下提示代表同步成功</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">repo <span class="hljs-keyword">sync</span> <span class="hljs-built_in">has</span> finished successfully.<br></code></pre></td></tr></table></figure><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>结果就当源码下载好并开始checkout后，出现了以下错误</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Garbage</span> collecting: <span class="hljs-number">100</span>% (<span class="hljs-number">220</span>/<span class="hljs-number">220</span>), done in <span class="hljs-number">1</span>.<span class="hljs-number">204</span>s<br><span class="hljs-attribute">Updating</span> files: <span class="hljs-number">100</span>% (<span class="hljs-number">35</span>/<span class="hljs-number">35</span>), done.<br><span class="hljs-attribute">Updating</span> files: <span class="hljs-number">100</span>% (<span class="hljs-number">27</span>/<span class="hljs-number">27</span>), done.<br><span class="hljs-attribute">git</span>-lfs filter-process --skip: line <span class="hljs-number">1</span>: git-lfs: command not found<br><span class="hljs-attribute">fatal</span>: the remote end hung up unexpectedly<br><span class="hljs-attribute">error</span>.GitError: Cannot checkout device_hisilicon_modules: Cannot initialize work tree for device_hisilicon_modules<br><span class="hljs-attribute">error</span>: Cannot checkout device_hisilicon_modules<br></code></pre></td></tr></table></figure><p>看着error很容易可以发现是我的系统没有<code>git-lfs</code>的原因，看样子openharmony使用了git-lfs来储存了某个大文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S git-lfs<span class="hljs-comment">#别的发行版请自行查找相关安装方法</span><br></code></pre></td></tr></table></figure><p>于是乎，安装好<code>git-lfs</code>重新sync源码</p><p>oepnharmony目录下，<code>.repo</code>文件夹内是你从git服务器上下载下来的原始数据，repo将在所有数据下载完成以后将他们自动checkout成代码。</p><p>源码结构是下面这个样子</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">.<br>├── applications<br>├── <span class="hljs-keyword">base</span><br><span class="hljs-keyword"></span>├── <span class="hljs-keyword">build</span><br><span class="hljs-keyword"></span>├── <span class="hljs-keyword">build.py </span>-&gt; <span class="hljs-keyword">build/lite/build.py</span><br><span class="hljs-keyword"></span>├── <span class="hljs-keyword">build.sh </span>-&gt; <span class="hljs-keyword">build/build_scripts/build.sh</span><br><span class="hljs-keyword"></span>├── developtools<br>├── device<br>├── docs<br>├── domains<br>├── drivers<br>├── foundation<br>├── .gn -&gt; <span class="hljs-keyword">build/core/gn/dotfile.gn</span><br><span class="hljs-keyword"></span>├── interface<br>├── kernel<br>├── prebuilts<br>├── productdefine<br>├── .repo<br>├── test<br>├── third_party<br>├── utils<br>└── vendor<br><br><span class="hljs-number">18</span> <span class="hljs-keyword">directories, </span><span class="hljs-number">3</span> files<br></code></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/08/10/62f3cb1057a22.webp" alt="这里是OpenHarmony包含.repo原始数据的全部大小"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cb13027fb.webp" alt="这里是OpenHarmony的.repo原始数据的大小"></p><p><strong>我提供个参考数据，AOSP源码不含.repo原始数据的大小是40G，就openharmony这个代码量，恐怕很难让我相信这是一个兼容安卓应用的系统的完整代码。</strong></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cb15ccbf1.webp" alt="这里是AOSP的.repo原始数据大小"></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cb182333b.webp" alt="这里是AOSP包含.repo原始数据的大小"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在Windows与Linux双系统下共享蓝牙鼠标</title>
    <link href="https://zhul.in/2021/05/30/share-xiaomi-bluetooth-mouse-on-both-windows-and-linux/"/>
    <id>https://zhul.in/2021/05/30/share-xiaomi-bluetooth-mouse-on-both-windows-and-linux/</id>
    <published>2021-05-29T16:00:00.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我自己使用的鼠标是一只<a href="https://www.mi.com/mouse">小米的无线蓝牙双模鼠标</a>。但是由于我的USB接口不是很充裕，我平时还是蓝牙鼠标用的比较多。</p><p>但是，每当我在Windows和Archlinux上切换时，我不得不重新配对我的蓝牙鼠标。原因我在翻译Archwiki上关于蓝牙鼠标相关叙述时已经解释得非常清楚了，我摘在下面：</p><p>“首先，计算机保存蓝牙设备的 MAC 地址和配对密钥；然后，蓝牙设备保存计算机的 MAC 地址和配对密钥。这两步通常不会有问题，不过设备蓝牙端口的 MAC 地址在 Linux 和 Windows 上都是相同的 (这在硬件层面上就设定好了)。然而，当在 Windows 或 Linux  中重新配对设备时，它会生成一个新密钥，覆盖了蓝牙设备之前保存的密钥，即与 Windows 配对产生的密钥会覆盖原先与 Linux  配对的密钥，反之亦然。“</p></blockquote><p>先在Linux上连接蓝牙鼠标，再重启到Windows重新配对蓝牙蓝牙鼠标。</p><p>到<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec">微软官网</a>下载<code>PsExec.zip</code>，解压后，记住你所解压的路径。</p><p>在Windows中，使用管理员权限打开<code>cmd.exe</code></p><p><img src="https://bu.dusays.com/2022/08/10/62f3cb081565a.webp" alt="在Windows下使用管理员权限打开cmd"></p><p>cd到PsExec解压目录，使用如下命令将我们所需要的蓝牙密钥信息保存到C盘根目录下。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">psexec.exe -s -i regedit /e C:\BTKeys.reg HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\BTHPORT\Parameters\Keys<br></code></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2022/08/10/62f3cb0aae88f.webp" alt="使用psexec获取蓝牙信息"></p><p>根目录的BTkeys.reg可以直接用记事本打开，内容大概是下面这个样子</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cb0d9e04f.webp" alt="BTkeys.reg"></p><blockquote><p>为了方便后面的解说，我用各种颜色标注了起来。</p></blockquote><p>在Linux下获取su权限以后，我们需要将Linux下随机分配给鼠标的蓝牙地址改成在Windows上获取的那个地址。上图中「红部分」划出来的就是Windows下获取的地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[zhullyb@Archlinux ~]$ su<br>Password: <br>[root@Archlinux zhullyb]<span class="hljs-comment"># cd /var/lib/bluetooth/E0\:94\:67\:74\:0D\:5F/</span><br>[root@Archlinux E0:94:67:74:0D:5F]<span class="hljs-comment"># ls</span><br>C6:2A:1B:33:2E:71  cache  settings<br>[root@Archlinux E0:94:67:74:0D:5F]<span class="hljs-comment"># mv C6\:2A\:1B\:33\:2E\:71/ C4\:F6\:B3\:2C\:BD\:7E</span><br></code></pre></td></tr></table></figure><p>再编辑<code>/var/lib/bluetooth/&lt;本机蓝牙地址&gt;/&lt;鼠标蓝牙地址&gt;/info</code></p><p>原文件如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[General]</span><br><span class="hljs-attr">Name</span>=MiMouse<br><span class="hljs-attr">Appearance</span>=<span class="hljs-number">0</span>x03c2<br><span class="hljs-attr">AddressType</span>=static<br><span class="hljs-attr">SupportedTechnologies</span>=LE<span class="hljs-comment">;</span><br><span class="hljs-attr">Trusted</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">Blocked</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">WakeAllowed</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">Services</span>=<span class="hljs-number">00001530</span>-<span class="hljs-number">1212</span>-efde-<span class="hljs-number">1523</span>-<span class="hljs-number">785</span>feabcd123<span class="hljs-comment">;00001800-0000-1000-8000-00805f9b34fb;00001801-0000-1000-8000-00805f9b34fb;0000180a-0000-1000-8000-00805f9b34fb;0000180f-0000-1000-8000-00805f9b34fb;00001812-0000-1000-8000-00805f9b34fb;</span><br><br><span class="hljs-section">[IdentityResolvingKey]</span><br><span class="hljs-attr">Key</span>=<span class="hljs-number">067764</span>BF59A7531E978AFDC6BB5EC8E1<br><br><span class="hljs-section">[LongTermKey]</span><br><span class="hljs-attr">Key</span>=E3C49B4F3256018192942EB0CDDEE6A3<br><span class="hljs-attr">Authenticated</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">EncSize</span>=<span class="hljs-number">16</span><br><span class="hljs-attr">EDiv</span>=<span class="hljs-number">28209</span><br><span class="hljs-attr">Rand</span>=<span class="hljs-number">15970850852728832717</span><br><br><span class="hljs-section">[DeviceID]</span><br><span class="hljs-attr">Source</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">Vendor</span>=<span class="hljs-number">10007</span><br><span class="hljs-attr">Product</span>=<span class="hljs-number">64</span><br><span class="hljs-attr">Version</span>=<span class="hljs-number">40</span><br><br><span class="hljs-section">[ConnectionParameters]</span><br><span class="hljs-attr">MinInterval</span>=<span class="hljs-number">6</span><br><span class="hljs-attr">MaxInterval</span>=<span class="hljs-number">9</span><br><span class="hljs-attr">Latency</span>=<span class="hljs-number">100</span><br><span class="hljs-attr">Timeout</span>=<span class="hljs-number">600</span><br></code></pre></td></tr></table></figure><ul><li>「黄色部分」<code>LTK</code> 对应 <code>LongTermKey</code> 下的 <code>Key</code>，把小写转换成大写并删去逗号即可。</li><li>「绿色部分」<code>ERand</code> 对应 <code>Rand</code>。这里比较特殊的是，我们必须先将 Windows 中的值倒转过来再转换为 10 进制。即<code>c2,83,7f,8f,7c,76,b4,02</code>-&gt;<code>02,b4,76,7c,8f,7f,83,c2</code>-&gt;<code>194910961239294914</code></li><li>「蓝色部分」<code>EDIV</code> 对应 <code>EDiv</code>。把 16 进制转换成 10 进制即可，这里就不用倒转了。</li></ul><p>具体的转换方法我不再赘述，我把我的转换过程放在下面，我相信各位读者能够看懂。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[zhullyb@Archlinux ~]$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;e3,c0,b2,8e,64,2b,12,16,d8,c2,d7,d4,59,55,92,cd&#x27;</span> | <span class="hljs-built_in">tr</span> a-z A-Z | sed <span class="hljs-string">&#x27;s/[[:punct:]]//g&#x27;</span><br>E3C0B28E642B1216D8C2D7D4595592CD<br>[zhullyb@Archlinux ~]$ <span class="hljs-built_in">echo</span> $((<span class="hljs-number">16#02</span>B4767C8F7F83C2))<span class="hljs-comment">#这里我是手动倒叙的</span><br>194910961239294914<br>[zhullyb@Archlinux ~]$ <span class="hljs-built_in">echo</span> $((<span class="hljs-number">16#000055a3</span>))<br>21923<br></code></pre></td></tr></table></figure><p>做完这些操作以后，<code>sudo systemctl start bluetooth</code>即可</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="Windows" scheme="https://zhul.in/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>选择最新的Archlinux镜像源</title>
    <link href="https://zhul.in/2021/05/29/choose-the-last-archlinux-mirror-site-in-china/"/>
    <id>https://zhul.in/2021/05/29/choose-the-last-archlinux-mirror-site-in-china/</id>
    <published>2021-05-28T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="找到最新的Archlinux镜像源"><a href="#找到最新的Archlinux镜像源" class="headerlink" title="找到最新的Archlinux镜像源"></a>找到最新的Archlinux镜像源</h3><p>我是testing+kde-unstable用户，平均每天更新4次，对于我而言，选择最新的Archlinux镜像是非常重要的。</p><p>Archlinux的主源并不开放给个人用户使用，仅开放给<a href="https://archlinux.org/mirrors/tier/1/">一级镜像站</a>进行同步，因此我们需要手动寻找国内较新的镜像站。（理论上来说一级镜像站应该比二级镜像站更新，但是有些一级镜像站的同步频率并不高，同步延迟可能会比某些二级镜像站还要高）</p><p>一个archlinux的镜像目录大概是长下面这个样子</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">archlinux/<br>├──<span class="hljs-built_in"> community</span><br><span class="hljs-built_in"></span>├── community-staging<br>├── community-testing<br>├── core<br>├── extra<br>├── gnome-unstable<br>├── images<br>├── iso<br>├── kde-unstable<br>├── lastsync<br>├── lastupdate<br>├── multilib<br>├── multilib-staging<br>├── multilib-testing<br>├──<span class="hljs-built_in"> pool</span><br><span class="hljs-built_in"></span>├── staging<br>└── testing<br></code></pre></td></tr></table></figure><p>其中的<code>lastsync</code>和<code>lastupdate</code>用unix时间戳记录着上一次同步时间和镜像的上一次变更时间。</p><p>因此，我们只需要对比各个镜像站的<code>lastsync</code>谁比较新就行了，我写了如下的辣鸡脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>tuna=$(curl -s https://mirrors.tuna.tsinghua.edu.cn/archlinux/lastsync)<br>bfsu=$(curl -s https://mirrors.bfsu.edu.cn/archlinux/lastsync)<br>sjtug=$(curl -s https://mirror.sjtu.edu.cn/archlinux/lastsync)<br>aliyun=$(curl -s https://mirrors.aliyun.com/archlinux/lastsync)<br>ustc=$(curl -s https://mirrors.ustc.edu.cn/archlinux/lastsync)<br>zju=$(curl -s https://mirrors.zju.edu.cn/archlinux/lastsync)<br>cqu=$(curl -s https://mirrors.cqu.edu.cn/archlinux/lastsync)<br>lzu=$(curl -s https://mirror.lzu.edu.cn/archlinux/lastsync)<br>neusoft=$(curl -s https://mirrors.neusoft.edu.cn/archlinux/lastsync)<br>dgut=$(curl -s https://mirrors.dgut.edu.cn/archlinux/lastsync)<br>netease=$(curl -s https://mirrors.163.com/archlinux/lastsync)<br>tencent=$(curl -s https://mirrors.tencent.com/archlinux/lastsync)<br>hit=$(curl -s https://mirrors.hit.edu.cn/archlinux/lastsync)<br>huaweicloud=$(curl -s https://mirrors.huaweicloud.com/archlinux/lastsync)<br>sohu=$(curl -s https://mirrors.sohu.com/archlinux/lastsync)<br>opentuna=$(curl -s https://opentuna.cn/archlinux/lastsync)<br>pku=$(curl -s https://mirrors.pku.edu.cn/archlinux/lastsync)<br>nju=$(curl -s https://mirrors.nju.edu.cn/archlinux/lastsync)<br>njupt=$(curl -s https://mirrors.nju.edu.cn/archlinux/lastsync)<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string"><span class="hljs-variable">$tuna</span>        #tuna</span><br><span class="hljs-string"><span class="hljs-variable">$bfsu</span>        #bfsu</span><br><span class="hljs-string"><span class="hljs-variable">$sjtug</span>       #sjtug</span><br><span class="hljs-string"><span class="hljs-variable">$aliyun</span>      #aliyun</span><br><span class="hljs-string"><span class="hljs-variable">$ustc</span>        #ustc</span><br><span class="hljs-string"><span class="hljs-variable">$zju</span>         #zju</span><br><span class="hljs-string"><span class="hljs-variable">$cqu</span>         #cqu</span><br><span class="hljs-string"><span class="hljs-variable">$lzu</span>         #lzu</span><br><span class="hljs-string"><span class="hljs-variable">$neusoft</span>     #neusoft</span><br><span class="hljs-string"><span class="hljs-variable">$dgut</span>        #dgut</span><br><span class="hljs-string"><span class="hljs-variable">$netease</span>     #netease</span><br><span class="hljs-string"><span class="hljs-variable">$tencent</span>     #tencent</span><br><span class="hljs-string"><span class="hljs-variable">$hit</span>         #hit</span><br><span class="hljs-string"><span class="hljs-variable">$huaweicloud</span> #huaweicloud</span><br><span class="hljs-string"><span class="hljs-variable">$sohu</span>        #sohu</span><br><span class="hljs-string"><span class="hljs-variable">$opentuna</span>    #opentuna</span><br><span class="hljs-string"><span class="hljs-variable">$pku</span>         #pku</span><br><span class="hljs-string"><span class="hljs-variable">$nju</span>         #nju</span><br><span class="hljs-string"><span class="hljs-variable">$njupt</span>       #njupt</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span>  | <span class="hljs-built_in">sort</span> -r<br></code></pre></td></tr></table></figure><p>其运行结果如下</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1622248120 </span>    #neusoft<br><span class="hljs-symbol">1622247879 </span>       #dgut<br><span class="hljs-symbol">1622247698 </span>        #hit<br><span class="hljs-symbol">1622246042 </span>        #zju<br><span class="hljs-symbol">1622246042 </span>       #tuna<br><span class="hljs-symbol">1622246042 </span>       #bfsu<br><span class="hljs-symbol">1622242426 </span>      #sjtug<br><span class="hljs-symbol">1622242426 </span>      #njupt<br><span class="hljs-symbol">1622242426 </span>        #nju<br><span class="hljs-symbol">1622240702 </span>       #ustc<br><span class="hljs-symbol">1622240522 </span>        #cqu<br><span class="hljs-symbol">1622238783 </span>    #netease<br><span class="hljs-symbol">1622235120 </span>        #lzu<br><span class="hljs-symbol">1622232241 </span>#huaweicloud<br><span class="hljs-symbol">1622230871 </span>    #tencent<br><span class="hljs-symbol">1622217845 </span>     #aliyun<br><span class="hljs-symbol">1622217001 </span>        #pku<br><span class="hljs-symbol">1622203750 </span>       #sohu<br><span class="hljs-symbol">1622166379 </span>   #opentuna<br></code></pre></td></tr></table></figure><p>通过不同时刻的多次测试可以看出，国内同步频率最高的是东软（neusoft）的镜像。顺手一查，没错，是个一级镜像站。通过unix时间戳得知，东软的archlinux镜像几乎是每分钟同步一次，恐怖如斯。。。</p><h2 id="获得更好的下载速度"><a href="#获得更好的下载速度" class="headerlink" title="获得更好的下载速度"></a>获得更好的下载速度</h2><p>我们已经得知东软是国内同步频率最高的Archlinux镜像站了，但是我用东软镜像站的下载速度并不太好看。此时，我们就要搬出依云大佬的神器——<a href="https://blog.lilydjwg.me/2020/10/29/pacsync.215578.html">pacsync</a></p><p>在root用户下使用如下命令装载pacysnc后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;#!/bin/bash -e</span><br><span class="hljs-string"></span><br><span class="hljs-string">unshare -m bash &lt;&lt;&#x27;</span>EOF<span class="hljs-string">&#x27;</span><br><span class="hljs-string">mount --make-rprivate /</span><br><span class="hljs-string">for f in /etc/pacman.d/*.sync; do</span><br><span class="hljs-string">  filename=&quot;$&#123;f%.*&#125;&quot;</span><br><span class="hljs-string">  mount --bind &quot;$f&quot; &quot;$filename&quot;</span><br><span class="hljs-string">done</span><br><span class="hljs-string">pacman -Sy</span><br><span class="hljs-string">EOF&#x27;</span> &gt; /usr/bin/pacsync<br></code></pre></td></tr></table></figure><p>创建<code>/etc/pacman.d/mirrorlist.sync</code>指定我们用来同步pacman数据库（比如东软）</p><p><code>/etc/pacman.d/mirrorlist</code>中存放其他国内镜像源地址（按照同步速度从上到下）</p><p>以后的同步命令为 <code>sudo pacsync &amp;&amp; yay -Su</code></p><p>觉得命令过长的话设置alias可以是个不错的选择。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>请给 tuna/ustc 镜像站减压</title>
    <link href="https://zhul.in/2021/05/27/relieve-the-pressure-of-tuna-mirror-site-please/"/>
    <id>https://zhul.in/2021/05/27/relieve-the-pressure-of-tuna-mirror-site-please/</id>
    <published>2021-05-27T13:25:48.000Z</published>
    <updated>2022-08-22T15:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道从什么时候开始，我总觉得tuna的镜像站提供的下载速度越来越慢，直到我前几天翻开tuna镜像站的「<a href="https://mirrors.tuna.tsinghua.edu.cn/status/#server-status">服务器状态</a>」，我被眼前的景象给震惊到了。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3baac63cd2.webp" alt="本图截于2021年5月27日晚"></p><p>我在这里大致观察了一下这张图：服务器流量主要是由四个部分组成，「http-ipv4」、「https-ipv4」、「http-ipv6」和「https-ipv6」。光是从过去24小时的平均出站流量来计算的话，大约就是2.4Gb/s，如果观察图中的流量高峰期的话，大概是4Gb/s的一个速率。这个流量大小是什么概念呢？根据我个人浅薄的建站经验来讲，这个流量可以让大部分供应商把你的网站判断为正在遭受攻击，你将被强制进入黑洞模式。然而对于tuna的镜像站而言，这个流量速率确是日常。换句话说，tuna的服务器都相当于每时每刻都在被来自全国的开发者“攻击”。</p><blockquote><p>来自 2022 年的竹林: 我是真没想到去年 tuna 的网络负载只有这点的。2022 年的负载图在下面附上，已经翻了一倍不止了</p><p><img src="https://bu.dusays.com/2022/08/10/62f3ba4204ecb.webp" alt="本图截于2022年8月10日晚"></p></blockquote><p>因此，我们也就不难理解为什么tuna近些年来经常出现断流等一系列问题了。</p><blockquote><p>客观上 TUNA 和 UTSC 是国内知名度和镜像项目数量以及同步速度都靠前的镜像站，但也因为如此，这两个镜像站每日的带宽负载是很大的；能跑满我的本地带宽速度是较理想的情况，但是那么大的负载，时间跨度长了体验到的波动差异也就多了起来。至少在我这里，长时间使用两个镜像站的速度波动挺大的。TUNA 也曾微言过带宽日益不堪重负，所以从道德情感和技术理论等角度上，尽管他们是理想的镜像站点，我个人不会优先使用这两个镜像站，也不会优先推荐别人使用。</p><p>——WPlanck</p></blockquote><p>国内的开源镜像站我大多都已经收集到<a href="/2020/07/11/china-mainland-mirrorlist/">这一篇博客中</a>了，以下几个镜像站是我重点推荐的。</p><h3 id="bfsu"><a href="#bfsu" class="headerlink" title="bfsu"></a><a href="https://mirrors.bfsu.edu.cn/">bfsu</a></h3><p>tuna的姊妹站，通俗来讲就是tuna派人维护，北京外国语大学出钱。人少、稳定、涵盖项目较广。</p><h3 id="sjtug"><a href="#sjtug" class="headerlink" title="sjtug"></a><a href="https://mirrors.sjtug.sjtu.edu.cn/">sjtug</a></h3><p>上海交大的站点，也有不少项目，据说sjtug上的manjaro镜像是国内几个开源镜像站中同步最勤快的，用的人也不多。</p><h3 id="opentuna"><a href="#opentuna" class="headerlink" title="opentuna"></a><a href="https://opentuna.cn/">opentuna</a></h3><p>tuna那边用国内aws服务器搭的站点，速度超快，不过比较可惜的是现在同步的项目不多，同步频率低，大概是一天一次的样子。</p><h3 id="pku"><a href="#pku" class="headerlink" title="pku"></a><a href="https://mirrors.pku.edu.cn/Mirrors">pku</a></h3><p>是不是没想到北大也有镜像站？没记错的话是今年三四月左右刚开的，和opentuna情况差不多，用的人少、速度快、同步的项目不多。</p><h3 id="hit"><a href="#hit" class="headerlink" title="hit"></a><a href="https://mirrors.hit.edu.cn/">hit</a></h3><p>哈尔滨工业大学的镜像站，速度我跑下来感觉一般，不是特别亮眼，不过同步频率高。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="镜像站" scheme="https://zhul.in/tags/%E9%95%9C%E5%83%8F%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>我为什么选择Archlinux？</title>
    <link href="https://zhul.in/2021/05/23/why-i-use-archlinux/"/>
    <id>https://zhul.in/2021/05/23/why-i-use-archlinux/</id>
    <published>2021-05-22T16:00:00.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于我而言，我用Archlinux主要的原因就是实用主义。我可以很负责的说，Arch真的是在我所有用过的发行版当中最符合实用主义的一个了。</p><p>很多大佬一提到Archlinux就扯些什么kiss原则，在我看来则不然。</p><h2 id="整洁规范的系统"><a href="#整洁规范的系统" class="headerlink" title="整洁规范的系统"></a>整洁规范的系统</h2><p>规范代码为的不是为了什么<strong>Art of Code</strong>，而是可读性的提升；遵循kiss原则亦是如此。</p><p>配置文件的路径写好了，符合规范，我们就能一下子找到，我们是为了实用主义而遵守kiss原则。</p><p>同样的，我同样可以为了实用主义而破坏kiss原则。<del>比如在我的archiso-zhullyb中，我添加了一个pacman的hook将我的定制内核重命名为linux以确保其能够正确被ventoy所识别，这也是为了实用主义。</del></p><p>那么，什么时候我会破坏kiss原则呢？当我认为破坏kiss原则所带来的利大于弊时，我就会考虑以一个并不规范但却有效的方法来处理问题。</p><p>但很有趣的是，由于Archlinux的官方总是将kiss奉为圣旨，这就给我们提供了一个非常nice的环境了——在一个非常规范的系统内，破坏kiss原则所带来的代价并不会很大，这就好比在一个布线整齐的机房内临时私拉两三根线并不会给维护带来多大的困难。</p><h2 id="Archlinux对上游软件包的发行策略"><a href="#Archlinux对上游软件包的发行策略" class="headerlink" title="Archlinux对上游软件包的发行策略"></a>Archlinux对上游软件包的发行策略</h2><p>不同于apt在源内提供了统一软件的多个版本供用户选择，pacman剑走偏锋，默认用户系统内所有软件都是最新的。</p><p>由此带来了一个好处——不会出现由于版本过高/过低导致的依赖问题。只要我保证系统内的所有软件都是最新的，就不会出问题，非常的简单粗暴。</p><p>此外，不考虑依赖版本这一特点对于打包人来说也是一种解脱。</p><h2 id="pacman简单的打包方式"><a href="#pacman简单的打包方式" class="headerlink" title="pacman简单的打包方式"></a>pacman简单的打包方式</h2><p>不同于deb以及rpm，pacman的软件包应该是所有发行版中最省事儿的。</p><p>打包软件时，我们只需要写（改）一份PKGBUILD，就可以仅仅通过在PKGBUILD所在的路径执行makepkg命令来完成一次打包，这相比起deb而言可谓是天差地别。如此简单有效的打包方式注定其将被实用主义者所青睐。</p><h2 id="超低的社区贡献成本"><a href="#超低的社区贡献成本" class="headerlink" title="超低的社区贡献成本"></a>超低的社区贡献成本</h2><p>很多发行版社区开发与贡献其实并不容易参与进去，我拿Ubuntu来做个比较。</p><blockquote><p> 附: Archwiki是先斩后奏类型的文档，在你按下保存按钮的那一刻，wiki将立即被更新，所有访客都将看到你改动后的内容。wiki文档拥有变更记录，不担心有人恶意搞破坏，向wiki管理员提出举报后破坏者的账号会被及时封禁，wiki可以非常简单地回滚到之前的状态。</p><p>AUR同样也是，你可以随意上传自己的PKGBUILD，可以被别的用户及时看到。如果上传恶意脚本，在别的用户举报后你将迅速被封号。</p></blockquote><h3 id="Wiki方面"><a href="#Wiki方面" class="headerlink" title="Wiki方面"></a>Wiki方面</h3><p>Ubuntu其实是我第一个上手的Linux发行版，在为期半年的Ubuntu体验中，我对于社区做出的贡献为0。这倒也不是我不热衷于参与社区贡献，而是对Ubuntu社区的贡献成本太高了。去贡献文档翻译，需要等待漫长的审核过程，在第一篇汉化文章正式展现在别的用户眼前后，我一定会被激发出继续翻译第二篇的热情。然而，面对太长的审核周期，再高涨的热情恐怕也会被浇灭。</p><p>Arch的社区则不一样，他并不像别的社区那样严谨——只要注册个wiki的账号便可以开始贡献文档。你可以随意地编辑一篇文章或者是新增一篇自己的文章，编辑后的文章将能够立即被别的用户所阅读到，没有任何审核过程，有了这份热情，我便继续翻译别的文档，我想，这应该就是archwiki为何涵盖面如此之广的原因。</p><h3 id="AUR方面"><a href="#AUR方面" class="headerlink" title="AUR方面"></a>AUR方面</h3><p>同样也是拿Ubuntu对比。</p><p>在Archlinux下，我只需要简单的写一个PKGBUILD即可轻松构建一个软件包，同时，我也可以将这份有我攥写的PKGBUILD上传到AUR供别的用户使用。AUR作为一个公开的储存库，任何Arch用户都可以通过AUR Helper轻松得从AUR中获取我写的PKGBUILD并在本地打成自己的包。与此同时，我也可以创建一个私人源，直接发行我构建的二进制包。</p><p>Ubutnu则不然，他的打包方式则要麻烦得多，同时也没有类似PKGBUILD一样的东西便于用户分享自己的打包脚本。唯一能够分享自己的劳动成果的方式无非就是直接分享自己打出来的deb包，最多也不过是建立自己的ppa，这对于用户来说是极为麻烦的。用户需要处心积虑地寻找自己所需要的deb包或是含有目标包的ppa地址并手动添加，不像Archlinux有AUR这种东西能够让我们知道在哪里能够找到我们所需要的包。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>使用vercel创建一个随机图片api</title>
    <link href="https://zhul.in/2021/05/21/create-a-random-picture-api-with-vercel/"/>
    <id>https://zhul.in/2021/05/21/create-a-random-picture-api-with-vercel/</id>
    <published>2021-05-20T16:00:00.000Z</published>
    <updated>2022-09-29T06:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你的网络环境不算太差的话，你在访问我博客的时候应该可以看到顶部有一张背景图。假如你访问我的博客时留心观察，你或许会发现每次你访问我博客时的背景都是不一样的。如果你没玩够，或许你可以尝试<a href="https://api.vercel.zhullyb.top/api/randomtoppic.php"><strong>点击这里</strong></a>，我总共搜集了20张壁纸供诸位赏玩。</p><p>是的，这是使用php实现的随机图片api，托管于vercel，你可以在<a href="https://note.aya1.top/#/4-phpapi"><strong>aya的博客</strong></a>上找到我使用的代码。具体配置方式我不再赘述。</p><p>然而，我们还需要解决一个问题: php在哪里运行？</p><p>如果你拥有自己的服务器，在国内访问速度毫不逊色，那就好办了，直接扔自己服务器上即可。然而，我并没有。我需要找到一个在国内访问速度给力的地方来部署我的api，以确保访客在打开我的博客时可以在第一时间获取到图片的真实链接并开始加载。</p><p>起初，我将其部署在我的好朋友(<del>你可以猜猜他是谁</del>)的国内vps上，访问速度自然不用说。然而，他的服务器<strong>不支持https</strong>，这就导致使用chrome访问的时候chrome不会自动访问我的api，博客顶部一片惨蓝。。。</p><p>随后，我使用的是000webhost提供的虚拟主机，国内访问起来也还不错，大概正常运行了半个月左右的时间，然后莫名开始502了。我懂，作为不交钱的白嫖用户应该自觉滚蛋了，这点觉悟咱还是有。</p><p><strong>随后，我找到了目前的方案——vercel</strong></p><p>vercel是被我用来部署静态网页的，但我没想到他也能<strong>支持php</strong>。参考了<a href="https://github.com/juicyfx/vercel-php">vercel-php</a>项目后，我大致了解了整个仓库结构。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">project<br>├── api<br>│   └── <span class="hljs-keyword">index</span>.php<br>└── vercel.json<br></code></pre></td></tr></table></figure><p>php和附带的资源文件(如果有的话)一定要放到api文件夹下才能够正常被vercel识别。</p><p>以下附<code>vercel.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;api/index.php&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;runtime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vercel-php@0.4.0&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Network" scheme="https://zhul.in/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>禁止deepin-wine-tim使用simsun字体渲染</title>
    <link href="https://zhul.in/2021/04/27/hide-simsun-from-deepin-wine-tim/"/>
    <id>https://zhul.in/2021/04/27/hide-simsun-from-deepin-wine-tim/</id>
    <published>2021-04-26T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文中，我通过bwrap命令对运行Tim的wine程序屏蔽了simsun字体以获得了一个更为舒适的字体渲染效果。我所使用的Tim为<code>deepin-wine-tim</code>，至于<code>deepin-wine-qq</code>通过相同的方式应该也能达到相同的效果，spark商店的Tim我自己测试下来似乎是没法达到这样的效果，而使用其他方法安装simsun字体的网友们则需要注意灵活变通，不要照抄我给出的字体路径。</p></blockquote><p>在Archlinux下，我们通常会使用deepin-wine5来运行QQ/Tim.</p><p>但是当我们在系统中倒入simsun字体时，无论使用什么奇迹淫巧似乎都无法阻止deepin-wine5找到simsun并优先使用它。于是，字体渲染就会变成如图这样奇奇怪怪的画风: </p><p><img src="https://bu.dusays.com/2022/08/10/62f3c887040ff.webp"></p><p>但是我并不喜欢这样的渲染效果，使用simsun渲染出来的字体总感觉有一种上世纪的风格，况且，在我的1080p小屏下显示并不清晰。</p><p>于是，在尝试了更改注册表、在wine容器的系统路径下直接塞入字体文件等等方式无果后，我选择了逃避——直接让wine程序读取不到simsun。</p><p>我的simsun是通过<code>ttf-ms-win10-zh_cn</code>这个包安装上去的，被安装在<code>/usr/share/fonts/TTF/</code>路径下。</p><p>使用<code>pacman -Qo /usr/share/fonts/TTF/</code>命令查找这个路径下所安装的字体包，我这里的输出如下:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">[zhullyb@Archlinux ~]$ pacman -Qo <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/fonts/</span>TTF/<br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/fonts/</span>TTF/ is owned by ttf-cascadia-code <span class="hljs-number">2102.25</span>-<span class="hljs-number">1</span><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/fonts/</span>TTF/ is owned by ttf-fira-code <span class="hljs-number">5.2</span>-<span class="hljs-number">1</span><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/fonts/</span>TTF/ is owned by ttf-hack <span class="hljs-number">3.003</span>-<span class="hljs-number">3</span><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/fonts/</span>TTF/ is owned by ttf-monaco <span class="hljs-number">6.1</span>-<span class="hljs-number">6</span><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/fonts/</span>TTF/ is owned by ttf-ms-win10-zh_cn <span class="hljs-number">2019</span>ltsc-<span class="hljs-number">1</span><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/fonts/</span>TTF/ is owned by ttf-opensans <span class="hljs-number">1.101</span>-<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>可以看到，并没有什么对wine程序运行特别重要的字体包，于是我计划通过bwrap命令对运行Tim的wine程序直接屏蔽这个路径。</p><p>首先安装提供<code>bwrap</code>命令的<code>bubblewrap</code>程序: <code>sudo pacman -S bubblewrap --needed</code></p><p>通过查找deepin-wine-tim的desktop文件发现Tim的启动命令是<code>/opt/apps/com.qq.office.deepin/files/run.sh</code></p><p>在终端中输入命令进行测试<code>bwrap --dev-bind / / --tmpfs /usr/share/fonts/TTF/ /opt/apps/com.qq.office.deepin/files/run.sh</code></p><p>出现如下界面，看来方法是可行的。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3c88b119f8.webp"></p><p>于是，我们进一步更改deepin-wine-tim的desktop文件，以方便我们不需要每次都在Terminal中执行这么一大长串命令。需要更改的地方如下图红色方框圈出部分</p><p><img src="https://bu.dusays.com/2022/08/10/62f3c88f41790.webp"></p><p>我这里附一下图中的命令方便诸位复制粘贴。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[zhullyb@Archlinux ~]$ cat /usr/share/applications/com.qq.office.deepin.desktop <br><span class="hljs-comment">#!/usr/bin/env xdg-open</span><br><br>[Desktop Entry]<br><span class="hljs-attribute">Encoding</span>=UTF-8<br><span class="hljs-attribute">Type</span>=Application<br><span class="hljs-attribute">X-Created-By</span>=Deepin WINE Team<br><span class="hljs-attribute">Categories</span>=chat;Network;<br><span class="hljs-attribute">Icon</span>=com.qq.office.deepin<br><span class="hljs-attribute">Exec</span>=bwrap --dev-bind / / --tmpfs /usr/share/fonts/TTF/ /opt/apps/com.qq.office.deepin/files/run.sh<br><span class="hljs-attribute">Name</span>=TIM<br>Name[zh_CN]=TIM<br><span class="hljs-attribute">Comment</span>=Tencent TIM<span class="hljs-built_in"> Client </span>on Deepin Wine<br><span class="hljs-attribute">StartupWMClass</span>=tim.exe<br>MimeType=<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="Bwrap" scheme="https://zhul.in/tags/Bwrap/"/>
    
  </entry>
  
  <entry>
    <title>在系统使用暗色主题时禁用Firefox的夜间模式</title>
    <link href="https://zhul.in/2021/04/23/disable-firefox-nightmode-when-your-system-is-using-that/"/>
    <id>https://zhul.in/2021/04/23/disable-firefox-nightmode-when-your-system-is-using-that/</id>
    <published>2021-04-22T16:00:00.000Z</published>
    <updated>2022-08-10T08:31:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在我使用Archlinux的时候经常会使用一些暗色主题，但是我并不希望我浏览网页时一些自作聪明的网页自动切换成夜间模式。</p><p>这个设置我找了好久，每次在谷歌上检索都会跳出来一堆教我改Firefox主题的、用插件开夜间模式的，却都不是我的目的。</p><p>我们所需要做的是在浏览器地址栏输入<code>about:config</code>进入高级设置</p><p>搜索并添加一个值</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">ui.<span class="hljs-params">system</span>UsesDarkTheme<br></code></pre></td></tr></table></figure><p>将这个选项的<strong>数值</strong>设置为0即可。</p><p><img src="https://bu.dusays.com/2022/08/10/62f36c8f05efd.png" alt="步骤1"></p><p><img src="https://bu.dusays.com/2022/08/10/62f36cce30773.png" alt="步骤2"></p><p>2021.12.13更新: Firefox 更新 95.0 以后，如果遇到原方案失效的问题，可以参考 <a href="https://blog.cubercsl.site/post/%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%9A%97%E8%89%B2%E4%B8%BB%E9%A2%98%E6%97%B6%E7%A6%81%E6%AD%A2%E7%94%A8-firefox-%E7%9A%84%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F/">CSL的博客</a>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="笔记" scheme="https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>记一次在Gitlab部署Jekyll博客时遇到的jekyll-github-metadata报错问题</title>
    <link href="https://zhul.in/2021/04/16/fuck-jekyll-github-metadata-on-gitlab/"/>
    <id>https://zhul.in/2021/04/16/fuck-jekyll-github-metadata-on-gitlab/</id>
    <published>2021-04-15T16:00:00.000Z</published>
    <updated>2022-08-10T15:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的博客是挂在GitlabPages上的，在为博客更换主题的时候遇到了一点点小麻烦。</p><p>报错如图：</p><p><img src="https://bu.dusays.com/2022/08/10/62f3caf233039.webp"></p><p>当然，我这边也会附上详细的报错日志，以便后人能够通过关键词搜索到。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">Configuration file: <span class="hljs-regexp">/builds/</span>zhullyb<span class="hljs-regexp">/test/</span>_config.yml<br>            Source: <span class="hljs-regexp">/builds/</span>zhullyb/test<br>       Destination: public<br> Incremental build: disabled. Enable with --incremental<br>      Generating... <br>       Jekyll Feed: Generating feed <span class="hljs-keyword">for</span> posts<br>   GitHub Metadata: No GitHub API authentication could be found. Some fields may be missing or have incorrect data.<br>   GitHub Metadata: Error processing value <span class="hljs-string">&#x27;url&#x27;</span>:<br>             ERROR: YOUR SITE COULD NOT BE BUILT:<br>                    ------------------------------------<br>                    No repo name found. Specify using PAGES_REPO_NWO environment variables, <span class="hljs-string">&#x27;repository&#x27;</span> <span class="hljs-keyword">in</span> your configuration, or set up an <span class="hljs-string">&#x27;origin&#x27;</span> git remote pointing to your github.com repository.<br>Cleaning up file based variables <span class="hljs-number">00</span>:<span class="hljs-number">01</span><br>ERROR: Job failed: <span class="hljs-keyword">exit</span> code <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>经过了一番瞎折腾以后，我依然没有解决问题，而每次push都要等待gitlab的ci构建两三分钟，实在磨不动的我去看了<a href="https://github.com/jekyll/github-metadata">jekyll-github-metadata</a>的README，结合上文的报错，我一下子就看懂了。</p><p><code>jekyll-github-metadata</code>可以通过github中的信息自动为jekyll提供<code>site.github</code>、<code>site.title</code>、<code>site.description</code>、<code>site.url</code>和<code>site.baseurl</code>。而由于我们在用的是Gitlab，所以jekyll-github-metadata就无法获取到这些信息，需要我们手动指定。报错中缺少的就是<code>url</code></p><p>于是打开<code>_config.yml</code>，把<code>url</code>给补上，顺便把别的变量一同加上，如图：</p><p><img src="https://bu.dusays.com/2022/08/10/62f3caf51bdb5.webp"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="笔记" scheme="https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>我在Archlinux上的常用软件</title>
    <link href="https://zhul.in/2021/04/16/the-software-i-use-on-archlinux/"/>
    <id>https://zhul.in/2021/04/16/the-software-i-use-on-archlinux/</id>
    <published>2021-04-15T16:00:00.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近基本固定了在Archlinux上的常用软件，也供各位参考一下。</p><p>我是KDE用户，所以KDE家的软件会用得比较多。</p></blockquote><p>浏览器：Firefox，Chromium备用（主要是使用chromium的网页翻译功能，还有就是打开一些对Firefox不太友好的网站）</p><p>下载器：curl，wget，motrix    根据不同使用场景更换下载器</p><p>终端：konsole</p><p>输入法：fcitx5-chinese-addons</p><p>即时通讯：telegram，deepin-wine-tim，deepin-wine-wechat，electron-qq，wechat-uos，linuxqq</p><p>播放器：vlc</p><p>编辑器：nano，kate，visual-studio-code-bin，typora，wps</p><p>图形类：pinta，drawio-desktop-bin，imagemagick</p><p>文件管理器：dolphin</p><p>文件传输：sftp（命令行里的），filezilla</p><p>系统、网络工具：latte-dock-git，v2raya，htop，gtop</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="笔记" scheme="https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>使用Chrome的同步api为chromium开启同步功能</title>
    <link href="https://zhul.in/2021/04/15/login-chromium-with-the-api-of-chrome/"/>
    <id>https://zhul.in/2021/04/15/login-chromium-with-the-api-of-chrome/</id>
    <published>2021-04-14T16:00:00.000Z</published>
    <updated>2022-08-22T15:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年两三月的时候，Google限制了chromium的同步api次数，导致各个发行版内置的chromium将不再能继续使用Google的数据同步功能。</p><p>今天在翻 archlinuxcn 的群组的时候翻到了一段脚本: <a href="https://gist.github.com/foutrelis/14e339596b89813aa9c37fd1b4e5d9d5">https://gist.github.com/foutrelis/14e339596b89813aa9c37fd1b4e5d9d5</a></p><p>大意就是说，由于Archlinux特殊的chromium启动方式导致我们可以在设置<code>oauth2-client-id</code>和<code>oauth2-client-secret</code>的情况下通过chrome的同步api继续使用Google的同步服务，说得太多了也没必要，毕竟原文就在那里，看不看取决于你，我这里直接给命令吧。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;--oauth2-client-id=77185425430.apps.googleusercontent.com<br>--oauth2-client-secret=OTJgUOQcT7lO7GsGZq2G4IlT&quot; &gt;&gt; ~/.config/chromium-flags.conf<br></code></pre></td></tr></table></figure><p>再次打开chromium,你就会发现你心心念念的同步功能回来了。</p><p><img src="https://bu.dusays.com/2022/08/10/62f3cafe4a5ec.webp"></p><p><del>然而，并不是所有的发行版都像 Archlinux 这样考虑到 oauth，我们也不可能像 Archlinux 官方那样有这个闲情雅致为没一个 Chromium 去添加这个 <a href="https://github.com/archlinux/svntogit-packages/blob/packages/chromium/trunk/use-oauth2-client-switches-as-default.patch">patch</a> 以后重新编译一遍，大部分人都是直接用发行版源里的。针对这种情况，我们可以直接手写一个脚本</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/bash</span><br><span class="hljs-built_in">export</span> GOOGLE_DEFAULT_CLIENT_ID=77185425430.apps.googleusercontent.com<br><span class="hljs-built_in">export</span> GOOGLE_DEFAULT_CLIENT_SECRET=OTJgUOQcT7lO7GsGZq2G4IlT<br><span class="hljs-built_in">exec</span> /usr/bin/chromium-browser <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><span class="hljs-comment"># 我用的 Fedora 的启动命令是 chromium-browser，别的发行版用户还请自行调整</span><br></code></pre></td></tr></table></figure><p>当我满心欢喜地把脚本扔进 <code>$HOME/.local/bin</code> 后，我却突然发现 Fedora 官方源中把 chromium 的启动命令写死在了 <code>/usr/bin/chromium-browser</code>，如果直接去改 <code>/usr/bin/chromium-browser</code> 的话，每次更新都会被覆盖。</p><p><strong>正确的做法</strong>应该是把 desktop 文件复制一份到桌面，再去改内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.local/share/applications/<br><span class="hljs-built_in">cp</span> /usr/share/applications/chromium-browser.desktop <span class="hljs-variable">$HOME</span>/.local/share/applications/<br>sed -i <span class="hljs-string">&quot;s|/usr/bin/chromium-browser|GOOGLE_DEFAULT_CLIENT_ID=77185425430.apps.googleusercontent.com GOOGLE_DEFAULT_CLIENT_SECRET=OTJgUOQcT7lO7GsGZq2G4IlT /usr/bin/chromium-browser|g&quot;</span> <span class="hljs-variable">$HOME</span>/.local/share/applications/chromium-browser.desktop<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="笔记" scheme="https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Appimage的文件储存在哪里</title>
    <link href="https://zhul.in/2021/04/13/where-will-appimage-put-its-file/"/>
    <id>https://zhul.in/2021/04/13/where-will-appimage-put-its-file/</id>
    <published>2021-04-12T16:00:00.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>我不饿：</p><blockquote><p>有人知道怎么删除appimage的用户数据吗？</p></blockquote><p>liolok | 李皓奇:</p><blockquote><p>还是可以在用户的家目录下面乱写的吧</p></blockquote><p>Lipis Apple:</p><blockquote><p>不太讲武德：~/.local/share/(app)</p><p>算讲武德：~/.config/(app)</p><p>不讲武德：~/.(app)</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="大佬对话笔记" scheme="https://zhul.in/tags/%E5%A4%A7%E4%BD%AC%E5%AF%B9%E8%AF%9D%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用Motrix接管Firefox的下载</title>
    <link href="https://zhul.in/2021/04/11/use-motrix-install-of-firefox-to-download/"/>
    <id>https://zhul.in/2021/04/11/use-motrix-install-of-firefox-to-download/</id>
    <published>2021-04-10T16:00:00.000Z</published>
    <updated>2022-08-22T15:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是一篇个人笔记，不具有太强的技术性，仅仅是为后来者指个方向。</p></blockquote><p>熟悉我的人都知道，我是一个Firefox的忠实用户，原因有二：</p><p>​    一/ Firefox国际版同步功能国内可用</p><p>​    二/ moz://a（Firefox用户应该能在地址栏直接访问这个链接）</p><p>但是Motrix没有推出适用于Firefox的接管浏览器下载功能的插件，于是只能用<a href="https://addons.mozilla.org/firefox/addon/aria2-integration">aria2的插件</a>。这个插件内置了AriaNG,对于aria2用户来说会比较实用，但是对于Motrix用户而言其实功能有些多余且不兼容，比如什么自动启动aria2什么的是无法实现的。</p><p>主要的配置过程我就图解了，退出前记得保存配置。</p><p><img src="https://bu.dusays.com/2022/08/10/62f36d3a79438.png" alt="step 1"><br><img src="https://bu.dusays.com/2022/08/10/62f36d3d08a23.png" alt="step 2"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="笔记" scheme="https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>yay进阶</title>
    <link href="https://zhul.in/2021/04/04/yay-more/"/>
    <id>https://zhul.in/2021/04/04/yay-more/</id>
    <published>2021-04-03T16:00:00.000Z</published>
    <updated>2022-08-24T10:07:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>yay是一个AUR Helper，他可以执行pacman的几乎所有操作，并在此基础上添加了很多额外用法。</p><p>我没有在网络上查找到关于yay的、除了pacman基础用法和安装AUR包以外的中文教程，英文的也几乎没有看到，这也是我写这篇文章的原因所在。</p><p>本文通篇详讲yay的每一个设置/选项（大概就是archwiki那种干涩的行文思路），最后会给出我自己的一些常用命令，但不会做解释。</p><p>写作时参考了yay的英文使用手册，如果你的arch安装了yay，那么即可通过<code>man yay</code>命令随时查阅它。</p></blockquote><p><strong>Tips1: 本文中出现的foo一般是指包名，标注*的表示该选项默认启用。</strong></p><p><strong>Tips2: 使用电脑端的访客可以在侧栏以获取目录。</strong></p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>yay的基本用法是<code>yay &lt;operation&gt; [options] [targets]</code>、<code>yay foo</code>和<code>yay</code>，<code>yay &lt;operation&gt; [options] [targets]</code>的用法可以讨论的点比较多，我会在后文中一一道来。</p><h3 id="yay"><a href="#yay" class="headerlink" title="yay"></a><code>yay</code></h3><p>当我们仅执行<code>yay</code>，后面不跟任何参数时，yay会执行操作<code>yay -Syu</code>，他会先调用pacman更新源的数据库、更新所有从源内安装的软件包，并检查你的AUR包有没有更新。</p><h3 id="yay-foo"><a href="#yay-foo" class="headerlink" title="yay foo"></a><code>yay foo</code></h3><p>通过yay后面直接跟包名的命令会让yay直接在源和AUR内搜索带有<code>foo</code>关键词的包（包名和简介中只要出现foo都会被一网打尽），以下是我执行<code>yay dingtalk</code>的输出</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs subunit">5 aur/com.dingtalk.deepin 5.0.15deepin7<span class="hljs-string">-1</span> (<span class="hljs-string">+0</span> 0.00)<br>    Deepin Wine dingtalk<br>4 aur/deepin.com.dingtalk.com 5.1.28.12<span class="hljs-string">-2</span> (<span class="hljs-string">+1</span> 0.12)<br>    DingTalk Client on Deepin Wine<br>3 aur/dingtalk 2.1.3<span class="hljs-string">-1</span> (<span class="hljs-string">+3</span> 0.00)<br>    钉钉桌面版，基于electron和钉钉网页版开发，支持Windows、Linux和macOS<br>2 aur/dingtalk-linux 3.5.5<span class="hljs-string">-1</span> (<span class="hljs-string">+6</span> 0.12)<br>    May be the official Linux experimental version<br>1 aur/dingtalk-electron 2.1.9<span class="hljs-string">-1</span> (<span class="hljs-string">+9</span> 0.15)<br>    钉钉Linux版本<br>==&gt; Packages to install (eg: 1 2 3, 1<span class="hljs-string">-3</span> or ^4)<br>==<br></code></pre></td></tr></table></figure><p>输入每一项对应的序号即可进入相应的安装过程。</p><h3 id="yay-lt-operation-gt-options-targets"><a href="#yay-lt-operation-gt-options-targets" class="headerlink" title="yay &lt;operation&gt; [options] [targets]"></a><code>yay &lt;operation&gt; [options] [targets]</code></h3><p>在这里，&lt;operation&gt;每次只能有一个，[options]和[targets]可以有多个，且多个[options]可以合起来写在一起。比如<code>yay -P -s -f</code>可以直接写成<code>yay -Psf</code>，顺序也可以颠倒，<code>-Psf</code>和<code>-sPf</code>没区别。</p><h4 id="Y-yay"><a href="#Y-yay" class="headerlink" title="-Y (--yay)"></a><code>-Y (--yay)</code></h4><p>-Y行为其实是yay的默认行为，当你没有加其他的行为参数时，yay就会执行-Y参数，可以跟<code>--gendb</code>和<code>-c</code>。</p><h5 id="gendb"><a href="#gendb" class="headerlink" title="--gendb"></a><code>--gendb</code></h5><p>生成AUR数据库。<strong>仅当从另一个AUR Helper迁移到yay时，才应使用此选项。</strong><del>（根据我的个人理解，是根据你Arch内安装的源内找不到的包的包名去AUR里寻找对应的PKGBUILD，并且把能找到的PKGBUILD给clone到<code>~/.cache/yay/</code>目录下）</del></p><p>千玄子大佬说：“简单说来就是把在 AUR 的 PKGBUILD 下下来然后比对是否要更新。”</p><h5 id="c（-clean）"><a href="#c（-clean）" class="headerlink" title="-c（--clean）"></a><code>-c（--clean）</code></h5><p>清除不再需要的、没有被依赖的包。（相当于apt中的autoremove）</p><h4 id="P-show"><a href="#P-show" class="headerlink" title="-P(--show)"></a><code>-P(--show)</code></h4><p>执行特定的Print操作。可以跟的[option]有<code>-c、-f、-d、-g、-n、-s、-u、-w、-q</code></p><h5 id="c-complete"><a href="#c-complete" class="headerlink" title="-c(--complete)"></a><code>-c(--complete)</code></h5><p>Print所有源内和AUR软件包的列表。这是给命令行操作提供的，并不打算由用户直接使用。（意思是启用了这个选项以后你的终端会出现一大串长常的列表来告诉你你的Arch到底可以从哪里安装哪些包，并不是直接给你用的，是作为数据留给别的命令来玩耍的）</p><h5 id="f-fish"><a href="#f-fish" class="headerlink" title="-f(--fish)"></a><code>-f(--fish)</code></h5><p>在输出结果到终端时，会专门为fish用户做微调。（但是根据SamLukeYes大佬说他用fish体验下来并没有感知到加不加有什么区别，应该是属于感知不强的选项）</p><h5 id="d-defaultconfig"><a href="#d-defaultconfig" class="headerlink" title="-d(--defaultconfig)"></a><code>-d(--defaultconfig)</code></h5><p>Print默认的yay配置。</p><h5 id="g-currentconfig"><a href="#g-currentconfig" class="headerlink" title="-g(--currentconfig)"></a><code>-g(--currentconfig)</code></h5><p>Print当前的yay配置。</p><h5 id="n-numberupgrades"><a href="#n-numberupgrades" class="headerlink" title="-n(--numberupgrades)"></a><code>-n(--numberupgrades)</code></h5><p>数一数你现在还有多少AUR包待更新。yay作者不推荐你使用呢，他推荐你用<code>yay -Qu</code>或者<code>wc -l</code>来代替它。</p><h5 id="s-stats"><a href="#s-stats" class="headerlink" title="-s(--stats)"></a><code>-s(--stats)</code></h5><p>会展示一大堆信息，如下</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[zhullyb@Archlinux ~]$ yay -Ps<br><span class="hljs-section">==&gt; Yay version v10.2.0    #yay版本</span><br><span class="hljs-section">===========================================</span><br>==&gt; Total installed packages: 1240    #总共安装了多少包<br>==&gt; Total foreign installed packages: 24    #多少包不是从源里安装的<br>==&gt; Explicitly installed packages: 271    #有多少包是你自己主动安装的(而不是作为依赖安装的)<br><span class="hljs-section">==&gt; Total Size occupied by packages: 14.3 GiB    #安装的所有包合在一起一共占了你多少空间</span><br><span class="hljs-section">===========================================</span><br>==&gt; Ten biggest packages:    #十个体积最大的包<br>wps-office-cn: 990.9 MiB<br>ttf-sarasa-gothic: 855.5 MiB<br>linux-firmware: 652.3 MiB<br>baidunetdisk-bin: 494.7 MiB<br>com.antutu.benchmark: 412.0 MiB<br>wine: 402.2 MiB<br>linux-xanmod-cacule-uksm-cjktty: 324.4 MiB<br>microsoft-edge-dev-bin: 316.4 MiB<br>wine-mono: 316.2 MiB<br><span class="hljs-section">deepin-wine5-i386: 259.5 MiB</span><br><span class="hljs-section">===========================================</span><br>:: Querying AUR...<br><span class="hljs-code"> -&gt; Missing AUR Packages:  zhullyb-archlinux-git    #AUR里找不到的包</span><br><span class="hljs-code"> -&gt; Flagged Out Of Date AUR Packages:  xml2    #AUR中被人标注过期的包</span><br></code></pre></td></tr></table></figure><h5 id="u-upgrades"><a href="#u-upgrades" class="headerlink" title="-u(--upgrades)"></a><code>-u(--upgrades)</code></h5><p>展示你所有待更新的包。</p><h5 id="w-news"><a href="#w-news" class="headerlink" title="-w(--news)"></a><code>-w(--news)</code></h5><p>展示来自archlinux.org的新闻。需要注意的是，这里的新闻是具有时效性的，只有在你的Arch最后一次更新以后发出来的新闻才会被显示出来。如果你不想要yay判断新闻时效性，你可以通过<code>yay -Pww</code>（即两个<code>w</code>）来获取所有能获得的新闻。</p><h5 id="q-quiet"><a href="#q-quiet" class="headerlink" title="-q(--quiet)"></a><code>-q(--quiet)</code></h5><p>在输出新闻的时候，仅输出新闻的标题。该功能需要与<code>-w</code>连用，即<code>yay -Pwq</code>。</p><h4 id="G-getpkgbuild"><a href="#G-getpkgbuild" class="headerlink" title="-G(--getpkgbuild)"></a><code>-G(--getpkgbuild)</code></h4><p>后跟包名。需要注意的是，如果指定的包不存在于官方源，则无法输出，后跟<code>-f、-p</code>参数。</p><p><em>如果希望仅获取来自AUR（即排除第三方源的干扰）的PKGBUILD，后需跟<code>-a</code>参数。</em></p><h5 id="f-force"><a href="#f-force" class="headerlink" title="-f(--force)"></a><code>-f(--force)</code></h5><p>强制下载AUR中的PKGBUILD，如果它在yay缓存目录已经存在了，那就覆盖它！</p><h5 id="p-print"><a href="#p-print" class="headerlink" title="-p(--print)"></a><code>-p(--print)</code></h5><p>Print指定包的PKGBUILD。</p><h3 id="pacman-拓展用法"><a href="#pacman-拓展用法" class="headerlink" title="pacman 拓展用法"></a>pacman 拓展用法</h3><p>yay虽然可以使用pacman的所有&lt;operation&gt;，但是它远不仅于此。在这一段，我将向你介绍yay中包含的那些pacman不包括的pacman &lt;operation</p><h4 id="S"><a href="#S" class="headerlink" title="-S"></a><code>-S</code></h4><h5 id="S-Si-Sl-Ss-Su-Sc-Qu"><a href="#S-Si-Sl-Ss-Su-Sc-Qu" class="headerlink" title="-S, -Si, -Sl, -Ss, -Su, -Sc, -Qu"></a><code>-S, -Si, -Sl, -Ss, -Su, -Sc, -Qu</code></h5><p>这些操作pacman都支持，而与pacman不同的是，yay的这些操作可以涵盖到<strong>官方源/第三方源和AUR</strong>中的所有包。</p><h4 id="Sc"><a href="#Sc" class="headerlink" title="-Sc"></a><code>-Sc</code></h4><p>yay将会清除AUR包构建时的缓存和没有被track的文件。没有被track的文件在这里指AUR包构建时下载的sources或者构建完成的pkg包，但是vcs sources会被保留（比如.<code>git</code>文件夹）</p><h4 id="全局的-options"><a href="#全局的-options" class="headerlink" title="全局的[options]"></a>全局的[options]</h4><p>全局是指在所有&lt;operation&gt;下都可以加啦。</p><h5 id="repo"><a href="#repo" class="headerlink" title="--repo"></a><code>--repo</code></h5><p>假定你给出的包名只存在源里（忽视AUR的存在）</p><h5 id="a-aur"><a href="#a-aur" class="headerlink" title="-a(--aur)"></a><code>-a(--aur)</code></h5><p>假定你给出的包名只存在AUR中（忽视源的存在）</p><h2 id="配置设置"><a href="#配置设置" class="headerlink" title="配置设置"></a>配置设置</h2><p>原版的man手册排的比较混乱，我这里自己细分了几个类型，或许不是特别专业，但我希望能够帮助你们理解。</p><h3 id="自定义调用命令型"><a href="#自定义调用命令型" class="headerlink" title="自定义调用命令型"></a>自定义调用命令型</h3><h5 id="editor-lt-command-gt"><a href="#editor-lt-command-gt" class="headerlink" title="--editor &lt;command&gt;"></a><code>--editor &lt;command&gt;</code></h5><p>设置编辑时调用的编辑器。</p><h5 id="makepkg-lt-command-gt"><a href="#makepkg-lt-command-gt" class="headerlink" title="--makepkg &lt;command&gt;"></a><code>--makepkg &lt;command&gt;</code></h5><p>设置makepkg时需要调用makepkg命令（一般情况下用不到）</p><h5 id="pacman-lt-command-gt"><a href="#pacman-lt-command-gt" class="headerlink" title="--pacman &lt;command&gt;"></a><code>--pacman &lt;command&gt;</code></h5><p>设置运行pacman时需要调用pacman命令（一般情况下用不到）</p><h5 id="tar-lt-command-gt"><a href="#tar-lt-command-gt" class="headerlink" title="--tar &lt;command&gt;"></a><code>--tar &lt;command&gt;</code></h5><p>设置makepkg解压tar资源时调用的tar命令（一般情况下用不到）</p><h5 id="git-lt-command-gt"><a href="#git-lt-command-gt" class="headerlink" title="--git &lt;command&gt;"></a><code>--git &lt;command&gt;</code></h5><p>设置makepkg clone git资源时调用的git命令（比如你可以安装AUR中的fgit-go，使用<code>--git fgit</code>参数来让fastgit代理clone的过程）</p><h5 id="gpg-lt-command-gt"><a href="#gpg-lt-command-gt" class="headerlink" title="--gpg &lt;command&gt;"></a><code>--gpg &lt;command&gt;</code></h5><p>设置gpg验证资源时调用的gpg命令</p><h5 id="sudo-lt-command-gt"><a href="#sudo-lt-command-gt" class="headerlink" title="--sudo &lt;command&gt;"></a><code>--sudo &lt;command&gt;</code></h5><p>设置调用sudo获取su权限安装pkg时所调用的sudo命令。</p><h3 id="自定义配置文件型"><a href="#自定义配置文件型" class="headerlink" title="自定义配置文件型"></a>自定义配置文件型</h3><h5 id="config-lt-file-gt"><a href="#config-lt-file-gt" class="headerlink" title="--config &lt;file&gt;"></a><code>--config &lt;file&gt;</code></h5><p>设置读取的pacman配置文件。</p><h5 id="makepkgconf-lt-file-gt"><a href="#makepkgconf-lt-file-gt" class="headerlink" title="--makepkgconf &lt;file&gt;"></a><code>--makepkgconf &lt;file&gt;</code></h5><p>设置读取的makepkg配置文件。</p><h5 id="nomakepkgconf"><a href="#nomakepkgconf" class="headerlink" title="--nomakepkgconf"></a><code>--nomakepkgconf</code></h5><p>不读取系统中的makepkg.conf，仅使用Arch默认状态下的配置文件。</p><h3 id="自定义路径类型"><a href="#自定义路径类型" class="headerlink" title="自定义路径类型"></a>自定义路径类型</h3><h5 id="builddir-lt-dir-gt"><a href="#builddir-lt-dir-gt" class="headerlink" title="--builddir &lt;dir&gt;"></a><code>--builddir &lt;dir&gt;</code></h5><p>设置build路径，默认路径为<code>~/.cache/yay/</code></p><h5 id="absdir-lt-dir-gt"><a href="#absdir-lt-dir-gt" class="headerlink" title="--absdir &lt;dir&gt;"></a><code>--absdir &lt;dir&gt;</code></h5><p> 设置abs路径，默认路径为<code>~/.cache/yay/abs/</code></p><h3 id="参数传递型"><a href="#参数传递型" class="headerlink" title="参数传递型"></a>参数传递型</h3><h5 id="editorflags-lt-flags-gt"><a href="#editorflags-lt-flags-gt" class="headerlink" title="--editorflags &lt;flags&gt;"></a><code>--editorflags &lt;flags&gt;</code></h5><p>后跟需要跟随传递给编辑器的参数。如果需要传递多个参数，可以使用引号。</p><h5 id="mflags-lt-flags-gt"><a href="#mflags-lt-flags-gt" class="headerlink" title="--mflags &lt;flags&gt;"></a><code>--mflags &lt;flags&gt;</code></h5><p>后跟需要跟随传递给makepkg的参数。如果需要传递多个参数，可以使用引号。</p><p>这个用的人不多，但其实是非常好用的一个功能。在我们安装<code>deepin-wine-tim</code>等包的时候，很可能会遇到文件明明完整但checksum不通过的情况，这时我们可以跟一个<code>--skipchecksums</code>参数传递给makepkg以跳过checksum的过程。</p><h5 id="gpgflags-lt-flags-gt"><a href="#gpgflags-lt-flags-gt" class="headerlink" title="--gpgflags &lt;flags&gt;"></a><code>--gpgflags &lt;flags&gt;</code></h5><p>后跟需要跟随传递给pgp的参数。如果需要传递多个参数，可以使用引号。</p><h5 id="sudoflags-lt-flags-gt"><a href="#sudoflags-lt-flags-gt" class="headerlink" title="--sudoflags &lt;flags&gt;"></a><code>--sudoflags &lt;flags&gt;</code></h5><p>后跟需要跟随传递给sudo的参数。如果需要传递多个参数，可以使用引号。</p><h3 id="菜单配置型"><a href="#菜单配置型" class="headerlink" title="菜单配置型"></a>菜单配置型</h3><h4 id="clean菜单"><a href="#clean菜单" class="headerlink" title="clean菜单"></a>clean菜单</h4><h5 id="cleanmenu"><a href="#cleanmenu" class="headerlink" title="*--cleanmenu"></a>*<code>--cleanmenu</code></h5><p>启用清除询问菜单。（询问你是否需要清除已存在的文件）</p><h5 id="nocleanmenu"><a href="#nocleanmenu" class="headerlink" title="--nocleanmenu"></a><code>--nocleanmenu</code></h5><p>禁用清除询问菜单。（不询问你是否需要清除已存在的文件）</p><h5 id="answerclean"><a href="#answerclean" class="headerlink" title="--answerclean"></a><code>--answerclean</code></h5><p> 自动回答cleanmenu，后跟<code>&lt;All|None|Installed|NotInstalled&gt;</code>参数。</p><h5 id="noanswerclean"><a href="#noanswerclean" class="headerlink" title="*--noanswerclean"></a>*<code>--noanswerclean</code></h5><p>不设置自动回答。</p><h4 id="diff菜单"><a href="#diff菜单" class="headerlink" title="diff菜单"></a>diff菜单</h4><h5 id="diffmenu"><a href="#diffmenu" class="headerlink" title="*--diffmenu"></a>*<code>--diffmenu</code></h5><p>启用对比询问菜单。（询问你是否需要对比本地文件和AUR文件）</p><h5 id="nodiffmenu"><a href="#nodiffmenu" class="headerlink" title="--nodiffmenu"></a><code>--nodiffmenu</code></h5><p>禁用对比询问菜单。（不询问你是否需要对比本地文件和AUR文件）</p><h5 id="answerdiff"><a href="#answerdiff" class="headerlink" title="--answerdiff"></a><code>--answerdiff</code></h5><p>自动回答cleanmenu，后跟<code>&lt;All|None|Installed|NotInstalled&gt;</code>参数。</p><h5 id="noanswerdiff"><a href="#noanswerdiff" class="headerlink" title="*--noanswerdiff"></a>*<code>--noanswerdiff</code></h5><p>不设置自动回答。</p><h4 id="edit菜单"><a href="#edit菜单" class="headerlink" title="edit菜单"></a>edit菜单</h4><h5 id="editmenu"><a href="#editmenu" class="headerlink" title="--editmenu"></a><code>--editmenu</code></h5><p>启用修改询问菜单。（询问你是否需要修改PKGBUILD以及相关文件）</p><h5 id="noeditmenu"><a href="#noeditmenu" class="headerlink" title="*--noeditmenu"></a>*<code>--noeditmenu</code></h5><p>禁用修改询问菜单。（不询问你是否需要修改PKGBUILD以及相关文件）</p><h5 id="answeredit"><a href="#answeredit" class="headerlink" title="--answeredit"></a><code>--answeredit</code></h5><p>自动回答editmenu，后跟<code>&lt;All|None|Installed|NotInstalled&gt;</code>参数。</p><h5 id="noansweredit"><a href="#noansweredit" class="headerlink" title="*--noansweredit"></a>*<code>--noansweredit</code></h5><p>不设置自动回答。</p><h4 id="upgrade菜单"><a href="#upgrade菜单" class="headerlink" title="upgrade菜单"></a>upgrade菜单</h4><h5 id="upgrademenu"><a href="#upgrademenu" class="headerlink" title="*--upgrademenu"></a>*<code>--upgrademenu</code></h5><p>启用更新询问菜单。（询问你是否需要更新AUR包）</p><h5 id="noupgrademenu"><a href="#noupgrademenu" class="headerlink" title="--noupgrademenu"></a><code>--noupgrademenu</code></h5><p>禁用更新询问菜单。（不询问你是否需要更新AUR包）</p><h5 id="answerupgrade"><a href="#answerupgrade" class="headerlink" title="--answerupgrade"></a><code>--answerupgrade</code></h5><p>自动回答upgrademenu，后跟<code>&lt;All|None|Installed|NotInstalled&gt;</code>参数。</p><h5 id="noanswerupgrade"><a href="#noanswerupgrade" class="headerlink" title="*--noanswerupgrade"></a>*<code>--noanswerupgrade</code></h5><p>不设置自动回答。</p><h4 id="removemake菜单"><a href="#removemake菜单" class="headerlink" title="removemake菜单"></a>removemake菜单</h4><h5 id="askremovemake"><a href="#askremovemake" class="headerlink" title="*--askremovemake"></a>*<code>--askremovemake</code></h5><p>在编译结束后，询问是否删除make depend。</p><h5 id="removemake"><a href="#removemake" class="headerlink" title="--removemake"></a><code>--removemake</code></h5><p>在编译结束后，删除make depend。</p><h5 id="noremovemake"><a href="#noremovemake" class="headerlink" title="--noremovemake"></a><code>--noremovemake</code></h5><p>在编译结束后，不删除make depend。</p><h4 id="provides菜单"><a href="#provides菜单" class="headerlink" title="provides菜单"></a>provides菜单</h4><h5 id="provides"><a href="#provides" class="headerlink" title="*--provides"></a>*<code>--provides</code></h5><p>搜索AUR包时，一同寻找其在AUR上的依赖程序。 当找到多个提供该依赖的包时，将出现一个菜单，提示您选择一个。尽管这不会引起注意，但这会增加依赖项解决时间。</p><h5 id="noprovides"><a href="#noprovides" class="headerlink" title="--noprovides"></a><code>--noprovides</code></h5><p>搜索AUR包时，不在AUR上寻找其依赖程序。尽管yay不会再次弹出依赖菜单供你选择，yay调用pacman时依然会出现pacman的选择菜单让你选择。</p><h4 id="pgpfetch菜单"><a href="#pgpfetch菜单" class="headerlink" title="pgpfetch菜单"></a>pgpfetch菜单</h4><h5 id="pgpfetch"><a href="#pgpfetch" class="headerlink" title="*--pgpfetch"></a>*<code>--pgpfetch</code></h5><p>询问你是否从每个PKGBUILD的validpgpkeys字段导入未知的PGP密钥。</p><h5 id="nopgpfetch"><a href="#nopgpfetch" class="headerlink" title="--nopgpfetch"></a><code>--nopgpfetch</code></h5><p>不自动导入陌生的PGP密钥。</p><h4 id="useask选项"><a href="#useask选项" class="headerlink" title="useask选项"></a>useask选项</h4><h5 id="useask"><a href="#useask" class="headerlink" title="*--useask"></a>*<code>--useask</code></h5><p>调用pacman的–ask询问用户是否删除系统中与当前包冲突的软件包。</p><h5 id="nouseask"><a href="#nouseask" class="headerlink" title="--nouseask"></a><code>--nouseask</code></h5><p>不调用pacman的–ask询问用户是否删除系统中与当前包冲突的软件包，遇到冲突的软件包时直接报错，由用户来手动解决。</p><h4 id="combinedupgrade菜单"><a href="#combinedupgrade菜单" class="headerlink" title="combinedupgrade菜单"></a>combinedupgrade菜单</h4><h5 id="combinedupgrade"><a href="#combinedupgrade" class="headerlink" title="--combinedupgrade"></a><code>--combinedupgrade</code></h5><p>在系统更新期间，将源内包和AUR包的更新菜单合并到一起。</p><h5 id="nocombinedupgrade"><a href="#nocombinedupgrade" class="headerlink" title="*--nocombinedupgrade"></a>*<code>--nocombinedupgrade</code></h5><p>在系统更新期间，先支持源内包的升级，完成后再进行AUR包的升级。</p><h3 id="T-or-F-型"><a href="#T-or-F-型" class="headerlink" title="T or F 型"></a>T or F 型</h3><h4 id="devel"><a href="#devel" class="headerlink" title="devel"></a>devel</h4><h5 id="devel-1"><a href="#devel-1" class="headerlink" title="--devel"></a><code>--devel</code></h5><p>在系统更新期间，检查AUR的vcs包是否有更新，当前仅支持AUR的-git包。 devel查询是使用<code>git ls-remote</code>对比安装时和现在最新的commit_id完成的。</p><h5 id="nodevel"><a href="#nodevel" class="headerlink" title="*--nodevel"></a>*<code>--nodevel</code></h5><p>在系统更新期间， 不检查AUR的vcs包是否有更新。</p><h4 id="timeupdate"><a href="#timeupdate" class="headerlink" title="timeupdate"></a>timeupdate</h4><h5 id="timeupdate-1"><a href="#timeupdate-1" class="headerlink" title="--timeupdate"></a><code>--timeupdate</code></h5><p>在系统更新期间，将已安装软件包的构建时间与每个软件包的AUR的最后修改时间进行比较。</p><h5 id="notimeupdate"><a href="#notimeupdate" class="headerlink" title="*--notimeupdate"></a>*<code>--notimeupdate</code></h5><p>在系统更新期间，不将已安装软件包的构建时间与每个软件包的AUR的最后修改时间进行比较。</p><h4 id="redownload"><a href="#redownload" class="headerlink" title="redownload"></a>redownload</h4><h5 id="redownload-1"><a href="#redownload-1" class="headerlink" title="--redownload"></a><code>--redownload</code></h5><p>就算PKGBUILD已经存在，也要重新从AUR上获取一份新的PKGBUILD并覆盖原有PKGBUILD。</p><h5 id="redownloadall"><a href="#redownloadall" class="headerlink" title="--redownloadall"></a><code>--redownloadall</code></h5><p>就算PKGBUILD已经存在，也要重新从AUR上获取所有AUR包的PKGBUILD并覆盖原有PKGBUILD。</p><h5 id="noredownload"><a href="#noredownload" class="headerlink" title="*--noredownload"></a>*<code>--noredownload</code></h5><p>当下载PKGBUILD时，，如果发现cache中的PKGBUILD版本＞＝AUR上的版本时，直接使用本地的PKGBUILD。</p><h4 id="rebuild"><a href="#rebuild" class="headerlink" title="rebuild"></a>rebuild</h4><h5 id="rebuild-1"><a href="#rebuild-1" class="headerlink" title="--rebuild"></a><code>--rebuild</code></h5><p>即使在cache中有可用的二进制包的情况下，也始终要重新编译目标软件包。</p><h5 id="rebuildall"><a href="#rebuildall" class="headerlink" title="--rebuildall"></a><code>--rebuildall</code></h5><p>即使在cache中有可用的二进制包的情况下，也始终要重新编译所有的AUR包。</p><h5 id="rebuildtree"><a href="#rebuildtree" class="headerlink" title="--rebuildtree"></a><code>--rebuildtree</code></h5><p>安装AUR包时，以递归方式重新编译并重新安装其所有AUR依赖包，即使已安装的依赖项也是如此。 该选项使您可以轻松地针对当前系统的库重新构建软件包，如果它们变得不兼容。（比如python3.8-&gt;3.9）</p><h5 id="norebuild"><a href="#norebuild" class="headerlink" title="*--norebuild"></a>*<code>--norebuild</code></h5><p>构建软件包时，如果在缓存中找到该软件包并且该软件包与想要的软件包的版本相同，则跳过软件包的编译过程并使用现有的二进制程序。</p><h4 id="sudoloop"><a href="#sudoloop" class="headerlink" title="sudoloop"></a>sudoloop</h4><h5 id="sudoloop-1"><a href="#sudoloop-1" class="headerlink" title="--sudoloop"></a><code>--sudoloop</code></h5><p>在后台循环调用sudo，以防止sudo授权在长时间构建期间超时。</p><h5 id="nosudoloop"><a href="#nosudoloop" class="headerlink" title="*--nosudoloop"></a>*<code>--nosudoloop</code></h5><p>不在后台循环调用sudo，可能会导致sudo授权在长时间构建期间超时。</p><h4 id="batchinstall"><a href="#batchinstall" class="headerlink" title="batchinstall"></a>batchinstall</h4><h5 id="batchinstall-1"><a href="#batchinstall-1" class="headerlink" title="--batchinstall"></a><code>--batchinstall</code></h5><p>在构建和安装AUR包时，对每个软件包的安装进行排序，而并非在构建之后立刻安装每个软件包时。 需要注意的是，一旦构建了所有软件包，或者需要构建队列中的软件包作为构建另一个软件包的依赖项，应当在安装队列中安装所有软件包。</p><h5 id="nobatchinstall"><a href="#nobatchinstall" class="headerlink" title="*--nobatchinstall"></a>*<code>--nobatchinstall</code></h5><p>在构建AUR包成功后立即安装。</p><h4 id="clearafter"><a href="#clearafter" class="headerlink" title="clearafter"></a>clearafter</h4><h5 id="cleanafter"><a href="#cleanafter" class="headerlink" title="--cleanafter"></a><code>--cleanafter</code></h5><p>在构建AUR包完成以后清除cache文件。</p><h5 id="nocleanafter"><a href="#nocleanafter" class="headerlink" title="*--nocleanafter"></a>*<code>--nocleanafter</code></h5><p>在构建AUR包完成以后不清除cache文件。</p><h3 id="其他型"><a href="#其他型" class="headerlink" title="其他型"></a>其他型</h3><h5 id="save"><a href="#save" class="headerlink" title="--save"></a><code>--save</code></h5><p>把你这一次执行yay后面跟的配置参数永久保存下来。</p><h5 id="aururl"><a href="#aururl" class="headerlink" title="--aururl"></a><code>--aururl</code></h5><p>更改aur源地址（默认为 <a href="https://aur.archlinux.org/">https://aur.archlinux.org</a> ），<del>适用于中国用户，可以使用此参数将AUR的地址设置成清华的反代，具体的配置命令为</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay --aururl <span class="hljs-string">&quot;https://aur.tuna.tsinghua.edu.cn&quot;</span> --save<br></code></pre></td></tr></table></figure><p>TUNA 的反代已经取消，可以使用如下命令设置回 AUR 官方源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay --aururl <span class="hljs-string">&quot;https://aur.archlinux.org&quot;</span> --save<br></code></pre></td></tr></table></figure><h5 id="sortby"><a href="#sortby" class="headerlink" title="--sortby"></a><code>--sortby</code></h5><p>在搜索过程中，按特定条件对AUR结果进行排序，后跟<code>&lt;votes|popularity|id|baseid|name|base|submitted|modified</code>参数，默认为<code>votes</code>。</p><h5 id="searchby"><a href="#searchby" class="headerlink" title="--searchby"></a><code>--searchby</code></h5><p>通过指定查询类型来搜索AUR软件包，后跟<code>&lt;name|name-desc|maintainer|depends|checkdepends|makedepends|optdepends</code>参数，默认为<code>name-desc</code>。</p><h5 id="topdown"><a href="#topdown" class="headerlink" title="*--topdown"></a>*<code>--topdown</code></h5><p>优先展示源内包，其次才是AUR包</p><h5 id="bottomup"><a href="#bottomup" class="headerlink" title="--bottomup"></a><code>--bottomup</code></h5><p>优先展示AUR包，其次才是源内包</p><h5 id="requestsplitn-lt-number-gt"><a href="#requestsplitn-lt-number-gt" class="headerlink" title="--requestsplitn &lt;number&gt;"></a><code>--requestsplitn &lt;number&gt;</code></h5><p>设置在每次向AUR的请求的最大数值（默认150）。数值越高，请求时间越短，但是单次请求的数值过大会导致error。当这个数值＞500时你应当特别注意这一点。</p><h5 id="completioninterval-lt-days-gt"><a href="#completioninterval-lt-days-gt" class="headerlink" title="--completioninterval &lt;days&gt;"></a><code>--completioninterval &lt;days&gt;</code></h5><p>刷新完成高速缓存的时间（以天为单位,默认为7）。 将此值设置为0将导致每次刷新缓存，而将其设置为-1将导致永远不刷新缓存。</p><h2 id="我个人的常用命令"><a href="#我个人的常用命令" class="headerlink" title="我个人的常用命令"></a>我个人的常用命令</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yay</span><br><span class="hljs-attribute">yay foo</span><br><span class="hljs-attribute">yay -Sa foo</span><br><span class="hljs-attribute">yay -Scc</span><br><span class="hljs-attribute">yay -Ps</span><br><span class="hljs-attribute">yay -Pww</span><br><span class="hljs-attribute">yay -Gpa</span><br><span class="hljs-attribute">yay -Ga</span><br></code></pre></td></tr></table></figure><p><em>本文同时发布于「<a href="https://zhuanlan.zhihu.com/p/363666022">知乎专栏</a>」，如果你恰好有知乎帐号的话或许可以考虑帮我点个赞？</em></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>抛弃DisplayManager，拥抱startx</title>
    <link href="https://zhul.in/2021/03/14/lets-fuck-dm-and-use-startx/"/>
    <id>https://zhul.in/2021/03/14/lets-fuck-dm-and-use-startx/</id>
    <published>2021-03-13T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在正常情况下，我们会给Linux装上一个DisplayManager以方便我们输入账号密码来进入图形化系统，但是我不想要额外装一个DM来启动我的图形化系统（而且之前我一直用的sddm也出过一小阵子的问题）</p><p>首先卸载我的sddm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -Rsnc sddm sddm-kcm<br></code></pre></td></tr></table></figure><p>安装startx所在的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S xorg-xinit<br></code></pre></td></tr></table></figure><p>从/etc/X11/xinit/xinitrc拷贝一份.xinitrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /etc/X11/xinit/xinitrc ~/.xinitrc<br></code></pre></td></tr></table></figure><p>注释掉最后5行</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">#twm &amp;<br>#xclock -geometry 50x50<span class="hljs-string">-1</span><span class="hljs-string">+1</span> &amp;<br>#xterm -geometry 80x50<span class="hljs-string">+494</span><span class="hljs-string">+51</span> &amp;<br>#xterm -geometry 80x20<span class="hljs-string">+494</span><span class="hljs-string">-0</span> &amp;<br>#exec xterm -geometry 80x66<span class="hljs-string">+0</span><span class="hljs-string">+0</span> -name login<br></code></pre></td></tr></table></figure><p>然后需要在结尾处写上我们的配置。我用的桌面是Plasma，查询<a href="https://wiki.archlinux.org/index.php/KDE#From_the_console">wiki</a></p><blockquote><p>To start Plasma with xinit/startx, append export DESKTOP_SESSION=plasma and exec startplasma-x11 to your .xinitrc file. If you want to start Xorg at login, please see Start X at login.</p></blockquote><p>然后在xinitrx文件末尾处写上我们的配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">DESKTOP_SESSION</span>=plasma<br>startplasma-x11<br></code></pre></td></tr></table></figure><p>Ps: 在第二行中，wiki中让我们使用exec，代表当xorg桌面会话结束后自动退出当前用户，而我不想退出，所以没加</p><p>至此，我们的startx就已经配置完成了，重启后只需要在tty界面登录用户后输入<code>startx</code>并回车即可进入图形化界面。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>竹林源</title>
    <link href="https://zhul.in/2021/03/12/arch-source/"/>
    <id>https://zhul.in/2021/03/12/arch-source/</id>
    <published>2021-03-11T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无力维护，现已将-arch-zhullyb-top-和-mirror-zhullyb-top-的所有请求分别转发到-Clansty-维护的-repo-lwqwq-com-和-pacman-ltd-，如果您凑巧看到本消息，建议立即访问-pacman-ltd-并按照其要求修改源配置文件。"><a href="#无力维护，现已将-arch-zhullyb-top-和-mirror-zhullyb-top-的所有请求分别转发到-Clansty-维护的-repo-lwqwq-com-和-pacman-ltd-，如果您凑巧看到本消息，建议立即访问-pacman-ltd-并按照其要求修改源配置文件。" class="headerlink" title="无力维护，现已将 arch.zhullyb.top 和 mirror.zhullyb.top 的所有请求分别转发到 Clansty 维护的 repo.lwqwq.com 和 pacman.ltd ，如果您凑巧看到本消息，建议立即访问 pacman.ltd 并按照其要求修改源配置文件。"></a>无力维护，现已将 <code>arch.zhullyb.top</code> 和 <code>mirror.zhullyb.top</code> 的所有请求分别转发到 <a href="https://lwqwq.com/about">Clansty</a> 维护的 <code>repo.lwqwq.com</code> 和 <code>pacman.ltd</code> ，如果您凑巧看到本消息，建议立即访问 <a href="https://pacman.ltd/">pacman.ltd</a> 并按照其要求修改源配置文件。</h1><h2 id="Hello，这里是竹林里有冰的私人源。"><a href="#Hello，这里是竹林里有冰的私人源。" class="headerlink" title="Hello，这里是竹林里有冰的私人源。"></a><del>Hello，这里是竹林里有冰的私人源。</del></h2><blockquote><p><del>其实Archlinux已经有了一个打包了各种常用软件的第三方源叫archlinuxcn，国内拥有多个镜像站为其提供镜像服务。但是他们作为一个开源社区，显然会受到许多限制，诸如不能收录未经授权的商业软件等。目前已经有多个软件因为没有得到授权而不得不下架，详见 <a href="https://github.com/archlinuxcn/repo/issues/1968">#1968</a>、<a href="https://github.com/archlinuxcn/repo/issues/2455">#2455</a>、<a href="https://github.com/archlinuxcn/repo/issues/2458">#2458</a>、<a href="https://github.com/archlinuxcn/repo/issues/2460">#2460</a>、<a href="https://github.com/archlinuxcn/repo/issues/2462">#2462</a>。因此我创建了这样一个方便我自己使用的源。</del></p></blockquote><p><del>主要收集了一些<strong>侵权软件、闭源软件、不清真的软件</strong>，目前主要是作为archlinuxcn源的补充。</del></p><p><del>目前源在OneDrive上，采用<a href="https://github.com/qkqpttgf/OneManager-php">onemanager</a>解析直链，速度取决于各位的网络供应商。</del></p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a><del>使用方法：</del></h4><p><del>在 <code>/etc/pacman.conf</code> 尾部添加</del></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[zhullyb]</span><br><span class="hljs-attr">SigLevel</span> = Never<br><span class="hljs-attr">Server</span> = https://mirror.zhullyb.top<br><span class="hljs-attr">Server</span> = https://arch.zhullyb.top<br></code></pre></td></tr></table></figure><blockquote><p><del>注，我这里将SigLevel指定为Never，是因为我认为我一个辣鸡的个人源没有必要验证keyring，况且由于OneDrive的直链解析会带来较高的延迟，再额外下载一个sig文件将会极大地破坏体验。</del></p></blockquote><p><del>如果你坚持要验证，我这里也提供了<code>zhullyb-keyring</code>，请自行下载以后使用<code>pacman -U</code>进行安装。此外，由于<code>pacman</code>会通过拼接db跳转的链接来下载sig签名，会导致onedrive返回的报错信息被pacman误认为sig文件，这里可以使用由<a href="https://web-worker.cn/">web-worker.cn</a>站长提供的反代，使pacman尝试下载sig文件时接收到404状态码来跳过对db的验证。</del></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Server = https:<span class="hljs-regexp">//</span>pkg.web-worker.cn<span class="hljs-regexp">/zhullyb/</span><br></code></pre></td></tr></table></figure><h4 id="现有软件列表"><a href="#现有软件列表" class="headerlink" title="现有软件列表"></a><del><strong>现有软件列表</strong></del></h4><table><thead><tr><th align="left">Removed.</th></tr></thead></table>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
  </entry>
  
  <entry>
    <title>FireFox? IceDoge!!!</title>
    <link href="https://zhul.in/2021/02/27/change-your-firefox-icon-into-a-bluedoge/"/>
    <id>https://zhul.in/2021/02/27/change-your-firefox-icon-into-a-bluedoge/</id>
    <published>2021-02-26T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>事情的起因是这样的。</p><blockquote><p>Solidot</p><p><strong><a href="https://www.solidot.org/story?sid=67051">Mozilla 强调 Firefox 的 logo 仍然包含小狐狸 </a> 2021-02-27 20:02</strong></p><p>#Firefox 过去几天一个广泛流传的 meme 宣称，Firefox 著名的红色小狐狸 logo 正被逐渐简化直至消失。Mozilla 官方博客<a href="https://blog.mozilla.org/firefox/the-fox-is-still-in-the-firefox-logo/">对此做出了回应</a>，强调 Firefox 的 logo 将会始终包含小狐狸，他们没有消除狐狸的计划。作为反击这一 meme 行动的一部分，Mozilla 修改了<a href="https://www.mozilla.org/en-US/firefox/nightly/firstrun/">Firefox Nightly</a> 的 logo，将著名的网络 meme 狗币中的柴犬图像与红色小狐狸 logo 整合在一起。如果你下载安装 Nightly 版本，你会看到狗狗在看着你。</p></blockquote><p>这只狗是非常可爱，大概是长下图这个样子。</p><p><img src="https://www.mozilla.org/media/img/logos/firefox/logo-nightdoge-lg-high-res.14f40a7985fe.png" alt="非常可爱对吧"></p><p>但是我是一个将Firefox当成主浏览器的用户，咱不可能去用Nightly，所以我就打算把我这里这只稳定版的红色小狐狸<img src="https://www.mozilla.org/media/protocol/img/logos/firefox/browser/logo-lg-high-res.fbc7ffbb50fd.png" alt="这只我都看烦了的小狐狸"></p><p>换成上面的那只狗。</p><p>通过直接写入用户目录下的icon可以在不覆盖浏览器原图标、不给包管理器惹麻烦的情况下实现我们的目标，所以，代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#/usr/bin/sh</span><br><br><span class="hljs-comment"># This script will change icon of you Firefox Browser into a bluedoge</span><br><span class="hljs-comment"># Depend on imagemagick</span><br><br><span class="hljs-built_in">cd</span> ~<br>curl https://www.mozilla.org/media/img/logos/firefox/logo-nightdoge-lg-high-res.14f40a7985fe.png &gt; logo-nightdoge-lg-high-res.14f40a7985fe.png<br><br><span class="hljs-keyword">for</span> _resolution <span class="hljs-keyword">in</span> 16 22 24 32 48 64 128 192 256 384<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">mkdir</span> -p ~/.local/share/icons/hicolor/<span class="hljs-variable">$&#123;_resolution&#125;</span>x<span class="hljs-variable">$&#123;_resolution&#125;</span>/apps/<br>    convert -resize <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;_resolution&#125;</span>x<span class="hljs-variable">$&#123;_resolution&#125;</span>&quot;</span> <span class="hljs-string">&quot;logo-nightdoge-lg-high-res.14f40a7985fe.png&quot;</span> <span class="hljs-string">&quot;firefox<span class="hljs-variable">$&#123;_resolution&#125;</span>.png&quot;</span><br>    <span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;firefox<span class="hljs-variable">$&#123;_resolution&#125;</span>.png&quot;</span> ~/.local/share/icons/hicolor/<span class="hljs-variable">$&#123;_resolution&#125;</span>x<span class="hljs-variable">$&#123;_resolution&#125;</span>/apps/firefox.png<br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">rm</span> logo-nightdoge-lg-high-res.14f40a7985fe.png<br><br><span class="hljs-comment"># If you want to change back your icons, run the command bellow</span><br><span class="hljs-comment"># rm ~/.local/share/icons/hicolor/*/apps/firefox.png</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Fun" scheme="https://zhul.in/tags/Fun/"/>
    
  </entry>
  
  <entry>
    <title>在Archlinux上解包A/B机型的payload.bin</title>
    <link href="https://zhul.in/2021/02/07/extract-payload-dot-bin-on-archlinux/"/>
    <id>https://zhul.in/2021/02/07/extract-payload-dot-bin-on-archlinux/</id>
    <published>2021-02-06T16:00:00.000Z</published>
    <updated>2021-10-13T13:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>解包A/B机型的OTA更新包时，会发现zip文件中只有一个payload.bin文件</p><p>解包这个文件，我们需要用到这个叫<a href="https://github.com/vm03/payload_dumper/blob/master/payload_dumper.py">payload_dumper</a>的python脚本，同时需要安装依赖: <code>community/python-google-api-core</code>和<code>python-bsdiff4</code>，我解包的时候发现缺少python3版本的python-bsdiff4，因此已经打包上传至<a href="aur.archlinux.org/packages/python-bsdiff4">AUR</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/vm03/payload_dumper.git<br><span class="hljs-built_in">cd</span> payload_dumper<br><span class="hljs-built_in">mv</span> path/to/payload.bin payload_dumper<br>python payload_dumper.py payload.bin<br></code></pre></td></tr></table></figure><p>然后就可以在该项目文件夹的output路径下找到解包后的img镜像</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Android" scheme="https://zhul.in/tags/Android/"/>
    
    <category term="Rom编译" scheme="https://zhul.in/tags/Rom%E7%BC%96%E8%AF%91/"/>
    
    <category term="Archlinux" scheme="https://zhul.in/tags/Archlinux/"/>
    
    <category term="Python" scheme="https://zhul.in/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何解决adb未授权的问题</title>
    <link href="https://zhul.in/2021/01/25/how-to-solve-the-adb-devices-unauthorized-problem/"/>
    <id>https://zhul.in/2021/01/25/how-to-solve-the-adb-devices-unauthorized-problem/</id>
    <published>2021-01-24T16:00:00.000Z</published>
    <updated>2021-10-13T13:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在调试安卓设备的时候，我们经常会遇到adb未授权的问题，本方案适用于未开机时遇到以下两种情况。</p><ol><li><p>当我们编译eng的时候，adb应该会默认授权所有设备，但是有部分Rom并不会。</p></li><li><p>当我们编译userdebug的时候，adb就不会授权给所有设备了，如果卡开机，使用adb抓取log将会是非常麻烦的事情。</p></li></ol><p>此时我们需要手动导入我们的adbkey</p><ol><li><p>手机重启到Recovery模式</p></li><li><p>找到你电脑的adbkey公钥，一般叫做<code>adbkey.pub</code></p></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb push <span class="hljs-variable">$&#123;the/location/to/your/key&#125;</span> /data/misc/adb/adb_keys<br></code></pre></td></tr></table></figure><p>比如我就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb push ~/.android/adbkey.pub /data/misc/adb/adb_keys<br></code></pre></td></tr></table></figure></li><li><p>重启手机，<del>愉快</del>苦逼地去抓log</p></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Android" scheme="https://zhul.in/tags/Android/"/>
    
    <category term="Rom编译" scheme="https://zhul.in/tags/Rom%E7%BC%96%E8%AF%91/"/>
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>虚拟Python环境</title>
    <link href="https://zhul.in/2021/01/20/python-virtualenv/"/>
    <id>https://zhul.in/2021/01/20/python-virtualenv/</id>
    <published>2021-01-19T16:00:00.000Z</published>
    <updated>2021-10-13T13:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在python使用中，我们经常会遇到本地默认python版本与程序所需要的python版本不一致的问题，此时我们需要创建一个虚拟的python环境。</p><h2 id="安装目标python版本"><a href="#安装目标python版本" class="headerlink" title="安装目标python版本"></a>安装目标python版本</h2><h3 id="Ubuntu系"><a href="#Ubuntu系" class="headerlink" title="Ubuntu系"></a>Ubuntu系</h3><h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><p>参考<a href="https://www.cnblogs.com/m3721w/articles/10344887.html">https://www.cnblogs.com/m3721w/articles/10344887.html</a></p><h4 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt isntall python-pip<span class="hljs-comment">#python2</span><br>sudo apt isntall python3-pip<span class="hljs-comment">#python3</span><br></code></pre></td></tr></table></figure><h3 id="Archlinux"><a href="#Archlinux" class="headerlink" title="Archlinux"></a>Archlinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S python【xx】<span class="hljs-comment">#如yay -S python38</span><br></code></pre></td></tr></table></figure><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><h4 id="主程序-1"><a href="#主程序-1" class="headerlink" title="主程序:"></a>主程序:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://www.python.org/ftp/python/【x.x.x】/Python-【x.x.x】.tgz<br>tar xzvf Python-【x.x.x】.tgz<br><span class="hljs-built_in">cd</span> Python-x.x.x<br>./configure<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h4 id="pip-1"><a href="#pip-1" class="headerlink" title="pip"></a>pip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py<br>sudo python【x.x】 get-pip.py -i  https://mirrors.bfsu.edu.cn/pypi/web/simple<br>pip config <span class="hljs-built_in">set</span> global.index-url https://mirrors.bfsu.edu.cn/pypi/web/simple<span class="hljs-comment">#换源</span><br></code></pre></td></tr></table></figure><h2 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h2><h3 id="常规发行版"><a href="#常规发行版" class="headerlink" title="常规发行版"></a>常规发行版</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install virtualenv<span class="hljs-comment">#python2</span><br>pip3 install virtualenv<span class="hljs-comment">#python3</span><br></code></pre></td></tr></table></figure><h3 id="Archlinux-1"><a href="#Archlinux-1" class="headerlink" title="Archlinux"></a>Archlinux</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> pacman -S python2-virtualenv<span class="hljs-comment">#python2</span><br>sudo pacman -S python-virtualenv<span class="hljs-comment">#python3</span><br></code></pre></td></tr></table></figure><h2 id="使用virtualenv"><a href="#使用virtualenv" class="headerlink" title="使用virtualenv"></a>使用virtualenv</h2><h3 id="创建virtualenv环境"><a href="#创建virtualenv环境" class="headerlink" title="创建virtualenv环境"></a>创建virtualenv环境</h3><h4 id="常规发行版-1"><a href="#常规发行版-1" class="headerlink" title="常规发行版"></a>常规发行版</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virtualenv $(TRAGET_PATH) python=python【x.x】<br></code></pre></td></tr></table></figure><h4 id="Archlinux-2"><a href="#Archlinux-2" class="headerlink" title="Archlinux"></a>Archlinux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">virtualenv2 $(TRAGET_PATH) python=python2.【x】<span class="hljs-comment">#python2</span><br>virtualenv $(TRAGET_PATH) python=python3.【x】<span class="hljs-comment">#python3</span><br></code></pre></td></tr></table></figure><h3 id="启用virtualenv环境"><a href="#启用virtualenv环境" class="headerlink" title="启用virtualenv环境"></a>启用virtualenv环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> $(TARGET_PATH)/bin/activate<br></code></pre></td></tr></table></figure><h3 id="退出virtualenv环境"><a href="#退出virtualenv环境" class="headerlink" title="退出virtualenv环境"></a>退出virtualenv环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deactivate<br></code></pre></td></tr></table></figure><h3 id="删除virtualenv环境"><a href="#删除virtualenv环境" class="headerlink" title="删除virtualenv环境"></a>删除virtualenv环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf $(TRAGET_PATH)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Rom编译" scheme="https://zhul.in/tags/Rom%E7%BC%96%E8%AF%91/"/>
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="Python" scheme="https://zhul.in/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>为什么我不推荐Manjaro</title>
    <link href="https://zhul.in/2021/01/01/Why-I-dont-recommend-Manjaro/"/>
    <id>https://zhul.in/2021/01/01/Why-I-dont-recommend-Manjaro/</id>
    <published>2020-12-31T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>说起Linux发行版，很多人都会去推荐Manjaro给新手使用，原因很简单——安装简单、有庞大的AUR和ArchlinuxCN提供软件、有丰富的ArchWiki以供新手查阅。那么，为什么大多数Archlinux用户（包括我）始终不推荐Manjaro作为自己使用的发行版呢。</p><hr><h3 id="首先来了解一下两款Linux发行版"><a href="#首先来了解一下两款Linux发行版" class="headerlink" title="首先来了解一下两款Linux发行版"></a>首先来了解一下两款Linux发行版</h3><p><strong>Archlinux</strong></p><p>Archlinux是一款滚动发行版，所有的软件全部都基于上游最新的源代码进行编译，源内也仅仅保留最新版本，是最为激进的发行版之一，甚至或许没有之一。</p><p><strong>Manjaro</strong></p><p>Manjaro是一款基于Archlinux的滚动发行版，部分软件同样基于上游源代码编译，同时也有部分软件包直接从Archlinux源内直接拿二进制包。与Archlinux不同的是，Manjaro大部分软件更新相比Archlinux会滞后一个星期，一些比较重要的软件甚至会滞后两个星期以上（比如Python3.9就滞后了19天）以保证稳定性。（虽然我目前观察下来这个稳定性就是出现Bug和修复Bug都比Archlinux慢一个礼拜）</p><hr><h3 id="接下来就是正文"><a href="#接下来就是正文" class="headerlink" title="接下来就是正文"></a>接下来就是正文</h3><h4 id="Archlinux-和-Manjaro-都不适合Linux小白"><a href="#Archlinux-和-Manjaro-都不适合Linux小白" class="headerlink" title="Archlinux 和 Manjaro 都不适合Linux小白"></a>Archlinux 和 Manjaro 都不适合Linux小白</h4><p>Archlinux和Manjaro都是激进的滚动发行版，作为一个滚动发行版都会有滚坏的风险，这就要求用户有一定的Linux使用基础，能够多关注更新动态，在系统罢工后有修复系统的能力，因此我不会给小白推荐Archlinux/Manjaro这样的发行版（虽说能够用纯cli界面安装Archlinux的用户其实已经有一定的水平了）。</p><h4 id="ArchWiki-不是-ManjaroWiki"><a href="#ArchWiki-不是-ManjaroWiki" class="headerlink" title="ArchWiki 不是 ManjaroWiki"></a>ArchWiki 不是 ManjaroWiki</h4><p>Manjaro官方为了最大限度地降低用户的使用门槛，为用户打造了一套开箱即用的环境，这听起来很好。</p><p>但是Manjaro官方为了降低用户使用门槛，不得不替用户去做一些选择，写上一些默认配置，在必要的地方对系统进行魔改。因此，ArchWiki上面的解决方案并非在Manjaro上能够100%适用，因此不要指望在系统使用过程中ArchWiki能够解决你所有的问题，有相当一部分问题你需要去查阅纯英文版的ManjaroWiki。</p><h4 id="AUR-Archlinux-User-Repository-amp-ArchlinuxCN-并不是为-Manjaro-准备的"><a href="#AUR-Archlinux-User-Repository-amp-ArchlinuxCN-并不是为-Manjaro-准备的" class="headerlink" title="AUR(Archlinux User Repository)&amp;ArchlinuxCN 并不是为 Manjaro 准备的"></a>AUR(Archlinux User Repository)&amp;ArchlinuxCN 并不是为 Manjaro 准备的</h4><p>AUR和ArchlinuxCN源都是Archlinux用户为Archlinux打包的常用软件，因此所有的软件都是选择Archlinux最新的软件作为依赖来编译/打包的。上文中我们提到过，Manjaro源内的软件会滞后更新。因此AUR和ArchlinuxCN内一些对于依赖版本要求比较苛刻的软件会在Manjaro这个更新比较落后的发行版上不工作。</p><p><img src="https://bu.dusays.com/2022/08/10/62f36d8eb724a.png" alt="我们甚至还有一张表情包来调侃这种情况的"></p><p>我知道这听起来会有些荒唐，不过我可以举出一个就发生在不久之前的生动的例子。</p><p>Archlinux在2020年10月17日将grpc从1.30更新到了1.32，qv2ray开发者反应迅速，在几个小时内直接更新了基于grpc-1.32的qv2ray，接着是仍然在使用grpc-1.30的Manjaro用户的一片哀嚎。。。</p><p>解决方法有很多，比如临时使用Archlinux源把grpc更新到1.32、通过AppImage安装qv2ray等等，但是如你所见，Manjaro用户使用AUR&amp;ArchlinuxCN确实容易出现问题。</p><blockquote><p>附：AUR上需要下载源码的自己编译的包不会碰到依赖的版本问题，但是仍然有部分情况下PKGBUILD会直接因为依赖版本号被写死而编译出错。而ArchlinuxCN清一色是编译好的二进制包，所以Manjaro用户使用ArchlinuxCN相比AUR出问题的几率更加大一点。</p></blockquote><p>此外，他们延迟两周，并不是在测试 Arch 包打包本身的质量，而是在测试他们拿来 Arch 的包和他们自己乱改的核心包之间的兼容性。以下内容来自于一位 Archlinux Trusted User</p><blockquote><p>manjaro 這個分三個 channel 延遲兩週的做法，原因出於兩點他們處理打包方面非常存疑的做法</p><ol><li>他們想要自己打包一部分非常核心的包，包括 glibc 內核 驅動 systemd</li><li>他們不想重新打整個發行版所有包，想直接從 Arch 拿二進制來用。</li></ol><p>這兩個做法單獨只做一個沒啥事，放一起做就很容易導致他們自己打包的核心包破壞了二進制兼容，以至於他們從 Arch 拿的二進制包壞掉。所以他們延遲兩週，並不是在測試 Arch 包打包本身的質量，而是在測試他們拿來 Arch 的包和他們自己亂改的核心包之間的兼容性。Arch 本身有一套機制保證 Arch 打包放出來的時候是測試好相互兼容的，被他們替換掉幾個核心包之後就不一定兼容了，他們也沒有渠道涉足 Arch 內部打包機制，從 Arch 組織內部了解什麼時候放出包之類的信息。綜合這些情況，對他們來說合理的做法就是延遲一陣子讓他們自己的人測試一下。</p><p>所以作為證據你看他們的打包者開發者很少會向 Arch 上游反饋測試打包遇到的問題…因為 manjaro unstable 和 manjaro testing 會遇到的問題大部分都是他們自己造成的問題而不是 Arch 的問題。</p><p>要是他們誠實地把這個情況傳達給他們用戶的話我不責怪他們。Arch整個滾動發布的生態也不利於下游發行版。Debian 這種上游打包時可以約定版本兼容性的範圍，可以鎖 abi ，Arch 打包本身就不考慮這些，作為Arch下游就的確很難操作。我反感 manjaro 的點在於他們把這種難看的做法宣傳成他們的優勢，還為了這個看起來是優勢故意去抹黑 Arch 作為上游的打包質量…做法就很難看了。</p><p>—— farseerfc</p></blockquote><h4 id="Manjaro-没有-Archive-源"><a href="#Manjaro-没有-Archive-源" class="headerlink" title="Manjaro 没有 Archive 源"></a>Manjaro 没有 Archive 源</h4><p>Archlinux拥有一个<a href="https://archive.archlinux.org/">archive源</a>，通过Archive源，你可以将你的系统滚到任何一天的状态，比如在你不知道更新了什么滚炸了以后，你可以用Archive源回滚到三天前的状态，等bug修复完以后再用回正常的Archlinux源。况且，这个Archive源在国内拥有<a href="https://arch-archive.tuna.tsinghua.edu.cn/">tuna</a>和<a href="https://mirrors.bfsu.edu.cn/archlinux-archive/">bfsu</a>两个镜像源（虽然这两个镜像源并不是完整的镜像，而是每隔7天镜像一次），不会存在访问速度过慢的状况。有名的downgrade软件也是基于Archive源使用的。而Manjaro？很遗憾，没有。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>如果你有一定的Linux基础，阅读了我上面的科普以后仍然要去使用Manjaro也没有关系，但是记得<strong>遵守以下几点以确保你在Arch社区不会被打死</strong>。</p><ul><li>谨慎使用AUR和ArchlinuxCN</li><li>使用AUR和ArchlinuxCN时遇到问题请不要反馈</li><li>在Arch社区提问时请<strong>提前</strong>说明自己在使用Manjaro</li><li>不要根据Manjaro的使用经验随意编辑ArchWiki</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>UOS到底有没有Secure Boot签名/UOS引导怎么修复</title>
    <link href="https://zhul.in/2020/12/22/Did-UOS-have-Secure-Boot-Signature/"/>
    <id>https://zhul.in/2020/12/22/Did-UOS-have-Secure-Boot-Signature/</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2022-08-22T15:29:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容来自2020年12月22日晚上的大佬对话，非本人原创。</p><p><strong>吃瓜群众:</strong></p><blockquote><p>话说UOS到底有没有Secure boot签名啊</p></blockquote><p><strong>某dalao:</strong></p><blockquote><p>用的是ubuntu的</p></blockquote><p><strong>吃瓜群众:</strong></p><blockquote><p>哪来的签名？</p></blockquote><p><strong>某dalao:</strong></p><blockquote><p>这就不得不讲到另一个槽点了s</p></blockquote><p><strong>吃瓜群众:</strong></p><blockquote><p>ubuntu给他们签？</p></blockquote><p><strong>某dalao:</strong></p><blockquote><p>不不不，用的是ubuntu签好名的那个binary</p><p>然后ubuntu的那个binary会在EFI分区的ubuntu目录找配置</p><p>于是他们在安装器里写了个逻辑</p><p>把deepin目录的内容复制一份到ubuntu目录</p><p>（而不是patch grub包，或者写在grub包的postinst之类的地方）</p><p>后果是用户只要搞坏了引导</p><p>用网上任何教程都恢复不了</p><p>因为没人会教你建一个ubuntu目录，然后把deepin目录的内容复制进去）</p><p>如果不做这一步，任你怎么grub-install啊，update-grub啊，引导就还是坏的</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="大佬对话笔记" scheme="https://zhul.in/tags/%E5%A4%A7%E4%BD%AC%E5%AF%B9%E8%AF%9D%E7%AC%94%E8%AE%B0/"/>
    
    <category term="deepin" scheme="https://zhul.in/tags/deepin/"/>
    
  </entry>
  
  <entry>
    <title>Rom自身bug反馈须知</title>
    <link href="https://zhul.in/2020/12/19/Before-Report-A-Rom-Issue/"/>
    <id>https://zhul.in/2020/12/19/Before-Report-A-Rom-Issue/</id>
    <published>2020-12-18T16:00:00.000Z</published>
    <updated>2021-10-13T13:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>学业繁忙，不便花太多时间在接收问题的反馈上，特制定此须知。须知非常繁杂，一来是为了尽可能多的获得问题的信息，同时便于我归类，二来是为了提升你们的反馈成本以过滤低级问题。</p><p>本须知仅针对Rom自身的bug反馈，对于其他奇奇怪怪的问题(比如下载链接挂了一类的)可以直接评论反馈。无法开机等一类bug就用不着反馈了，我发布的每一个版本都经过我亲自测试，出现此类问题就是你自己的操作问题。</p><p>以下是正文</p><ol><li><p>仅接受邮箱反馈 <a href="mailto:&#x7a;&#x68;&#x75;&#108;&#x6c;&#x79;&#98;&#64;&#x6f;&#x75;&#116;&#x6c;&#111;&#x6f;&#x6b;&#46;&#99;&#111;&#109;">&#x7a;&#x68;&#x75;&#108;&#x6c;&#x79;&#98;&#64;&#x6f;&#x75;&#116;&#x6c;&#111;&#x6f;&#x6b;&#46;&#99;&#111;&#109;</a></p></li><li><p>请在默认Kernel，卸载所有模块，删除所有调度，卸载所有奇奇怪怪的软件(比如黑阈或者Thanos)的情况下进行反馈，具体原因请看<a href="../../../../2020/11/13/RomFlash_Q&A/#%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%BA%E8%B0%83%E5%8F%8D%E9%A6%88%E9%97%AE%E9%A2%98%E6%97%B6%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E4%BF%AE%E6%94%B9">这里</a></p></li><li><p>仅接受Rom最新版本的问题反馈</p></li><li><p>进行反馈时请注明自己的Gapps版本(如系统内置、X月X日的XXXGapps等等)</p></li><li><p>请注明bug的具体表现，以及复现方法，如有可能附上log</p></li><li><p>偶然性bug请不要反馈，除非你能够抓到当时的log</p></li><li><p>log请以附件的形式发送，文件名请改为202XXXXX+酷安用户名的形式，文件名后缀为.log，如: 20201231竹林里有冰.log</p></li></ol><p>以上没有做到的，我会立刻拉黑。当然，我会允许你继续查看我的动态，因为拉黑你的目的只是为了防止我的时间再被你浪费而不是为了对你进行报复。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Rom" scheme="https://zhul.in/tags/Rom/"/>
    
  </entry>
  
  <entry>
    <title>No Hello</title>
    <link href="https://zhul.in/2020/10/08/NoHello/"/>
    <id>https://zhul.in/2020/10/08/NoHello/</id>
    <published>2020-10-07T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Don’t Just Say “Hello” in Chat.</p><h2 id="别在向别人问问题的时候问“在吗？”"><a href="#别在向别人问问题的时候问“在吗？”" class="headerlink" title="别在向别人问问题的时候问“在吗？”"></a>别在向别人问问题的时候问“在吗？”</h2><blockquote><p>英文原版请查阅<a href="https://www.nohello.com/">这里</a>，此处是我个人的翻译版。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2010</span>-<span class="hljs-number">07</span>-<span class="hljs-number">19</span> <span class="hljs-number">12</span>:<span class="hljs-number">32</span>:<span class="hljs-number">12</span> 你: 在吗？<br><span class="hljs-attribute">2010</span>-<span class="hljs-number">07</span>-<span class="hljs-number">19</span> <span class="hljs-number">12</span>:<span class="hljs-number">32</span>:<span class="hljs-number">15</span> 我: 在的。<br><span class="hljs-comment">## 我就这这里静静的等待你打字描述自己的问题</span><br><span class="hljs-attribute">2010</span>-<span class="hljs-number">07</span>-<span class="hljs-number">19</span> <span class="hljs-number">12</span>:<span class="hljs-number">34</span>:<span class="hljs-number">01</span> 你: 我正在进行<span class="hljs-meta"> [莫些事情] 然后我正尝试 [等等。。。]</span><br><span class="hljs-attribute">2010</span>-<span class="hljs-number">07</span>-<span class="hljs-number">19</span> <span class="hljs-number">12</span>:<span class="hljs-number">35</span>:<span class="hljs-number">21</span> 我: 这样啊，你应该<span class="hljs-meta"> [我的回答]</span><br></code></pre></td></tr></table></figure><p>这就像是你在和某人打电话，你接起电话说了一声：”喂？“，然后放下手机打开免提等待着对方的提问，这很低效</p><p>请使用如下格式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2010</span>-<span class="hljs-number">07</span>-<span class="hljs-number">19</span> <span class="hljs-number">12</span>:<span class="hljs-number">32</span>:<span class="hljs-number">12</span> 你: 你好，我正在进行<span class="hljs-meta"> [某些事情] 然后我正尝试 [等等。。。]</span><br><span class="hljs-attribute">2010</span>-<span class="hljs-number">07</span>-<span class="hljs-number">19</span> <span class="hljs-number">12</span>:<span class="hljs-number">33</span>:<span class="hljs-number">32</span> 我:<span class="hljs-meta"> [我的回答]</span><br></code></pre></td></tr></table></figure><p>这样做的原因是：你可以更快速地获得你想要的答案，而不是让对方在那边傻傻地等待你以龟速打字。</p><p>你的潜意识里试图不打断对方的回应，得到对方的回复以后再回答以显示你的礼貌，正如你在给别人打电话时那样。但是，网络聊天并不是打电话，通常情况下，打字要比说话慢得多。你的行为不是在彰显自己的礼貌，而是在浪费对方的时间。</p><p>其他的用语比如“你好，你在吗？”，“老王，问你个很简单的问题。”，“你有空吗？”都是很愚蠢的行为，在网络聊天中直接问问题就好。</p><p>如果你觉得直接问问题不礼貌，你可以采用以下的格式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2010</span>-<span class="hljs-number">07</span>-<span class="hljs-number">19</span> <span class="hljs-number">12</span>:<span class="hljs-number">32</span>:<span class="hljs-number">12</span> 你: 你好，如果你不介意的话我想问个问题，我正在进行<span class="hljs-meta"> [莫些事情] 然后我正尝试 [等等。。。]</span><br></code></pre></td></tr></table></figure><p>这样提问的另一个好处是：你的提问题同时具有即时性和留言性。如果对方不在，而你在对方上线之前就离开了，他们仍然可以回答您的问题，而不仅仅是盯着你发的“在吗”并为你究竟想要问什么问题而好奇。</p><p>（如果你使用的聊天软件支持查看对方的在线状态或者对方是否看到消息，你要做好被对方忽视的准备）</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="翻译" scheme="https://zhul.in/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>安卓解包笔记</title>
    <link href="https://zhul.in/2020/08/10/AndroidUnpack/"/>
    <id>https://zhul.in/2020/08/10/AndroidUnpack/</id>
    <published>2020-08-09T16:00:00.000Z</published>
    <updated>2021-10-13T13:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">brotli -d system<span class="hljs-selector-class">.new</span><span class="hljs-selector-class">.dat</span><span class="hljs-selector-class">.br</span><br>sdat2img system<span class="hljs-selector-class">.transfer</span><span class="hljs-selector-class">.list</span> system<span class="hljs-selector-class">.new</span><span class="hljs-selector-class">.dat</span><br>mount system<span class="hljs-selector-class">.img</span> &#123;known_path&#125;<br></code></pre></td></tr></table></figure><p>Get brotli <a href="https://github.com/google/brotli">here</a> &amp; sdat2img <a href="https://github.com/xpirt/sdat2img">here</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Android" scheme="https://zhul.in/tags/Android/"/>
    
    <category term="Rom编译" scheme="https://zhul.in/tags/Rom%E7%BC%96%E8%AF%91/"/>
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>git笔记</title>
    <link href="https://zhul.in/2020/07/11/GitNotes/"/>
    <id>https://zhul.in/2020/07/11/GitNotes/</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git自动填入账号密码"><a href="#git自动填入账号密码" class="headerlink" title="git自动填入账号密码"></a>git自动填入账号密码</h3><p>打开终端，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global credential.helper store<br></code></pre></td></tr></table></figure><p>此时，我们就已经开启了git账号密码的本地储存，在下一次push时只要输入账号密码就可以一劳永逸了。</p><h3 id="git设置默认的commit编辑器"><a href="#git设置默认的commit编辑器" class="headerlink" title="git设置默认的commit编辑器"></a>git设置默认的commit编辑器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global core.editor $editor_name<br></code></pre></td></tr></table></figure><p>Ps: $editor_name指的是你选用的编辑器，一般为nano、vim等</p><h3 id="pick一个仓库中连续的几个commit"><a href="#pick一个仓库中连续的几个commit" class="headerlink" title="pick一个仓库中连续的几个commit"></a>pick一个仓库中连续的几个commit</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git cherry-pick &lt;commit1_id&gt;..^&lt;cimmitn_id&gt;<br></code></pre></td></tr></table></figure><p>Ps: <commit1_id>和<commitn_id>分别指第一个你想要pick的commit_id和最后一个你想要pick的commit_id</p><h3 id="pick失败时如何撤销此次pick"><a href="#pick失败时如何撤销此次pick" class="headerlink" title="pick失败时如何撤销此次pick"></a>pick失败时如何撤销此次pick</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git cherry-pick --abort<br></code></pre></td></tr></table></figure><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><p>发生背景：</p><p>clone了一个内核仓库，大概是1.4G左右的大小，在github新建了一个repository，打算push上去，报错如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[zhullyb@Archlinux sdm845]$ git push -u origin master<br>Enumerating objects: 5724101, done.<br>Counting objects: 100% (5724101/5724101), done.<br>Delta compression using up to 4 threads<br>Compressing objects: 100% (983226/983226), done.<br>Writing objects: 100% (5724101/5724101), 1.34 GiB | 2.46 MiB/s, done.<br>Total 5724101 (delta 4693465), reused 5723950 (delta 4693375), pack-reused 0<br>error: RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: INTERNAL_ERROR (err 2)<br>send-pack: unexpected disconnect while reading sideband packet<br>fatal: the remote end hung up unexpectedly<br>Everything up-to-date<br></code></pre></td></tr></table></figure><p>搜索互联网，最终使用的解决方案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config http.version HTTP/1.1#原文中加了--global，不过我就临时遇到这种情况，不考虑加<br></code></pre></td></tr></table></figure><p>最终应该可以使用如下命令设置回来</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git config <span class="hljs-keyword">http</span>.<span class="hljs-built_in">version</span> HTTP/<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="笔记" scheme="https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>repo笔记</title>
    <link href="https://zhul.in/2020/07/11/RepoNotes/"/>
    <id>https://zhul.in/2020/07/11/RepoNotes/</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2022-08-22T15:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="清除同步过程中产生的不完整碎片文件"><a href="#清除同步过程中产生的不完整碎片文件" class="headerlink" title="清除同步过程中产生的不完整碎片文件"></a>清除同步过程中产生的不完整碎片文件</h3><p>在<code>源码路径/.repo</code>下搜索tmp_pack<br>将搜索结果中出现的所有文件全部删除</p><p>以下命令仅供参考</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf */*/*/*/objects/pack/tmp_pack_*<br></code></pre></td></tr></table></figure><h3 id="repo自动同步"><a href="#repo自动同步" class="headerlink" title="repo自动同步"></a>repo自动同步</h3><h5 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo #!/bin/bash<br>echo &quot;======start repo sync======&quot;<br>repo sync  --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune -j$(nproc --all)<br>while [ $? == 1 ]; do<br>echo &quot;======sync failed, re-sync again======&quot;<br>sleep 3<br>repo sync  --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune -j$(nproc --all)<br>done<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">repo.sh</span><br></code></pre></td></tr></table></figure><p><strong>授予运行权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x repo.sh<br></code></pre></td></tr></table></figure><h5 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash repo.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="笔记" scheme="https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>国内Linux镜像源列表</title>
    <link href="https://zhul.in/2020/07/11/china-mainland-mirrorlist/"/>
    <id>https://zhul.in/2020/07/11/china-mainland-mirrorlist/</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2022-12-18T10:31:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="企业镜像"><a href="#企业镜像" class="headerlink" title="企业镜像"></a>企业镜像</h2><h4 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h4><p><a href="https://developer.aliyun.com/mirror/">https://developer.aliyun.com/mirror/</a></p><h4 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h4><p><a href="https://mirrors.cloud.tencent.com/">https://mirrors.cloud.tencent.com/</a></p><h4 id="网易"><a href="#网易" class="headerlink" title="网易"></a>网易</h4><p><a href="http://mirrors.163.com/">http://mirrors.163.com/</a></p><h4 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h4><p><a href="https://mirrors.huaweicloud.com/">https://mirrors.huaweicloud.com/</a></p><h4 id="首都在线"><a href="#首都在线" class="headerlink" title="首都在线"></a>首都在线</h4><p><a href="http://mirrors.yun-idc.com/">http://mirrors.yun-idc.com/</a></p><h4 id="搜狐"><a href="#搜狐" class="headerlink" title="搜狐"></a>搜狐</h4><p><a href="http://mirrors.sohu.com/">http://mirrors.sohu.com/</a></p><h4 id="平安云"><a href="#平安云" class="headerlink" title="平安云"></a>平安云</h4><p><a href="https://mirrors.pinganyun.com/">https://mirrors.pinganyun.com/</a></p><h2 id="高校镜像"><a href="#高校镜像" class="headerlink" title="高校镜像"></a>高校镜像</h2><h4 id="清华大学"><a href="#清华大学" class="headerlink" title="清华大学"></a>清华大学</h4><p><a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a></p><p><a href="https://opentuna.cn/">https://opentuna.cn/</a></p><blockquote><p>farseerfc: tuna 有兩個服務器互相負載均衡，這倆服務器之間不同步，就偶爾遇到版本回退。</p></blockquote><h4 id="中国科技大学"><a href="#中国科技大学" class="headerlink" title="中国科技大学"></a>中国科技大学</h4><p><a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn/</a></p><h4 id="浙江大学"><a href="#浙江大学" class="headerlink" title="浙江大学"></a>浙江大学</h4><p><a href="https://mirrors.zju.edu.cn/">https://mirrors.zju.edu.cn/</a></p><h4 id="北京外国语大学"><a href="#北京外国语大学" class="headerlink" title="北京外国语大学"></a>北京外国语大学</h4><p><a href="https://mirrors.bfsu.edu.cn/">https://mirrors.bfsu.edu.cn/</a></p><h4 id="北京大学"><a href="#北京大学" class="headerlink" title="北京大学"></a>北京大学</h4><p><a href="https://mirrors.pku.edu.cn/Mirrors">https://mirrors.pku.edu.cn/Mirrors</a></p><h4 id="北京交通大学"><a href="#北京交通大学" class="headerlink" title="北京交通大学"></a>北京交通大学</h4><p><a href="https://mirror.bjtu.edu.cn/">https://mirror.bjtu.edu.cn/</a></p><h4 id="北京理工大学"><a href="#北京理工大学" class="headerlink" title="北京理工大学"></a>北京理工大学</h4><p><a href="https://mirrors.bit.edu.cn/web/">https://mirrors.bit.edu.cn/web/</a></p><h4 id="上海交通大学"><a href="#上海交通大学" class="headerlink" title="上海交通大学"></a>上海交通大学</h4><p><a href="https://mirrors.sjtug.sjtu.edu.cn/">https://mirrors.sjtug.sjtu.edu.cn/</a></p><h4 id="大连东软信息学院"><a href="#大连东软信息学院" class="headerlink" title="大连东软信息学院"></a>大连东软信息学院</h4><p><a href="http://mirrors.neusoft.edu.cn/">http://mirrors.neusoft.edu.cn/</a></p><h4 id="兰州大学"><a href="#兰州大学" class="headerlink" title="兰州大学"></a>兰州大学</h4><p><a href="http://mirror.lzu.edu.cn/">http://mirror.lzu.edu.cn/</a></p><h4 id="南京大学"><a href="#南京大学" class="headerlink" title="南京大学"></a>南京大学</h4><p><a href="http://mirrors.nju.edu.cn/">http://mirrors.nju.edu.cn/</a></p><h4 id="哈尔滨工业大学"><a href="#哈尔滨工业大学" class="headerlink" title="哈尔滨工业大学"></a>哈尔滨工业大学</h4><p><a href="https://mirrors.hit.edu.cn/">https://mirrors.hit.edu.cn/</a></p><h4 id="南京邮电大学"><a href="#南京邮电大学" class="headerlink" title="南京邮电大学"></a>南京邮电大学</h4><p><a href="https://mirrors.njupt.edu.cn/">https://mirrors.njupt.edu.cn/</a></p><h4 id="山东大学"><a href="#山东大学" class="headerlink" title="山东大学"></a>山东大学</h4><p><a href="https://mirrors.sdu.edu.cn/">https://mirrors.sdu.edu.cn/</a></p><h4 id="东北大学"><a href="#东北大学" class="headerlink" title="东北大学"></a>东北大学</h4><p><a href="http://mirror.neu.edu.cn/">http://mirror.neu.edu.cn/</a></p><h4 id="大连理工大学"><a href="#大连理工大学" class="headerlink" title="大连理工大学"></a>大连理工大学</h4><p><a href="http://mirror.dlut.edu.cn/">http://mirror.dlut.edu.cn/</a></p><h4 id="南洋理工学院"><a href="#南洋理工学院" class="headerlink" title="南洋理工学院"></a>南洋理工学院</h4><p><a href="https://mirror.nyist.edu.cn/">https://mirror.nyist.edu.cn/</a></p><h4 id="南方科技大学"><a href="#南方科技大学" class="headerlink" title="南方科技大学"></a>南方科技大学</h4><p><a href="https://mirrors.sustech.edu.cn/">https://mirrors.sustech.edu.cn</a></p><h4 id="重庆大学"><a href="#重庆大学" class="headerlink" title="重庆大学"></a>重庆大学</h4><p><a href="http://mirrors.cqu.edu.cn/">http://mirrors.cqu.edu.cn/</a></p><h4 id="西北农林科技大学"><a href="#西北农林科技大学" class="headerlink" title="西北农林科技大学"></a>西北农林科技大学</h4><p><a href="https://mirrors.nwsuaf.edu.cn/">https://mirrors.nwsuaf.edu.cn/</a></p><h4 id="山东女子学院"><a href="#山东女子学院" class="headerlink" title="山东女子学院"></a>山东女子学院</h4><p><a href="https://mirrors.sdwu.edu.cn/">https://mirrors.sdwu.edu.cn/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Linux" scheme="https://zhul.in/tags/Linux/"/>
    
    <category term="镜像站" scheme="https://zhul.in/tags/%E9%95%9C%E5%83%8F%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>在Windows下给cmd设置代理</title>
    <link href="https://zhul.in/2020/03/03/set-proxy-for-cmd-under-windows/"/>
    <id>https://zhul.in/2020/03/03/set-proxy-for-cmd-under-windows/</id>
    <published>2020-03-02T16:00:00.000Z</published>
    <updated>2022-09-29T06:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cmd打开方法"><a href="#cmd打开方法" class="headerlink" title="cmd打开方法"></a>cmd打开方法</h2><p>按住<code>win</code>+<code>R</code>键，调出一个运行框，接着输入<code>cmd</code>并回车即可</p><h2 id="设置cmd代理"><a href="#设置cmd代理" class="headerlink" title="设置cmd代理"></a>设置cmd代理</h2><p>一般性使用的如果是ShadowsockR的话，代理端口都是1080，v2ray的话则是10808</p><h4 id="ShadowsocksR"><a href="#ShadowsocksR" class="headerlink" title="ShadowsocksR"></a>ShadowsocksR</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> http_proxy=http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1080</span><br><span class="hljs-built_in">set</span> https_proxy=http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><h4 id="v2ray"><a href="#v2ray" class="headerlink" title="v2ray"></a>v2ray</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> http_proxy=http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br><span class="hljs-built_in">set</span> https_proxy=http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br></code></pre></td></tr></table></figure><h2 id="为git设置代理"><a href="#为git设置代理" class="headerlink" title="为git设置代理"></a>为git设置代理</h2><h4 id="ShadowsocksR-1"><a href="#ShadowsocksR-1" class="headerlink" title="ShadowsocksR"></a>ShadowsocksR</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git config <span class="hljs-literal">--global</span> http.proxy http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1080</span><br>git config <span class="hljs-literal">--global</span> https.proxy http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><h4 id="v2ray-1"><a href="#v2ray-1" class="headerlink" title="v2ray"></a>v2ray</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git config <span class="hljs-literal">--global</span> http.proxy http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br>git config <span class="hljs-literal">--global</span> https.proxy http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">10808</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Network" scheme="https://zhul.in/tags/Network/"/>
    
    <category term="Windows" scheme="https://zhul.in/tags/Windows/"/>
    
  </entry>
  
</feed>
