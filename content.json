{"meta":{"title":"竹林里有冰的博客","subtitle":"zhullyb's blog","description":"竹林里有冰的博客","author":"竹林里有冰","url":"https://zhul.in","root":"/"},"pages":[{"title":"404","date":"2021-05-01T16:48:01.000Z","updated":"2021-10-13T13:48:10.000Z","comments":true,"path":"/404.html","permalink":"https://zhul.in/404.html","excerpt":"","text":"// 404 page not found.if (!found) { throw (“(╯°□°)╯︵ ┻━┻”);}"},{"title":"Hello, it's zhullyb here.","date":"2021-05-01T15:53:19.000Z","updated":"2022-04-09T05:57:20.000Z","comments":true,"path":"about/index.html","permalink":"https://zhul.in/about/index.html","excerpt":"","text":"About Me咱是一只高三的大本钟，日常全靠摆 Fedora 用户，但同时也在维护某些 AUR 的包，dipper 机型的 crDroid Official Maintainer 周更(月更(年更博主 About This Blog这个博客主要就是用于记录一些技术性的原创内容，初衷是为了帮助遇到相同问题的用户们节约些自己的时间。 因此这个域名我将尽我可能续费下去，而如果后期服务器费用无法承担的话我也做好诶迁移到 serverless 的准备。 My Websites博客(本站): https://zhul.in 反代服务: https://r.zhullyb.top Contact Me回复速度最快的是邮件：&#122;&#104;&#117;&#x6c;&#x6c;&#121;&#98;&#64;&#x6f;&#117;&#x74;&#x6c;&#111;&#x6f;&#107;&#46;&#99;&#x6f;&#x6d; 当然，如果你喜欢即时通信软件，你也可以在 telegram@zhullyb 找到我，长时间没有回复的话可能是我不在线，可以发个 email 提醒我看一下。"},{"title":"归档","date":"2021-05-01T15:55:12.000Z","updated":"2021-10-13T13:48:10.000Z","comments":true,"path":"archives/index.html","permalink":"https://zhul.in/archives/index.html","excerpt":"","text":""},{"title":"收藏","date":"2021-05-01T15:53:19.000Z","updated":"2022-06-20T03:25:44.000Z","comments":false,"path":"collections/index.html","permalink":"https://zhul.in/collections/index.html","excerpt":"","text":"教程类VirtualBox启动安装于物理硬盘上的其他系统 Arch Linux devtools 简介 – 在干净的环境里编译软件包 [筆記]如何使用 youtube-dl 下載 YouTube 會員限定的影片 Windows Thin PC 汉化+激活 工具类PDF转换 TPD Quick Fix cloudflare mirror 资源类Firefox最新国际版完整包下载地址 Firefox国际版FTP服务器 chrome离线安装包 VLC vlc安卓版 IDM破解 Winrar烈火汉化版 VmwareWorkstationPro官方下载 15系列激活码： YG5H2-ANZ0H-M8ERY-TXZZZ-YKRV8 UG5J2-0ME12-M89WY-NPWXX-WQH88 UA5DR-2ZD4H-089FY-6YQ5T-YPRX6 GA590-86Y05-4806Y-X4PEE-ZV8E0 ZF582-0NW5N-H8D2P-0XZEE-Z22VA YA18K-0WY8P-H85DY-L4NZG-X7RAD 16系列激活码： ZF3R0-FHED2-M80TY-8QYGC-NPKYF #软碟通激活码： Guanjiu A06C-83A7-701D-6CFC #简体中文版Home 4BA9-0D54-214A-C938 #多语言版"},{"title":"Friends","date":"2022-08-13T18:38:12.994Z","updated":"2022-08-13T17:53:54.000Z","comments":true,"path":"links/index.html","permalink":"https://zhul.in/links/index.html","excerpt":"","text":""},{"title":"linux软件源","date":"2022-08-13T18:38:13.002Z","updated":"2022-03-06T09:56:44.000Z","comments":true,"path":"linux-source/index.html","permalink":"https://zhul.in/linux-source/index.html","excerpt":"","text":"Nothing here."},{"title":"Tags","date":"2021-05-01T15:53:19.000Z","updated":"2021-10-13T13:48:10.000Z","comments":true,"path":"tags/index.html","permalink":"https://zhul.in/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"为 Element 添加自己喜欢的贴纸","slug":"add-sticker-support-for-element","date":"2022-08-10T11:51:19.000Z","updated":"2022-08-11T12:52:46.000Z","comments":true,"path":"2022/08/10/add-sticker-support-for-element/","link":"","permalink":"https://zhul.in/2022/08/10/add-sticker-support-for-element/","excerpt":"","text":"在读这篇文章之前，你应该已经知道 element、matrix 是什么，这部分内容咱就不过多展开讲了。 需要准备的 PC 端 element python3.6+ 环境 能够挂静态资源的站点（比如 Github Pages、Gitlab Pages、Vercel 等免费平台的账号） 可能需要能够突破大局域网限制的网络环境 需要用到的项目 maunium/stickerpicker 克隆主项目1git clone https://github.com/maunium/stickerpicker.git &amp;&amp; cd stickerpicker 使用 pip 安装依赖其实本来想直接用包管理去安装这个项目的依赖的，可惜我看了一眼依赖列表，有整整一半的依赖没有被 Fedora 打包，所以干脆就直接用 pip 安装算了。 1pip install . 选择一：将本地图片制成贴纸包在项目根目录下创新一个新的目录。 1mkdir &lt;pack directory&gt; 将需要的图片放入其中。如果需要排序，可以在图片的文件名最前面加上数字标号。 执行命令进行打包 1sticker-pack &lt;pack directory&gt; --add-to-index web/packs/ 如果想要给目录贴纸包命名，则可以追加--title &lt;custom title&gt;，否则将直接设置为目录名 选择二：从 tg 获取现成的贴纸包项目内已经为我们准备了 sticker-import 命令来帮助我们直接从 tg 获取表情包，那我们直接收下 1sticker-import &lt;pack_url&gt; 第一次使用时，会要求我们登陆 matrix 和 tg 账号 matrix 的 homeserver 和 access token 可以在 PC 端 element 的设置里找到 tg 登陆时需要你输入手机号码，或者某一个 tg bot 的 token，这个大家都懂。 运行完成后，贴纸包就被上传到了你所使用的 matrix homeserver 上。 接着我们需要做的事情就是将 web 文件夹部署到 github pages 等做成静态站点，这个比较简单，不再赘述，我这里直接部署在了 https://matrix-sticker.zhullyb.top 我们下文就直接拿它做演示，看得上的也可以直接拿来用。另外，@朝色 的 url 也可以直接拿来使用 https://sticker.zhaose.cyou/web/ 添加到 element这是本篇文章最吊诡的地方，element 其实并没有为我们准备这么一个添加自定义 sticker 的地方，从某种意义上讲，我们是把我们的 sticker 给 hack 进去。 在 element 的 pc 端找到任意一个对话框，输入 /devtools 并发送 将会出现如下页面，选择 Explore account data 找到 m.widgets，如果没有，就点击下图标出的按钮 在新的页面中，填写如下内容，url 那一行应当改为自己部署的页面，并发送请求 1234567891011121314&#123; &quot;stickerpicker&quot;: &#123; &quot;content&quot;: &#123; &quot;type&quot;: &quot;m.stickerpicker&quot;, &quot;url&quot;: &quot;https://matrix-sticker.zhullyb.top/?theme=$theme&quot;, &quot;name&quot;: &quot;Stickerpicker&quot;, &quot;data&quot;: &#123;&#125; &#125;, &quot;sender&quot;: &quot;@you:matrix.server.name&quot;, &quot;state_key&quot;: &quot;stickerpicker&quot;, &quot;type&quot;: &quot;m.widget&quot;, &quot;id&quot;: &quot;stickerpicker&quot; &#125;&#125; 重启 element，此时就可以享受到自己导入的 sticker 了，手机端的 element 设置也将会被同步。 补一张效果图","categories":[],"tags":[]},{"title":"nodejs16：是我配不上 openssl 3 咯？","slug":"a-fucking-store-about-openssl3-and-nodejs16","date":"2022-08-04T09:31:49.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2022/08/04/a-fucking-store-about-openssl3-and-nodejs16/","link":"","permalink":"https://zhul.in/2022/08/04/a-fucking-store-about-openssl3-and-nodejs16/","excerpt":"","text":"今年上半年升级 Fedora 36 的时候遇到了这个问题。 那会儿很无奈，一直在等 nodejs16 合并提供 --openssl-legacy-provider 的那个 PR。nodejs16 是一个 lts 版本，照道理来说，既然要提供 Long-term Support，而 openssl 1 作为它的依赖之一，生命周期结束又在 nodejs16 之前，那是不是应该给 nodejs16 backport 在 nodejs17 上实现的 --openssl-legacy-provider 参数选项呢？否则绝大多数发行版都会在 openssl 1 的生命周期结束之前切换到 openssl 3，那 nodejs16 不就没法用了嘛。 然而，nodejs 在他们的官网上发布的一篇博客刷新了我的世界观，而此前的那个 PR 甚至一度被关停。（此处有寒晶雪提供的中文翻译） 博客称他们将会把 nodejs16 的生命周期结束时间提前以防止 openssl 1 生命周期在 nodejs16 生命周期结束之前结束（这种做法甚至还有先例） 很无奈，那会儿有两个 npm 管理的软件没法在 Fedora 36 上编译出来，就一直搁置了下去。 不过好在，事情还是有转机的。（要不然就这档子鸡毛蒜皮的小事我也不会专门去写篇博客出来） 前几天我给 atpoossfl 仓库打了 rpm 版本的 nvm 以后，意外地发现 nvm 所提供的 nodejs 会自带 openssl。 所以我们只需要使用 nvm 安装的 nodejs16 即可解决 Fedora36 以后没有 openssl 1 的问题。 使用 Fedora 的用户需要注意，Fedora 官方源中的yarnpkg在打包时遇到了错误，他们将 /usr/lib/node_modules/yarn/bin/yarn.js 的 shebang 给改成了 #!/usr/bin/node，应当改回 #!/usr/bin/env node才能让 yarn 正常使用上 nvm 提供的 nodejs；或者干脆添加 dl.yarnpkg.com 提供的 yarn 软件包。在写 specfile 的 BuildRequires 时，可以直接写成 /usr/bin/yarn 来避免频繁在 yarn 和 yarnpkg 这两个包名间改动。 更好的消息是，nodejs 已经在 v16.17.0-proposal 和 v16.x-staging 分支收下了这个为 nodejs16 提供 --openssl-legacy-provider 的 commit。相信在不久的将来，这个 commit 将会进入主线，并在 v16.17 版本的 nodejs16 上发挥它的作用。","categories":[],"tags":[{"name":"Fedora","slug":"Fedora","permalink":"https://zhul.in/tags/Fedora/"},{"name":"nodejs","slug":"nodejs","permalink":"https://zhul.in/tags/nodejs/"},{"name":"openssl","slug":"openssl","permalink":"https://zhul.in/tags/openssl/"}]},{"title":"如何拯救失声的 hollywood","slug":"restore-the-sound-of-hollywood","date":"2022-07-25T03:25:44.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2022/07/25/restore-the-sound-of-hollywood/","link":"","permalink":"https://zhul.in/2022/07/25/restore-the-sound-of-hollywood/","excerpt":"","text":"我刚开始接触 Linux 下的 hollywood 时，我记得它运行时是有声音的，应该是 007 的主题音乐，如今再次装上 hollywood，却发现音乐没了。 在 Github 找到 hollywood，发现有一个 issue 也提到了这个问题。 原作者在该 issue 中回复道 没错，它只是一段视频，音频受到版权保护。 所以不难看出，作者因为版权问题而去掉了音频，进而导致 hollywood 失声。但我们作为用户，是不是可以想办法获取到老版本中那段带有音频的 mp4 文件呢？ 答案是肯定的。 得益于 git 的版本控制特色，在 hollywood 的 github 仓库中，我们可以找到原来的 mp4 文件。 下载这个 mp4 文件后，我们将其放入 /usr/share/hollywood/ 路径下，重命名为 soundwave.mp4，并确保其被正确设定为 0644 权限。 1sudo install -Dm644 ./mi.mp4 /usr/share/hollywood/soundwave.mp4 接下来试着跑一跑 hollywood，发现依然没有声音。再次查阅源码，发现缺少了 mplayer 这个依赖。 使用包管理器安装 mplayer 后，运行 hollywood 就可以听到声音了。 然而，你觉不觉得这个音乐。。。听上去怪怪的。。。 没错，作者在去掉音频后，给 soundwave.mp4 设定了加速播放。而我们现在需要这段视频被原速播放。编辑 /usr/lib/hollywood/mplayer 123456789101112131415161718192021#!/bin/bash## Copyright 2014 Dustin Kirkland &lt;dustin.kirkland@gmail.com## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at## http://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.command -v mplayer /dev/null 2&amp;1 || exit 1trap &quot;pkill -f -9 lib/hollywood/ /dev/null 2&amp;1; exit&quot; INTPKG=hollywooddir=&quot;$(dirname $0)/../../share/$PKG&quot;-DISPLAY= mplayer -vo caca -loop 0 -ss $((RANDOM % 100)) -speed 100 $MPLAYER_OPTS $dir/soundwave.mp4+DISPLAY= mplayer -vo caca -loop 0 $MPLAYER_OPTS $dir/soundwave.mp4 再次运行，确认修改已经成功。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Fun","slug":"Fun","permalink":"https://zhul.in/tags/Fun/"}]},{"title":"处理 fcitx5 的文字候选框在 tg 客户端上闪烁的问题","slug":"fcitx5-blinking-on-tg-under-wayland-kde","date":"2022-07-03T05:52:44.000Z","updated":"2022-08-10T17:47:41.000Z","comments":true,"path":"2022/07/03/fcitx5-blinking-on-tg-under-wayland-kde/","link":"","permalink":"https://zhul.in/2022/07/03/fcitx5-blinking-on-tg-under-wayland-kde/","excerpt":"","text":"文章开头，先要感谢 fcitx5 的开发者 老K 帮我 debug 这个问题 鬼畜的文字候选框在新装的 Fedora 36 KDE Wayland 下使用 fcitx5 时遇到了文字候选框前后移动晃眼的问题（如下图） 解决方案当我向老K提出这个问题上的时候，老K告诉我这是预期行为，一共有两个解决方案。 使用 qt 的 text input 关掉 kwin 的淡入淡出特效 但由于我并不熟悉 KWin 的特效，所以我选择了前者的方案。 首先，需要确保自己的 Plasma 版本在 5.24 或以上，fcitx5 的版本号在 5.0.14 以上。 然后我们需要让 KWin 去启动 fcitx5。KCM 为此提供了一个非常简单的方式，如下图 随后需要确保环境变量没有设置 QT_IM_MODULE 。一定要确保这个变量不存在，连空也不行，必须是 unset。 理论上来说，是不需要重启的，但我的环境变量是 fcitx5-autostart 这个 rpm 包在 /etc/profile.d/fcitx5.sh里面设置的，我需要重启系统来使新的环境变量生效。 重启后，如果没有什么意外的话，就算成功了。 绝对不会缺席的意外很遗憾，我遇到了意外。 完成上述操作后，文字候选框依然有问题。 在老K的正确推测下，是因为我在 Fedora 下曾经使用过 im-settings，该程序在 $HOME/.config/environment.d/ 路径下重新帮我设置回了 QT_IM_MODULE 这个变量，从而使得 tg 启动时还在使用 IM MODULE，而不是预期的 qt text input。 删除这两个影响环境变量的文件后，在 tg 输入时，fcitx5 的文字候选框恢复了正常。 debug 过程中用到的两个方式dbus-send1dbus-send --print-reply=literal --dest=org.fcitx.Fcitx5 /controller org.fcitx.Fcitx.Controller1.DebugInfo 运行如上命令后，我得到了如下的输出 12345678 Group [x11::1] has 0 InputContext(s)Group [wayland:] has 5 InputContext(s) IC [a50fe208d42e4611b240c0b66a2fa0b9] program:konsole frontend:dbus cap:e001800060 focus:1 IC [d7d4d5c05e9c445aab1af9c7dfb5fbd4] program:telegram-desktop frontend:dbus cap:e001800060 focus:0 IC [ac72ec3edf58481bbdf838352520efd5] program:krunner frontend:dbus cap:e001820060 focus:0 IC [d8b450176e204953837248f786204c29] program:plasmashell frontend:dbus cap:e001800060 focus:0 IC [df252979343d42ebbe9bd82ead6ff194] program: frontend:wayland cap:40 focus:0Input Context without group 老K指出，出现了 telegram 的那一行表明 tg 还是在用 IM Module，所以是环境变量有问题 /proc 查看程序运行时的环境变量 参考资料Use Plasma 5.24 to type in Alacritty (Or any other text-input-v3 client) with Fcitx 5 on Wayland Candidate window is blinking under wayland with Fcitx 5 查看进程的环境变量 注: 上述参考资料均已在 web.archive.org 和 archive.ph 做过存档，如遇到原站点无法访问的情况，可自行前往这两个站点查看存档。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"笔记","slug":"笔记","permalink":"https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"},{"name":"KDE","slug":"KDE","permalink":"https://zhul.in/tags/KDE/"}]},{"title":"使用caddy反向代理维基百科中文站点","slug":"use-caddy-to-proxy-wikipedia","date":"2022-05-30T00:59:21.000Z","updated":"2022-08-10T13:42:13.000Z","comments":true,"path":"2022/05/30/use-caddy-to-proxy-wikipedia/","link":"","permalink":"https://zhul.in/2022/05/30/use-caddy-to-proxy-wikipedia/","excerpt":"","text":"反代的目的无非是两点 满足自己在无代理情况下访问无法访问的站点的需求 方便将站点分享给亲朋好友。 一直以来，我都想用 caddy 去反代一份维基百科来用，今天刚好就顺手解决了。 注意事项 用于反代的机子需要有对目标站点的访问能力 最好准备一个新的域名作为白手套，防止被污染 建议增加密码保护，一来使得小鸡流量不被滥用，二来防止防火墙检测到站点内容 本文使用的 caddy 开启了 replace_response 插件，可以使用 xcaddy 编译或直接前往 https://caddyserver.com/download 勾选相应插件后下载。安装时，建议先根据官方文档安装原版 caddy，再用启用了 replace_response 插件的 caddy 二进制文件覆盖掉原版 caddy，这样就不需要去手写 systemd 相关的文件了。 Caddyfile12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123; order replace after encode&#125;https://zhwiki.example.com &#123; reverse_proxy * https://zh.wikipedia.org &#123; header_up Host &#123;upstream_hostport&#125; header_up X-Real-IP &#123;http.request.remote.host&#125; header_up X-Forwarded-For &#123;http.request.remote.host&#125; header_up X-Forwarded-Port &#123;http.request.port&#125; header_up X-Forwarded-Proto &#123;http.request.scheme&#125; header_up Accept-Encoding identity header_down location (https://zh.wikipedia.org/)(.*) https://zhwiki.example.com/$2 header_down location (https://zh.m.wikipedia.org/)(.*) http://m.zhwiki.example.com/$2 &#125; replace &#123; &quot;upload.wikimedia.org&quot; &quot;up.zhwiki.example.com&quot; &quot;zh.wikipedia.org&quot; &quot;zhwiki.example.com&quot; &quot;zh.m.wikipedia.org&quot; &quot;m.zhwiki.example.com&quot; &#125;&#125;https://m.zhwiki.example.com &#123; reverse_proxy * https://zh.m.wikipedia.org &#123; header_up Host &#123;upstream_hostport&#125; header_up X-Real-IP &#123;http.request.remote.host&#125; header_up X-Forwarded-For &#123;http.request.remote.host&#125; header_up X-Forwarded-Port &#123;http.request.port&#125; header_up X-Forwarded-Proto &#123;http.request.scheme&#125; header_up Accept-Encoding identity header_down location (https://zh.wikipedia.org/)(.*) https://zhwiki.example.com/$2 header_down location (https://zh.m.wikipedia.org/)(.*) http://m.zhwiki.example.com/$2 &#125; replace &#123; &quot;upload.wikimedia.org&quot; &quot;up.zhwiki.example.com&quot; &quot;zh.wikipedia.org&quot; &quot;zhwiki.example.com&quot; &quot;zh.m.wikipedia.org&quot; &quot;m.zhwiki.example.com&quot; &#125;&#125;https://up.zhwiki.example.com &#123; reverse_proxy * https://upload.wikimedia.org &#123; header_up Host &#123;upstream_hostport&#125; header_up X-Real-IP &#123;http.request.remote.host&#125; header_up X-Forwarded-For &#123;http.request.remote.host&#125; header_up X-Forwarded-Port &#123;http.request.port&#125; header_up X-Forwarded-Proto &#123;http.request.scheme&#125; header_up Accept-Encoding identity &#125;&#125; 简单解释第一大段是启用 replace_response 插件的部分，直接照抄即可。 第二和第三大段的思路是一致的，分别反向代理了 PC 端和移动段的网页。两行 header_down 的写法是受到了知乎上那篇 Github 反代的启发，避免了源站发出 302 重定向时访客被带到源站去。replace 部分不用多说，就是将针对三个源站域名的请求改到反代站域名。 第四大段就是中规中举地反代了 upload.wikimedia.org 这个域名，上面存放的大多数是媒体文件，如果条件允许的话其实可以考虑使用多个服务器反代。 密码保护在我这份 Caddyfile 中没有启用，如果有需要的话可以参考我的另一篇博客。 参考资料Caddy 官方文档The Road to Serfdom——如何为GitHub搭建反向代理使用 Caddy 配置 Wikipedia 反向代理使用 Caddy 反代 ghcr.io 所有参考资料除官方文档外均使用 web.archive.org 和 archive.ph 进行存档，如有无法访问的情况，请自行前往存档站获取历史存档。","categories":[],"tags":[{"name":"Caddy","slug":"Caddy","permalink":"https://zhul.in/tags/Caddy/"}]},{"title":"创建一个本地的 Fedora 镜像源","slug":"setup-a-local-fedora-source","date":"2022-05-10T20:18:26.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2022/05/11/setup-a-local-fedora-source/","link":"","permalink":"https://zhul.in/2022/05/11/setup-a-local-fedora-source/","excerpt":"","text":"Fedora 36 在多次跳票后，总算是在 5月10日正式发布了。截止北京时间 5月11日凌晨两点，上海交通大学开源镜像站的上游 rsync://download-ib01.fedoraproject.org/ 仍然没有同步 Fedora 36 的 Release 源。鉴于 Release 自 freeze 以后基本是不会有什么大变动的，也不需要及时同步更新，干脆就直接建立一个本地的镜像源。 准备 一块足够大的硬盘 根据我个人实测，单 Fedora 36 的 x86_64 架构 的 Release 源中的 binary rpm 就占用了 89.6 GB，具体准备多的的硬盘空间还得看你具体需要同步些什么。 符合要求的上游 这里所说的符合要求一共是两个方面，一是允许 rsync 同步，二是有你想要的文件。我通过 getfedora.org 的下载按钮的转发目标得知 mirror.karneval.cz 已经完成了 Fedora 36 Release 源的同步。 良好的网络条件 这里说的良好的网络条件，并不一定是说需要访问境外站点的能力，而是你和你的上游之间的网络访问畅通，不要动不动就i断开连接那种。如果你选择的是国内镜像站作为你的上游，那一般不会有什么问题。 开始同步现在的主流方案一般都是选择 rsync 直接开整。 试探环节很多镜像站的 rsync 文件路径和 http 文件路径路径是不同的。 比如说，我这里用的 mirror.karneval.cz 的 http 页面显示的 fedora 仓库路径在 /pub/fedora，但 rsync 同步时需要使用 /fedora 路径。 为了确定这一点，我们可以先通过 rsync rsync://example.com 进行预览 1rsync rsync://mirror.karneval.cz 通过一层一层预览目录的方式，找到需要同步的路径是 /fedora/linux/releases/36/Everything/x86_64/os/ 同步环节通过 mkdir 和 cd 创建并进入我们准备用于同步源码的文件夹，然后开始执行同步命令。 1rsync -avP rsync://mirror.karneval.cz/fedora/linux/releases/36/Everything/x86_64/os/ . Ps: 中途如果由于各种原因而中断了同步过程，可以再次使用上述命令继续同步，rsync 会保证文件完整性。 安装、配置并启用 static server (可选)如果只需要本机使用，那么直接跳过这一步即可；如果需要给局域网内的其他机器提供镜像源，那么需要启用 static server。 我这里选择的是 caddy，性能虽然比 nginx 略逊一筹，但胜在配置简单。 caddy 的安装可以直接参考官方文档，这里不再赘述。 配置也不过那么几行的事情，我给个 example。端口号只要和别的程序没有冲突，就可以随意指定。443 端口需要 ssl 证书比较麻烦，局域网内直接用非标准端口即可。 1234567:14567 &#123; root * /the/directory/you/use file_server &#123; browse &#125;&#125; 配置完后直接以普通用户的权限启用即可，使用 systemd 启用需要解决 caddy 用户对目标无权限的问题。 1caddy run --config /etc/caddy/Caddyfile 浏览器输入对应的 ip 和端口，应该就可以访问了。 修改源配置文件由于我们仅同步了 Release 源，就只需要修改 /etc/yum.repo.d/fedora.repo 即可。 如果镜像源在本机上，可以直接使用 file:// 协议头: 123456789101112[fedora]name=Fedora $releasever - $basearch+ baseurl=file:///the/directory/you/use- metalink=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&amp;arch=$basearchenabled=1countme=1metadata_expire=7drepo_gpgcheck=0type=rpmgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearchskip_if_unavailable=False 如果镜像源在同局域网设备上，通过 http:// 协议也能达到相同的效果: 123456789101112[fedora]name=Fedora $releasever - $basearch+ baseurl=http://192.168.1.233:14567- metalink=https://mirrors.fedoraproject.org/metalink?repo=fedora-$releasever&amp;arch=$basearchenabled=1countme=1metadata_expire=7drepo_gpgcheck=0type=rpmgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearchskip_if_unavailable=False Ps: 提供镜像源的机子的局域网 ip 可以通过 ip -br a 命令获取","categories":[],"tags":[{"name":"Fedora","slug":"Fedora","permalink":"https://zhul.in/tags/Fedora/"},{"name":"Caddy","slug":"Caddy","permalink":"https://zhul.in/tags/Caddy/"}]},{"title":"好软推荐——FastOCR","slug":"fastocr-experience","date":"2022-04-13T21:55:18.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2022/04/14/fastocr-experience/","link":"","permalink":"https://zhul.in/2022/04/14/fastocr-experience/","excerpt":"","text":"前两天在 PC 端有 OCR 的需求，需求如下 自带框选功能或者图片上传前的编辑功能 硬盘占用小，不要 electron (((已经受够了 支持系统托盘或者快捷键快速调出 免费 在李皓奇的推荐下试用了 Arch 群兔兔拿 python 和 qt 写的 fastocr，体验可以说是相当不错了。四个要求基本都能完美满足！ 支持 百度、有道、旷视Face++ 三家的接口，免费额度绝对够我试用的（大不了一家用完了换一家嘛 此外，空间占用小，算上依赖也不过 31MB 的硬盘空间占用，连半个 electron 都不到，运行起来反而更加流畅 &lt;^_^","categories":[],"tags":[{"name":"Experience","slug":"Experience","permalink":"https://zhul.in/tags/Experience/"}]},{"title":"抛弃PicGo，直接使用curl将图片上传到LskyPro","slug":"upload-pic-to-lskypro-with-curl","date":"2022-03-31T11:19:14.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2022/03/31/upload-pic-to-lskypro-with-curl/","link":"","permalink":"https://zhul.in/2022/03/31/upload-pic-to-lskypro-with-curl/","excerpt":"","text":"前一阵子为了图床折腾了好长一段时间。刚开始用的是 cloudinary，虽然每月有限制，但强在境内访问速度还不错，可惜后来 res.cloudinary.com 这个域名在某些地方被 DNS 污染了，而自定义域名是付费版的功能，就不得不放弃了。 后来也尝试过 npm图床 的方案，可惜面对这种滥用公共资源的行为我无法接受（肯定不是因为受不了那繁琐的上传步骤，随便传张图都得 bump 下版本号的原因），而且现在境内的能作为图床使用的 npm 镜像似乎也就只剩下 npm.elemecdn.com 这一个能够正常回源了，没准哪天就用不了了，所以就去投奔了杜老师的去不图床。 去不图床采用开源图床程序 Lsky Pro 搭建，没有免费服务，且配置了鉴黄服务，看起来就是打算长久做下去的图床站点。境内使用腾讯云cdn，境外采用 cloudflare cdn，速度都挺让我满意的。（杜老师看见请给我打钱，或者多送我点空间也行（x Typora 一直是我写博客的主用 Markdown 编辑器，之前我采用 Typora 调用 PicUploader(php) 自动上传图片的方案写博客，体验相当不错，如图: 可惜 PicUploader 目前仍然没有支持 LskyPro 的上传，我采用的是现在烂大街的 Typora+PicGo+LskyPro插件 的方案去实现 Typora 的自动上传图片功能。 这个方案有明显的弊端： PicGo 运行依赖于 electron，极大地消耗了系统资源。 PicGo 面对多张图片( =4张 )同时上传时容易报错。 PicGo 对于 Linux 的支持比较有限，作者可能不熟悉 Linux，直到半个月前我去交了一个 pr 才支持 wayland 下使用 wl-clipboard 将图片链接复制到粘贴版。 正好 LskyPro 有详细的文档，应该可以用 curl 手糊一段 Shell 脚本实现直接上传，资源占用小，唯一的弊端是上传完成后的图片不容易管理。脚本如下 12345678#!/bin/bashexport TOKEN=YOU_TYPE_ITexport UPLOAD_API_URL=https://7bu.top/api/uploadfor images in &quot;$@&quot;; do curl -s -X POST $UPLOAD_API_URL -F &quot;token=$TOKEN&quot; -F &quot;image=@$images&quot; | jq -r .data.urldone 2022/04/02更新: 第六行 $@ - “$@”，解决文件名中出现空格时导致的上传失败问题。 需要借助 jq 来读取返回的 json，各 Linux 发行版源内应该都有打包，自行安装即可。 授予x可执行权限后，Typora 内直接填写自定义命令输入脚本所在位置即可实现 Typora 自动上传图片了。","categories":[],"tags":[{"name":"Shell Script","slug":"Shell-Script","permalink":"https://zhul.in/tags/Shell-Script/"},{"name":"图床","slug":"图床","permalink":"https://zhul.in/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"Lsky Pro","slug":"Lsky-Pro","permalink":"https://zhul.in/tags/Lsky-Pro/"}]},{"title":"使用 Github Action 跑 rpmbuild","slug":"run-rpmbuild-with-github-action","date":"2022-03-06T08:02:54.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2022/03/06/run-rpmbuild-with-github-action/","link":"","permalink":"https://zhul.in/2022/03/06/run-rpmbuild-with-github-action/","excerpt":"","text":"一直打算用 Github Action 跑 rpmbuild 构建 rpm 包，然后传到 Action 的 Artifacts 里面，用户就可以在登陆 Github 帐号的情况下进行下载。只要不发 Release，应该就不算「再分发」的行为，也就自然规避了再分发闭源软件的法律风险。 然而，现有的那些 Action 几乎全都是针对 CentOS 老古董定制的，，有些甚至连 buildrequires 都不帮你安装，而且大部分情况下都不支持 Source 直接填写一个链接，需要你直接提供 Source 文件。我自己又不可能在 Github 的仓库里用 lfs 强行存一个 200MB+ 的二进制文件，显然是不符合我要求的。还有几个项目使用 mock 去构建的，但使用 mock 构建需要提前用 rpmbuild 生成 srpm，在我们的个人电脑上可以理解为用一个干净的 chroot 打包防止自己的环境受污染，但在一个全新的、用完一次就要扔掉的 docker 里面还要防止环境被污染似乎有些画蛇添足的嫌疑。 最终，我选择了 naveenrajm7/rpmbuild 这个项目。（虽然我并不理解为什么他要用 nodejs 去调用系统命令去执行 rpmbuild 等一系列步骤，我也没学过这类语言。不过项目的 main.ts 我还是能仿写的。） 在经过三四个小时的摸爬滚打下，我还是成功地将这个项目按照我的想法改完了。 采用 Fedora 35 作为 host 进行 rpmbuild 自动安装 buildrequires 自动下载 source 允许仓库内自带本地 source 移除针对 srpm 的构建 改完后的 action 在 zhullyb/rpmbuild-github-action，欢迎使用。 最终是在 zhullyb/dingtalk-for-fedora 项目成功实装了，有兴趣的访客们可以去尝试着一起来白嫖 Github Action 呀！ _&lt;","categories":[],"tags":[{"name":"Fedora","slug":"Fedora","permalink":"https://zhul.in/tags/Fedora/"},{"name":"RPM Package","slug":"RPM-Package","permalink":"https://zhul.in/tags/RPM-Package/"}]},{"title":"如何打出一个「-git」的rpm包","slug":"how-to-package-a-git-rpm-package","date":"2022-02-07T02:23:29.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2022/02/07/how-to-package-a-git-rpm-package/","link":"","permalink":"https://zhul.in/2022/02/07/how-to-package-a-git-rpm-package/","excerpt":"","text":"本文中，笔者通过 github api 获取最新的 commit_id ，以一种曲线救国的方式成功为 rpm 打下了一个 -git 包。 On Archlinux用过 AUR 的 Arch 用户应该知道，makepkg 支持 “-git” 包。当我们执行 makepkg 时，PKGBUILD 中的 pkgver 函数会自动被运行，并将输出的结果作为本次打包的版本号。这是一个非常棒的设计，我们不需要去手动更新 PKGBUILD，就可以直接从 git 服务区拉取最新的 master 分支编译打包，对于跟进开发进度而言非常方便。 一般来说，一个 -git 包的版本号会分成 2~4 个部分，最为核心的是 count 和 commit_id：count用于记录这是第几次提交，通过提交的次数作为版本号的靠前部分可以帮助包管理器比较版本号的新旧，比如第21次提交的代码一定比第18次的更加新，而21也正好比18大，包管理器也就凭借着这个数字来保证其可以在用户在更新的时候为用户选择一个更新版本的包；而 commit_id则可以帮助人类更快定位这个包是在哪一次代码提交以后编译的，以帮助 开发者/用户 定位问题。 On Fedora然而，这个思路在 rpm 上似乎无法实现。rpmbuild 执行的时候会事先根据版本号在 BUILDROOT 路径下创造一个 %&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;-%&#123;arch&#125;的目录，如此一来，就必须先确定版本号，无法像 PKGBUILD 那样使用一个 pkgver 的函数去自动更新版本号。此外，rpm 似乎专注于软件包的 Reproducibility，也就是希望拿到了指导 rpmbuild 打包的 specfile 以后打出一个相同包的能力，因此，使用同一份 specfile 在不同时间打出一个不同包的这种行为似乎并不符合 Fedora/Redhat 的哲学，所以我们怕是等不到 rpm 支持这个功能的那一天了。 Turn of events当然，这也并非不可能完成的任务，在 西木野羰基 的指引下，我在 Fedora Docs 找到了对于某个 Branch 的打包样版。其实也就是直接从 github 下载 master 分支的 master.tar.gz 压缩包来获取最新的源码，这样就确保了每一次 rpmbuild 的时候都能获取最新的源码。接下来需要处理的就是版本号的问题。 Sad Story很可惜，master.tar.gz 压缩包中并不包括 .git 文件，我们无法通过 git rev-list --count HEAD 来获取 count 计数，此外，最新的 commit_id 我们也不得而知。即使我们知道这些参数，也无法在 rpmbuild 执行之前自动把这些参数填进 specfile 中。 Improvement好在天无绝人之路，在 Liu Sen 的 RPM 中宏的简单介绍 一文中发现宏其实也可以类似 bash 中的 $() 一样定义成系统运行某些命令后的结果，通过仿写 copr 上 atim/fractal 的 specfile 定义了下面两个宏。 12%global timenow %(echo $(date +%Y%m%d.%H%M))%global commit_short_id %(api_result=$(curl -s https://api.github.com/repos/&lt;username/&lt;reponame/branches/master | head -n 4 | tail -n 1); echo $&#123;api_result:12:7&#125;) 版本号就可以直接写成 %&#123;timenow&#125;.%&#123;commit_id_short&#125; %&#123;timenow&#125; 是直接通过运行系统的 date 命令获得一个精确到分钟的时间来当作 count 给 dnf 判断版本号大小使用 %&#123;commit_id_short&#125; 从 api.github.com 获取到该仓库最新的 commit 号，配合粗制滥造的 shell 命令做切片，提取前7 位，帮助用户和开发者快速定位源码版本使用。当然，也可以选择直接使用 jq 作为 json 的解释器，不过 copr 大概率没有预装，生成 srpm 的时候估计就会报错。 Review至此，我们成功解决了在 rpm 上打 -git 包的问题，不过仍然有以下缺点 仅支持 github 上的项目，对于其他的 git 托管服务商还需要去查阅他们的 api 文档 粗制滥造的 shell 命令可能不足以应对以后的 github api 变更 使用了精确到分钟的时间作为计数器，导致版本号过长 使用 copr 打包的时候，有概率出现 srpm 与 rpm 之间版本号出现分钟级的差异","categories":[],"tags":[{"name":"Fedora","slug":"Fedora","permalink":"https://zhul.in/tags/Fedora/"},{"name":"RPM Package","slug":"RPM-Package","permalink":"https://zhul.in/tags/RPM-Package/"}]},{"title":"雪藏在开源镜像站点中的那些常用却不为人知的软件","slug":"the-common-software-hidden-in-mirrors","date":"2022-01-19T05:01:30.000Z","updated":"2022-08-10T13:42:13.000Z","comments":true,"path":"2022/01/19/the-common-software-hidden-in-mirrors/","link":"","permalink":"https://zhul.in/2022/01/19/the-common-software-hidden-in-mirrors/","excerpt":"","text":"前两天在下载 微PE 的时候眼睛突然一瞥，发现了山东大学的开源镜像站。突然间才发现在各个开源镜像站点中提供了许多那些我们误以为只能顶着断断续续的 Github 网络才能下载的软件。 下面这张列表主要来自山东大学的镜像站中的「常用软件」和南京大学的「github-release」。我严重怀疑南京大学就是把整个 tuna 给搬了一遍过来。 山东大学 南京大学 清华大学 7-zip https://mirrors.sdu.edu.cn/software/Windows/7-Zip/ balena-io/etcher https://mirrors.nju.edu.cn/github-release/balena-io/etcher/LatestRelease/ https://mirrors.tuna.tsinghua.edu.cn/github-release/balena-io/etcher/LatestRelease/ git-for-windows https://mirrors.sdu.edu.cn/github-release/git-for-windows_git/ https://mirrors.nju.edu.cn/github-release/git-for-windows/git/LatestRelease/ https://mirrors.tuna.tsinghua.edu.cn/github-release/git-for-windows/git/LatestRelease/ Krita https://mirrors.nju.edu.cn/kde/stable/krita/ libreoffice https://mirrors.tuna.tsinghua.edu.cn/libreoffice/libreoffice/ Magisk https://mirrors.nju.edu.cn/github-release/topjohnwu/Magisk/LatestRelease/ https://mirrors.tuna.tsinghua.edu.cn/github-release/topjohnwu/Magisk/LatestRelease/ Motrix https://mirrors.sdu.edu.cn/github-release/agalwood_Motrix/ obs-studio https://mirrors.sdu.edu.cn/software/Windows/OBS%20Studio/ https://mirrors.nju.edu.cn/github-release/obsproject/obs-studio/LatestRelease/ https://mirrors.tuna.tsinghua.edu.cn/github-release/obsproject/obs-studio/LatestRelease/ office tool plus https://mirrors.sdu.edu.cn/software/Windows/Office%20Tool%20Plus/ picgo https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/ rufus https://mirrors.sdu.edu.cn/software/Windows/Rufus/ https://mirrors.nju.edu.cn/github-release/pbatard/rufus/LatestRelease/ qBittorrent https://mirrors.sdu.edu.cn/software/Windows/qBittorrent/ ventoy https://mirrors.sdu.edu.cn/github-release/ventoy_Ventoy/ https://mirrors.nju.edu.cn/github-release/ventoy/Ventoy/LatestRelease/ virtualbox https://mirrors.nju.edu.cn/virtualbox/ https://mirrors.tuna.tsinghua.edu.cn/virtualbox/ vlc https://mirrors.nju.edu.cn/videolan-ftp/ https://mirrors.tuna.tsinghua.edu.cn/videolan-ftp/ winehq https://mirrors.nju.edu.cn/winehq/ https://mirrors.bfsu.edu.cn/winehq/ wepe https://mirrors.sdu.edu.cn/software/Windows/WePE/ winscp https://mirrors.sdu.edu.cn/software/Windows/WinSCP/","categories":[],"tags":[]},{"title":"在Fedora搭建jekyll环境——dnf module","slug":"dnf-module-in-setting-up-the-jekyll","date":"2022-01-12T14:11:42.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2022/01/12/dnf-module-in-setting-up-the-jekyll/","link":"","permalink":"https://zhul.in/2022/01/12/dnf-module-in-setting-up-the-jekyll/","excerpt":"","text":"起因我之前的博客一直用的是这个主题，直接使用 Fedora 官方源里的 rubygem-jekyll 似乎无法正常安装 Gemfile 中的依赖。之前使用 Archlinux 的时候，我是直接从 AUR 安装了一个 ruby-2.6 来使用的，但最近转到 Fedora 以后似乎就没法用这样的方案来解决了。 好在天无绝人之路，Fedora 也提供了安装老版本的 ruby 的方案——使用 dnf 的 module 功能。 关于 dnf module关于 dnf 的 module 功能到底是用来做什么的，其实我并不清楚。虽说 Fedora 提供了文档，但就凭我的读中文文档都吃力的水准，似乎没有办法通过英文文档来理解这个全新的概念，所以我选择直接莽过去。 就我目前的理解而言，dnf 的 module 似乎并不致力于帮助用户完成系统内某一程序的新老版本共存的难题，而仅仅是给用户提供了停留在老版本软件的权利。module 所负责的，是保证老版本的程序能在你的系统上正常运行起来，而不会因为其他组件的更新而导致老版本的程序无法正常使用。 基本的使用方法通过下列命令可以查看目前所支持的 module 1sudo dnf module list 通过下列命令可以选择 module 所要停留的版本( 以 ruby 2.7 为例 ) 1sudo dnf module enable ruby:2.7 通过下列命令可以取消锁定 module 程序所要停留的版本( 以 ruby 为例 ) 1sudo dnf module reset ruby 开始配置该 jekyll 主题的运行环境12345sudo dnf module install ruby:2.7sudo dnf install ruby-develcd /path/to/the/jekyll-blog/bundle install --path vendor/bundle 完成后，我们即可在 jekyll-blog 目录下 使用 bundle exec jekyll 来正常运行 jekyll 了。试着跑一下 bundle exec jekyll server 参考材料Fedora Docs openSUSE 中文社区主页贡献指南 Switching to use Ruby 2.7 (or older) in Fedora 34 using DNF Modules 「WebArchive」","categories":[],"tags":[{"name":"Fedora","slug":"Fedora","permalink":"https://zhul.in/tags/Fedora/"}]},{"title":"pacman更新时遇到「GPGME 错误：无数据」","slug":"pacman-gpgme-error-no-data","date":"2022-01-01T15:42:09.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2022/01/01/pacman-gpgme-error-no-data/","link":"","permalink":"https://zhul.in/2022/01/01/pacman-gpgme-error-no-data/","excerpt":"","text":"好久没有更新博客了，今天来炒一炒暑假里的冷饭。故事的主人公是 星外之神，目前正在北大读书的大佬，那天帮他解决问题以后还恬不知耻地问他要了个友链。 情景再现当初是使用pacman更新时遇上了「GPGME 错误：无数据」的问题，我尝试复现了下，大概是下面这样的情况。 123456789101112[zhullyb@Archlinux ~]$ sudo pacman -Syu错误：GPGME 错误：无数据错误：GPGME 错误：无数据错误：GPGME 错误：无数据:: 正在同步软件包数据库... core 137.6 KiB 598 KiB/s 00:00 [------------------------------------] 100% extra 1566.0 KiB 6.12 MiB/s 00:00 [------------------------------------] 100% community 6.0 MiB 20.6 MiB/s 00:00 [------------------------------------] 100%错误：GPGME 错误：无数据错误：GPGME 错误：无数据错误：GPGME 错误：无数据错误：未能同步所有数据库（无效或已损坏的数据库 (PGP 签名)） 英文版的提示应该是长成下面这个样子 123456789101112[zhullyb@Archlinux ~]$ sudo pacman -Syuerror: GPGME error: No dataerror: GPGME error: No dataerror: GPGME error: No data:: Synchronizing package databases... core 137.6 KiB 574 KiB/s 00:00 [------------------------------------] 100% extra 1566.0 KiB 5.66 MiB/s 00:00 [------------------------------------] 100% community 6.0 MiB 18.1 MiB/s 00:00 [------------------------------------] 100%error: GPGME error: No dataerror: GPGME error: No dataerror: GPGME error: No dataerror: failed to synchronize all databases (invalid or corrupted database (PGP signature)) 解决方案1sudo rm /var/lib/pacman/sync/*.sig 很简单，就这一条命令就够了。 问题原因pacman在更新数据库文件时也会尝试下载$repo.db.sig，这里的$repo可以是core、extra、community、archlinuxcn等仓库名。 但是无论是官方源还是archlinuxcn源，大多数源的数据库文件都不会被签名，也就不会存在 .db.sig 文件。 pacman 尝试下载时这些数据库文件的签名文件时，镜像站就会返回 404 的http状态码告诉pacman: “你个傻叉，神他妈没有这个文件！” pacman 挨了一顿骂，也就善罢甘休，没有再动这个念头，所以我们每次更新也都相安无事。 而出现这种错误的情况大多是发生在 校园网、酒店免费WIFI 这种需要登陆以后才能上网的网络环境。 因为 pacman 尝试下载 .db.sig 文件时被登陆网页劫持了（这点你们应该深有感受，如果你在这种网络环境下没有登陆，你无论访问什么网页都会被重定向到登录界面，http的状态码此时是200，不是404）。从没见过 .db.sig的 pacman 此时两眼放光，由于没有挨骂，他就迅速地把登录界面当成是.db.sig下载下来了。 下载下来以后，pacman 激动地摆弄起 .db.sig，甚至发现里面没有自己期待已久的 GPG签名数据并开始报错时仍然不愿意撒手，因此此时无论再怎么同步源码、再怎么 Syyu 也不会有效果，必须人工干预。","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"}]},{"title":"Cutefish的前世今生","slug":"the-history-of-cutefish","date":"2021-12-11T16:10:34.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/12/12/the-history-of-cutefish/","link":"","permalink":"https://zhul.in/2021/12/12/the-history-of-cutefish/","excerpt":"","text":"CutefishOS是由我们国内的开发者主导（目前也主要是他们在开发）的桌面环境。不过似乎对于他的前世今生，似乎很多人都有误解。尤其是很多人认为他是一个Archlinux-based发行版；部分用户分不清他到底是基于Debian还是基于Ubuntu；还有人把它和 JingOS 弄混了。 先把这些问题的回答写在最前面: CutefishOS 是一个基于Debian的发行版，他的前身 CyberOS 是一个基于 Archlinux 的发行版。但要注意: Cutefish （不加OS）可以单独指代 CutefishOS 所使用的桌面环境，为了避免混淆，本文中我将使用CutefishDE来指代他的桌面环境。 CutefishOS 和 JingOS 目前只是官网互加友链的关系，并不是相同的东西。Cutefish的开发方向是基于qt重写一套UI，而JingOS则更像是在开发一套KDE的主题。 Cutefish的历史CyberOS的故事第一次体验到这个UI其实是在21年的3月，在Archlinux的QQ群里，群主向我们推荐了 CyberOS ，这是一个基于 Archlinux 的发行版。 由于基于 Archlinux，我直接就添加了CyberOS的源作为第三方源安装上了CyberDE，那会儿还顺手水了篇博客，由于后来事情发展太快，这篇博客早就不适用了，就干脆删了，现在在我的Github还能找到那会儿的存档。 更名CutefishOS后来根据 CutefishOS 的QQ群的群主所说，是因为当时没注重海外平台的宣发，导致 CyberOS 的用户名在 Twitter 被抢注，因此决定改名 CutefishOS 。由于时间较为久远，QQ群的聊天记录已经几乎找不到了，我无法放出。 关于CutefishOS的创始时间我已经记不清了，但是可以推测是在21年的4~5月份左右。[^1][^2][^3] 官网上线21年5月12日，cutefishos.com 上线，暂时不提供安装镜像。 进军Arch系5月26日，CutefishDE进入 Archlinux官方源。 同日，Github 组织 manjaro-cutefish 放出了使用 CutefishDE 的 manjaro安装镜像。这个组织和官方的 github.com/cutefishos 没有共同维护者，因此可以基本断定是第三方打包的。 Ubuntu第三方打包版的跟进大约在7月中旬左右[^4]，Github出现了一位名为 cutefish-ubuntu 的用户，开始在 Ubutnu 上编译 CutefishDE ，并通过 GithubPages 发布安装镜像，依然是第三方打包的安装镜像。 官方版本释出21年国庆长假期间，cutefishos.com 释出由 Cutefish官方发布的基于Debian的CutefishOS镜像，搭载的DE是 0.5 版本的，英文版网页提供 Google Drive 和 Mega 的下载链接，中文版本网页非常贴心地添加了使用飞书下载的方式方便国内用户下载。 RPM系的跟进COPRcopr上分别有三名用户打包了CutefishDE/CyberDE，我以表格形式简单罗列一下 用户名 打包的DE 第一次打包日期 rmnscnce cutefish 2021.8.19 cappyishihara cyber 2021.11.17 jesonlay cutefish 2021.12.06 论坛用户21年12月2日，一为名为gesangtome的网友在CutefishOS的论坛上发布了自己编译的CutefishDE。 [^1]: 通过whois查询得知cutefishos.com 这个域名注册时间为21年3月31日[^2]: Cutefish进入Archlinux官方源是在5月26日[^3]: CyberOS的Github仓库最后一次内容变更是在21年的5月23日[^4]: 这里参考的是 cutefish-ubuntu/cutefish-ubuntu.github.io 仓库的第一个commit的时间","categories":[],"tags":[{"name":"OpenSource Project","slug":"OpenSource-Project","permalink":"https://zhul.in/tags/OpenSource-Project/"}]},{"title":"wolai再打包遇到的问题--electron应用的dev判断机制","slug":"dev-app-update-in-wolai","date":"2021-12-03T14:53:25.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/12/03/dev-app-update-in-wolai/","link":"","permalink":"https://zhul.in/2021/12/03/dev-app-update-in-wolai/","excerpt":"","text":"之前对于electron懵懵懂懂的时候就把 wolai 给打包上了 AUR ，那会儿年少无知，也不懂得把内置的 electron 拆开来换成系统内置的以节省空间。前一阵子给CN源打完 Motrix 以后突然想起来自己在 AUR 上还有维护一个叫 wolai 的electron 应用，于是打算把软件内置的 electron 拆出来。尝试使用 electron /path/to/app.asar 命令启动的时候发现了以下的问题。 虽然这个报错无关紧要，直接右上角叉掉也不影响软件正常使用，但是就这样推上 AUR 似乎有些不太妥当。于是使用搜索引擎查找答案。 发现是使用系统自带的 electron 启动时，app.asar 内置的一个叫 electron-updater 的模块在自动检测更新时会误认为我们此时处于开发模式，于是会尝试读取 app.asar 内部的 dev-app-update.yml 以查询更新。^1 但问题在于这个 app.asar 并不是 wolai 开发者在开发时使用 development 模式打出来的包，应该是 production ，所以内置的那个文件名叫 app-update.yml ，少了个dev 前缀，就很尴尬。 以下内容来自一篇简书的文章^2 所以调试的时候可以建一个default-app.yml文件放在D:\\hzhh123\\workspace\\vue-work\\electron-demo1\\node_modules\\electron\\dist\\resources\\default_app.asar 下，这里就涉及到asar解压缩，但是这样会很麻烦，打包后也需要这样替换，麻烦，所幸electron-updater中提供了这个文件的属性配置updateConfigPath，可以通过设置这个属性来解决这个问题 很遗憾，我们并不是该应用的开发者，并不能指定electron-uploader构建时的参数，所以只能考虑解压缩 app.asar 手动放入 dev-app-update.yml 的方案。 根据又一篇简书的文章^3，我们了解到 npm 中有一个叫 asar 的程序可以帮助我们解压缩 app.asar。我这里直接将内容搬过来 解压 1asar extract 压缩文件 解压文件夹 压缩：如果压缩文件存在，则会被替换 1asar pack 文件夹 压缩文件名 原文是让我们直接使用 npm 下载安装 asar 程序，然而这就会让打包过程变得很复杂，所幸 Archlinux 官方源中已经将这个程序打完了，我们可以直接将 asar 写入 makedepends。 大概就写成了这个样子。 123asar extract $&#123;srcdir&#125;/squashfs-root/resources/app.asar $&#123;srcdir&#125;/new_appmv $&#123;srcdir&#125;/squashfs-root/resources/app-update.yml $&#123;srcdir&#125;/new_app/dev-app-update.ymlasar pack $&#123;srcdir&#125;/new_app $&#123;srcdir&#125;/squashfs-root/resources/app.asar 程序正常启动，没有弹出之前的对话框了。 参考:","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"electron","slug":"electron","permalink":"https://zhul.in/tags/electron/"}]},{"title":"Typora与我","slug":"typora-and-me","date":"2021-11-26T15:05:05.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/11/26/typora-and-me/","link":"","permalink":"https://zhul.in/2021/11/26/typora-and-me/","excerpt":"","text":"Typora 要收费了，$14.9 买断制，支持三设备激活。而且尚且不知道这里买断的是单个大版本更新还是多个大版本更新。 很多人说，不要紧，我们有VsCode、我们有Vnote、我们有MarkText。。。 但我还是不习惯。 Typora真的就是个非常纯粹的Markdown编辑器，他有所见即所得的视觉效果，同时为我提供了沉浸式的写作体验。 当我在使用Typora写文章的时候，我就是个非常单纯的内容创作者，我不需要去考虑各种Markdown的语法格式，我只需要用文字写下我所想的，然后通过右键菜单把文字的样式调整到一个能够合理突出主次的程度，便完成了。若是用的时间长了，记住了打开菜单时旁边现实的快捷键，那速度便更快了。即使有插入图片/视频的需求，我也只需要将图片复制进 Typora 的编辑框，我在Typora预先设置好的自定义上传命令会自动调用我部署在本地的PicUploader完成上传，并将媒体文件以 Markdown/html 语法呈现在编辑框中。 这样一来，我的行文思路就是连贯、不受打断的。即使需要从系统中截取一些图片作说明用途，我也可以通过 Flameshot 截取图片并简单画几个箭头、标几个序号或者框几个按钮后复制到剪切板，并最终粘贴到Typora的编辑框中，整个过程就像是我在和别人QQ聊天时截个图发过去一般简单。 倘若我使用别的Markdown编辑器，我便需要将图片保存到本地、手动上传到图床、手动写markdown的![]()语法，如此一来，我的精力就被分散了，那我也就不会有为文章插入图片的兴趣，抑或是插入完某张图片以后深感心力憔悴，便把写了一半的文章束之高阁，欺骗自己将来有一天我会继续完成这篇文章。 总而言之，Typora对于我而言确实是非常有用的工具，而我将在接下来的半年到一年时间中过渡到其他的开源Markdown编辑器中。即使改变我的使用习惯将是一件非常痛苦的事情，但我不得不这么做。Typora内置的electron在Archlinux的滚动更新下不知道过多久会出现与系统不兼容的情况^1，所以这意味着继续使用老版本的Typora并不是长久之策，我需要在此之前尽快切换到其他的Markdown编辑器。而我不是个商业公司的Markdown工程师，单纯为了个人兴趣而花大价钱去买这一款生产力工具却无法得到经济回馈似乎并不是一个明智的选择。 反转了，仔细阅读Typora官网的Q&amp;A后发现了这么一条: Can I use Typora for free ? You will have a 15 days free trial before the purchase. If you use dev version or Linux version, you will have unlimited trial time if you keep Typora updated. But we may show “trial button” or disable certain features to encourage you to purchase our app, but basic and most functions will be kept. 看起来 Dev 版和 Linux版本在最新版本可以无限试用下去，那我不考虑改变我的写作习惯了。 注: Dev 版藏得有点深，在这里","categories":[],"tags":[{"name":"Casual Talk","slug":"Casual-Talk","permalink":"https://zhul.in/tags/Casual-Talk/"}]},{"title":"我是来吹CloudflareMirrors的","slug":"use-cloudflare-mirrors","date":"2021-11-20T17:48:49.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/11/21/use-cloudflare-mirrors/","link":"","permalink":"https://zhul.in/2021/11/21/use-cloudflare-mirrors/","excerpt":"","text":"Cloudflare也开始提供Linux开源镜像站了。 虽然在中国大陆地区，Cloudflare速度日常抽风，不适合作为我们本机镜像源，但完全可以用于境外VPS。平常我们对国内的镜像站比较熟悉，也知道自己的网络环境使用哪个镜像站会稍微快一些，但一旦出了国，这些经验就没有用了。 作为一家老牌的CDN网站加速服务提供商，Cloudflare提供的网络服务在全球范围内都非常快（嗯，对，全球范围不包含中国大陆） 无论你的vps是在美国日本，还是香港新加坡，cloudflare都能提供非常稳定高速的服务，只需要记住cloudflare镜像站的域名，便可以抛弃挑选镜像站的烦恼。 根据网页上所说，cloudflare会以「反代就近的镜像站」+「缓存」的形式来提供服务，既然都要通过cloudflare网络，那中国大陆地区就可以彻底别想了，能够给几乎所有地区提供不错的服务。目前说是只提供了「Archlinux」和「Debian」的服务，但是根据我考证下来，其实「Ubuntu」和「CentOS」也有，只不过没写在页面上罢了。那么废话不多说，我们上境外的vps测一下下载速度如何。 cloudflaremirrors 在我这台位于美国达拉斯机房的1Gbps机器上可以跑到80MB/s+的速度，虽然没有跑满理论速率，但也算是相当喜人的成绩了。 小结: CloudflareMirrors非常适合境外的vps使用，免去了用户自行给一个个镜像站测速的麻烦。","categories":[],"tags":[]},{"title":"deepin-elf-verify究竟是何物？","slug":"what-is-deepin-elf-verify","date":"2021-11-19T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/11/20/what-is-deepin-elf-verify/","link":"","permalink":"https://zhul.in/2021/11/20/what-is-deepin-elf-verify/","excerpt":"","text":"起因越来越多上架在 Deepin 应用商店中的 deb 包中开始依赖了一个叫做 deepin-elf-verify 的依赖，今天来讲讲这个神奇的 deepin-elf-verify 到底为何物，为什么这么多程序都要依赖于他来工作。 下载拆包打开 Bfsu镜像站 ，可以很轻松地找到 Packages —— 在 apt 源中记录了各个文件信息（包括他在仓库中的相对位置）的这么一个神奇的文件，就是体积有点大，达到了68MB的样子。我们可以通过以下命令检索今天的主角——deepin-elf-verify。 1curl -s https://mirrors.bfsu.edu.cn/deepin/dists/apricot/main/binary-amd64/Packages | grep deepin-elf-sign | grep pool 得到了输出: Filename: pool/main/d/deepin-elf-verify/deepin-elf-verify_0.2.0.6-1_amd64.deb 我们就可以把完整的下载链接拼出来: https://mirrors.bfsu.edu.cn/deepin/pool/main/d/deepin-elf-verify/deepin-elf-verify_0.2.0.6-1_amd64.deb 下载解压，大概是这么一个目录结构: 1234deepin-elf-verify_0.2.0.6-1_amd64├── control.tar.xz├── data.tar.xz└── debian-binary 是个常规的deb包该有的结构了。 control.tar.xz 中存放了deb包的相关信息 data.tar.xz 是整个包最终会被安装到系统中的文件 终于到了激动人心的时刻了，打开 data.tar.xz ！ 搞错了，再来 打开UOS的源链接，使用curl+grep检索deepin-elf-verify在源中的相对位置 1curl -sL https://uos.deepin.cn/uos/dists/eagle/main/binary-amd64/Packages | grep deepin-elf-verify | grep pool 获得输出: Filename: pool/main/d/deepin-elf-verify/deepin-elf-verify_0.0.14.5-1_amd64.deb Filename: pool/main/d/deepin-elf-verify/deepin-elf-verify-dbgsym_0.0.14.5-1_amd64.deb 拼接为链接: https://uos.deepin.cn/uos/pool/main/d/deepin-elf-verify/deepin-elf-verify_0.0.14.5-1_amd64.deb 下载后打开 data.tar.xz 说说结论吧对于UOS在UOS下，deepin-elf-verify用于检测用户运行的进程是否被deepin信任的证书签名过，虽然有些过于限制用户，对于一个将要广泛用于政府机关的发行版而言是可以理解的。 对于deepin deepin-elf-verify 在 deepin 上就是个空包。 当我们使用 deepin 安装一个含有 deepin-elf-verify 的软件包时，apt 会自动从源内搜索并安装 deepin-elf-verify，由于是个空包，他对于系统不会有任何负担。 大多数依赖deepin-elf-verify的程序都把依赖写成了deepin-elf-verify (= 0.0.16.7-1)，而在deepin源中，deepin-elf-verify版本号是 0.2.0.6，因此在未来的很长一段时间里应该都是满足要求的，说明统信那边并没有「想要让deepin装不上UOS的包」的这种想法，可见在这一点上，统信还没有明显的偏心。 在别的Deb发行版下deepin-elf-verify存在于、并且仅仅存在于 deepin 和 UOS 的源内。 而当我们使用别的 deb 发行版（如Debian、Ubuntu）时，apt 无法在他们自己的源内找到 deepin-elf-verify ，apt就会报错并且停止安装。 小结: 至于其最终目的，是为了__________________________","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"deepin","slug":"deepin","permalink":"https://zhul.in/tags/deepin/"}]},{"title":"【翻译】请别再使用主题装饰我们的软件","slug":"please-dont-theme-our-apps","date":"2021-11-05T12:35:58.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/11/05/please-dont-theme-our-apps/","link":"","permalink":"https://zhul.in/2021/11/05/please-dont-theme-our-apps/","excerpt":"","text":"标题中的「我们」当然不是我自己，这是一封来自GNOME开发者针对广大GNOME社区开发者的一封公开信。看着挺有意思的，其中也透露出了GNOME的设计理念，我在这里尽力将其不掺杂个人情感地翻译完。原文可以查看这里: https://stopthemingmy.app/ 请从头到尾阅读这封信。 这份信针对的是那些在默认设置下使用第三方主题破坏软件体验的发行版，而不是那些试图使用第三方主题美化自己桌面的用户。（原文中出现的是tinkerers，意为修补匠） 我们是 GNOME 平台的应用开发者与设计者，我们为自己的成果感到自豪，并努力确保我们的应用能够为人们提供良好的体验。 然而不幸的是，在许多情况下，我们所有在软件的设计、开发、测试上所做出努力都因为第三方主题而变得徒劳无功。 注: 这些例子纯粹只是用于说明问题，并不针对个别主题。所以，主题开发者们别多想。❤️ 当然，还有些不那么直接的后果，包括: 在GNOME软件中心或Flathub 中使用的截图( Appstream Screenshots )中的UI会和你实际安装以后的UI看上去完全不同，这使得这些截图失去了原有的意义。 如果系统的UI元素和用户帮助文档中出现的元素不同，用户帮助文档将会极大地丢失原有意义。 这些博客文章更详细地解释了主题化的一些问题： GTK Stylesheets — Restyling apps at scale App Icons — Linux Themes &amp; Third-Party Icons 这就是为什么我们心平气和地要求我们的软件不要被主题化。 它们是被上游所使用的（即默认的） GNOME 样式表、图标和字体 所构建和测试的，因此它们在用户的系统上应该是原汁原味的。 虽然我们可以直接在我们的应用程序中禁用主题，但我们不想这么做。 我们认为技术性的解决方案可能不会有效，因为这不是技术问题。 在技术上，我们希望软件可以在没有人工干预的情况下被自动地重新设计，但这到目前为止仍然是个幻想。在这种技术现状被改善之前，这种（应用被主题搞炸）的情况几乎不可能被解决。因此，我们正试图通过这封信向大家告知这种情况，并尽自己的一份力量。 如果你想要美化你自己的系统，我们没有意见。然而，如果你改变了诸如图标、样式表等东西，你应当意识到你的行为不会得到支持（应该是指不会得到社区的帮助）。您遇到的任何问题都应直接报告给主题开发者，而不是软件开发者。 作为一个平台，我们坚信GTK应当停止强制默认在所有软件使用同一个样式表（也就是说应该可以为不同的软件指定不同的GTK样式）。应用程序不必通过把样式表写死来避免这种情况，而是应该使用平台样式表（系统提供的样式表），除非他们魔改了样式表以加入其他内容。 我们意识到这是一个复杂的问题，但假设每个应用程序都适用于每个样式表同样也是一个糟糕的默认设置。 如果你是更改了系统样式表和图标的发行版的开发人员，希望你重新考虑此决定。 在没有任何 QA 的情况下更改第三方应用程序是鲁莽的，并且在任何其他平台上都是不可接受的。 您的行为对我们这些应用程序开发人员造成了很大的伤害，并且正在损害除了您的发行版以外的整个软件生态。 我们理解发行版需要脱颖而出来吸引用户。但是，我们敦促您想办法在不剥夺我们代理权的情况下做到这一点。 我们厌倦了当人们告诉我们「这个主题魔改得还不错」时，我们必须为我们从未打算支持的设置做额外的工作。你绝对不会对 Blender、Atom、Telegram 或其他第三方应用程序做出这样的魔改。我们的应用程序使用 GTK 并不意味着我们可以接受别人对它们的魔改。 由于你要使用 GNOME 平台开发，我们预设「你希望这个软件生态是健康的」。如果现实确实如此，我们要求您停止使用主题装饰我们的软件的这一行为。 署名, Alexander Mikhaylenko Maintainer of Games Avi Wadhwa Maintainer of Organizer Bilal Elmoussaoui Maintainer of Authenticator, Icon Library, Contrast and Obfuscate Cédric Bellegarde Maintainer of Lollypop, Eolie, and Passbook Christopher Davis Core contributor to Fractal Daniel García Moreno Maintainer of Fractal and Timetrack Falk Alexander Seidl Maintainer of Password Safe Felix Häcker, Maintainer of Gradio/Shortwave, Fragments, and Remotely Forever XML Maintainer of Random Jan Lukas Gernert Author of FeedReader and NewsFlash Jordan Petridis Maintainer of Podcasts Julian Sparber Core contributor to Fractal, maintainer of Teleport Lains Maintainer of Notejot, Khronos, Dot Matrix, Quilter, and Emulsion Manuel Genovés Maintainer of UberWriter Maximiliano Sandoval Maintainer of Decoder and Lorem, core contributor to Password Safe Michael Gratton Maintainer of Geary Rafael Mardojai C.M. Maintainer of Blanket, Dialect, Share Preview and Webfont Kit Generator Sophie Herold Maintainer of Pika Backup Tobias Bernard Designer of Fragments and Podcasts (among others) Zander Brown Maintainer of Icon Preview The Bottles Developers The Pitivi Developers Note: Even though some of us are Foundation members or work on GNOME, these are our personal views as individuals, and not those of the GNOME Project, the GNOME Foundation, or our employers.","categories":[],"tags":[{"name":"翻译","slug":"翻译","permalink":"https://zhul.in/tags/%E7%BF%BB%E8%AF%91/"}]},{"title":"Waydroid on KDE 初体验","slug":"waydroid-experience-on-kde","date":"2021-10-31T07:57:57.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/10/31/waydroid-experience-on-kde/","link":"","permalink":"https://zhul.in/2021/10/31/waydroid-experience-on-kde/","excerpt":"","text":"在西木野羰基的博客中看到了其在Fedora中使用waydroid跑明日方舟的截图，心里有有些痒痒了，决定在Archlinux上尝试使用waydroid。 Waydroid是什么Waydroid是一个基于lxc容器技术，用以启动完整安卓系统的方案。 默认使用了LineageOS-17.1，对应 Aosp10，相比起 anbox 显然是更加新了。 内核支持waydroid需要内核提供Ashmem和binder支持，西木野羰基是使用的自己编译的内核。而我在使用Archlinux，因此直接使用linux-zen即可。 注: AUR上的linux-xanmod虽然也有这些模块支持，但是在编译时设置了psi=0以提升性能，而waydroid恰巧需要psi=1的支持，故不可使用。 安装Archlinux已经有人将其打包上传到了AUR，我们直接安装即可。我使用的 AUR Helper 是 yay，所以直接 1yay -S waydroid --noconfirm 再装个python-pyclip解决剪切板同步的问题 1yay -S python-pyclip 下载Waydroid镜像1sudo waydroid init 这一步将会自动（从SourceForge）下载纯净的LineageOS镜像压缩包并解压，处于中国大陆网络环境的用户记得（ ） 如果你需要Gapps，可以指定下载Gapps版本，但是这将需要你获取Android ID并向谷歌提交 Custom Rom 的 Gapps 申请。见这里 1sudo waydroid init -s GAPPS 启用服务这个没什么好说的，使用systemctl启动服务。 1sudo systemctl start waydroid-container.service 开启waydroid1waydroid session start 一些简单的使用技巧如果你想直接展示整个系统界面，可以使用 1waydroid show-full-ui 我们也可以用waydroid app launch $&#123;package_name&#125;的方式来启动单个应用（包名可以使用waydroid app list来获取 当然，可以直接在Linux环境里 安装 某个apk 1waydroid app install path/to/apkfile.apk F11有助于解决应用分辨率问题，左Alt有助于解决键盘无法输入的问题。 Github上有个脚本，可以帮助 安装OpenGapps/Magisk/arm转译库/获取Android ID。 牢骚时间 对AMD和英伟达的显卡支持都不太行 不能直接输入中文，还是得借助安卓系统内的输入法。 不自带arm转译库，通过脚本安装的转译库似乎兼容性挺差（至少我是成功打开什么arm软件 系统运行的流畅度还可以 相关的资料似乎有点少，官方的文档也没有写得太详细 Waydroid会自动在$HOME/.local/share/applications/为wayland内的安装应用添加Desktop文件（这让我有些反感 一些截图","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"Experience","slug":"Experience","permalink":"https://zhul.in/tags/Experience/"},{"name":"KDE","slug":"KDE","permalink":"https://zhul.in/tags/KDE/"},{"name":"Waydroid","slug":"Waydroid","permalink":"https://zhul.in/tags/Waydroid/"}]},{"title":"PicUploader使用系列（二）——为KDE的dolphin添加右键快捷菜单","slug":"picuploader-with-kde-action","date":"2021-10-24T14:26:50.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/10/24/picuploader-with-kde-action/","link":"","permalink":"https://zhul.in/2021/10/24/picuploader-with-kde-action/","excerpt":"","text":"上一篇文章我们在Archlinux中成功部署了PicUploader的web端，本文我们来讲讲如何为KDE的dolphin添加右键快捷键上传，效果类似这样。（gif图来自PicUploader作者的博客) &lt;center&lt;img src=”https://img.xiebruce.top/2018/09/11/f4859eda8832f814486fc00df971e3cc.gif&quot; width = “” height = “”&lt;/center 创建.desktop文件12mkdir -p $HOME/.local/share/kservices5/touch $HOME/.local/share/kservices5/picuploader.desktop 填上这段内容12345678910111213[Desktop Entry]Actions=PicUploader;MimeType=image/jpeg;image/png;Type=ServiceX-KDE-Priority=TopLevelX-KDE-ServiceTypes=KonqPopupMenu/PluginIcon=/var/www/image/favicon.ico[Desktop Action PicUploader]Name=Upload with PicUploaderName[zh_CN]=使用PicUploader上传Icon=/var/www/image/favicon.icoExec=php /var/www/image/index.php %F | scopy 注: 这里的 scopy 是我在下面自己创建的一段脚本，用以同时满足x11和wayland下的使用，如果你仅使用x11的话直接改成xclip -selection clipboard即可。 MimeType指的是文件类型。在这份desktop中，我仅指定了png和jpg文件在右键时会弹出picuploader的上传菜单，如果你需要更多文件类型的MimeType，你可以参考下gwenview的desktop都写了哪些文件类型。 MimeType=inode/directory;image/avif;image/gif;image/jpeg;image/png;image/bmp;image/x-eps;image/x-icns;image/x-ico;image/x-portable-bitmap;image/x-portable-graymap;image/x-portable-pixmap;image/x-xbitmap;image/x-xpixmap;image/tiff;image/x-psd;image/x-webp;image/webp;image/x-tga;application/x-krita;image/x-kde-raw;image/x-canon-cr2;image/x-canon-crw;image/x-kodak-dcr;image/x-adobe-dng;image/x-kodak-k25;image/x-kodak-kdc;image/x-minolta-mrw;image/x-nikon-nef;image/x-olympus-orf;image/x-pentax-pef;image/x-fuji-raf;image/x-panasonic-rw;image/x-sony-sr2;image/x-sony-srf;image/x-sigma-x3f;image/x-sony-arw;image/x-panasonic-rw2; 安装所需组件通知提示右下角弹出文字提示的功能依赖于libnotify 1sudo pacman -S libnotify --needed 复制到粘贴板复制到粘贴板的功能依赖于xclip sudo pacman -S xclip --needed 考虑到我可能在 x11 和 wayland 之间反复横跳，仅仅一个xclip看起来满足不了我的需求 1sudo pacman -S xclip wl-clipboard --needed 手糊了一段脚本，用以判断对应的运行环境并调用相应的粘贴板工具 1234567891011/usr/bin/scopy---#!/bin/bashif [ &quot;$XDG_SESSION_TYPE&quot; = &quot;wayland&quot; ]; then wl-copyelif [ &quot;$XDG_SESSION_TYPE&quot; = &quot;x11&quot; ]; then xclip -selection clipboardelse echo &quot;ERROR! You are using $XDG_SESSION_TYPE&quot;fi 为/usr/bin/scopy授予运行权限 1sudo chmod 755 /usr/bin/scopy 启用该动作菜单1kbuildsycoca5 处理普通用户无权写入logs的问题1sudo chmod 777 -R /var/www/image/logs/ 最终结果&lt;center&lt;img src=”https://bu.dusays.com/2022/08/10/62f36f57f34aa.gif&quot; width = “” height = “”&lt;/center 参考链接在 KDE Plasma 5 的 Dolphin 中添加一个右键动作菜单 PicUploader: 一个还不错的图床工具","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"KDE","slug":"KDE","permalink":"https://zhul.in/tags/KDE/"},{"name":"PicUploader","slug":"PicUploader","permalink":"https://zhul.in/tags/PicUploader/"}]},{"title":"PicUploader使用系列（一）——在Archlinux上使用Caddy部署PicUploader","slug":"picuploader-on-archlinux-with-caddy","date":"2021-10-21T14:15:33.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/10/21/picuploader-on-archlinux-with-caddy/","link":"","permalink":"https://zhul.in/2021/10/21/picuploader-on-archlinux-with-caddy/","excerpt":"","text":"之前找对大陆网络友好的图床时，找到了cloudinary，但是全英文界面对操作增加了不少难度，其页面也不是很简洁，让我一下打消了使用网页版的念头。通过搜索，找到了 PicUploader 这一方案，使用php编写，支持cloudinary的api。 作者在其博客中仅提供了nginx的部署方案，我参考其配置文件成功实现了在caddy下的部署，并且花费了数个小时排坑，故写下本文帮助后来者节省时间。 安装caddy和php-fpm以及所需的拓展1sudo pacman -S caddy php-fpm php-gd php-sqlite --needed 配置php-fpm在/etc/php/php.ini启用PicUploader所需拓展PicUploaer依赖于fileinfo、gd、curl、exif、pdo_sqlite拓展，可以使用php -m命令来查看目前加载成功了的插件。 12345678910111213141516171819202122232425262728293031323334353637383940414243;extension=bcmath;extension=bz2;extension=calendar- extension=curl+ extension=curl;extension=dba;extension=enchant- extension=exif+ extension=exif;extension=ffi;extension=ftp- extension=gd+ extension=gd;extension=gettext;extension=gmp;extension=iconv;extension=imap;extension=intl;extension=ldap;extension=mysqli;extension=odbc;zend_extension=opcache;extension=pdo_dblib;extension=pdo_mysql;extension=pdo_odbc;extension=pdo_pgsql- extension=pdo_sqlite+ extension=pdo_sqlite;extension=pgsql;extension=pspell;extension=shmop;extension=snmp;extension=soap;extension=sockets;extension=sodium;extension=sqlite3;extension=sysvmsg;extension=sysvsem;extension=sysvshm;extension=tidy;extension=xmlrpc;extension=xslextension=zip 编辑/etc/php/php.ini以增加单文件上传大小限制查出这个问题浪费了我整整4小时时间。 12- upload_max_filesize = 2M+ upload_max_filesize = 100M 编辑/etc/php/php-fpm.d/www.conf使其在运行时使用caddy用户。12345678910111213141516171819202122232425262728293031---; Unix user/group of processes; Note: The user is mandatory. If the group is not set, the default user&#x27;s group; will be used.- user = http+ user = caddy- group = http+ group = caddy; The address on which to accept FastCGI requests.; Valid syntaxes are:; &#x27;ip.add.re.ss:port&#x27; - to listen on a TCP socket to a specific IPv4 address on; a specific port;; &#x27;[ip:6:addr:ess]:port&#x27; - to listen on a TCP socket to a specific IPv6 address on------; Note: This value is mandatory.listen = /run/php-fpm/php-fpm.sock; and group can be specified either by name or by their numeric IDs.; Default Values: user and group are set as the running user; mode is set to 0660- listen.owner = http+ listen.owner = caddy- listen.group = http+ listen.group = caddy;listen.mode = 0660; When POSIX Access Control Lists are supported you can set them using; these options, value is a comma separated list of user/group names.; When set, listen.owner and listen.group are ignored;listen.acl_users =;listen.acl_groups =--- 2022年1月14日更新：在 Fedora 尝试部署的时候遇到了新的坑，Fedora 的相应配置文件为 /etc/php-fpm.d/www.conf，相应修改如下 12345678910111213141516171819202122232425262728293031323334353637383940; Unix user/group of processes; Note: The user is mandatory. If the group is not set, the default user&#x27;s group; will be used.; RPM: apache user chosen to provide access to the same directories as httpd-user = apache+user = caddy; RPM: Keep a group allowed to write in log dir.-user = apache+group = caddy; The address on which to accept FastCGI requests.; Valid syntaxes are:; &#x27;ip.add.re.ss:port&#x27; - to listen on a TCP socket to a specific IPv4 address on; a specific port;------; Set permissions for unix socket, if one is used. In Linux, read/write; permissions must be set in order to allow connections from a web server.; Default Values: user and group are set as the running user; mode is set to 0660-;listen.owner = nobody+listen.owner = caddy-;listen.owner = nobody+listen.group = caddy;listen.mode = 0660; When POSIX Access Control Lists are supported you can set them using; these options, value is a comma separated list of user/group names.; When set, listen.owner and listen.group are ignored-listen.acl_users = apache,nginx+;listen.acl_users = apache,nginx;listen.acl_groups =; List of addresses (IPv4/IPv6) of FastCGI clients which are allowed to connect.; Equivalent to the FCGI_WEB_SERVER_ADDRS environment variable in the original; PHP FCGI (5.2.2+). Makes sense only with a tcp listening socket. Each address; must be separated by a comma. If this value is left blank, connections will be; accepted from any ip address.; Default Value: anylisten.allowed_clients = 127.0.0.1 拉取 PicUploader 最新代码首先创建一个用于存放代码的目录 1sudo mkdir -p /var/www/ clone 最新源码 1sudo git clone https://github.com/xiebruce/PicUploader.git /var/www/picuploader 将代码所有权转交给caddy用户 1sudo chown -R caddy:caddy /var/www/picuploader 编辑Caddyfilecaddy默认使用/etc/caddy/Caddyfile，因此如果你就部署这一个站点，直接修改这个就好了。 caddy的语法非常简洁易懂，因此我随手写了几行就能跑起来了。 下面是我用的Caddyfile，如果你在服务器上部署，请把http://api.picuploader.com更换为你服务器所需要绑定的域名(不带http协议头)，caddy将自动为你申请ssl证书。 123456789101112131415161718192021http://api.picuploader.com &#123; root * /var/www/picuploader php_fastcgi * unix//run/php-fpm/php-fpm.sock &#123; index dashboard.php &#125; file_server &#123; index index.php &#125; handle_errors &#123; root * /etc/caddy/error rewrite * /error.html templates file_server &#125;&#125;# Import additional caddy config files in /etc/caddy/conf.d/import /etc/caddy/conf.d/* php我选择了监听本地unix//run/php-fpm/php-fpm.sock的方案，这个路径在上文的/etc/php/php-fpm.d/www.conf可以设置，如需查询，直接使用 grep listen\\ = /etc/php/php-fpm.d/www.conf应该就能看见。 设置访问密码（可选）caddy2开始不允许在caddyfile中直接指定明文密码，因此我们需要用hash-password获取加密后的密码密文 1caddy hash-password --plaintext &lt;YourPassword 再在Caddyfile中，加上 123basicauth /* &#123; &lt;username &lt;hashed_password&#125; 修改hosts/设置DNS解析由于 api.picuploader.com 这个域名不在我手里，而我只是想在本地使用，并不打算部署到服务器，因此修改hosts将这个域名解析到本地是个不错的选择。 1sudo sh -c &quot;echo &#x27;127.0.0.1 api.picuploader.com&#x27; /etc/hosts&quot; 而你若是在服务器上部署，应当去设置DNS解析，这个应该不需要我多说。 开启服务在Archlinux下，我习惯直接用systemd运行caddy和php-fpm以开机自启动。 1sudo systemctl enable --now caddy php-fpm 最终测试在浏览器内访问 api.picuploader.com ，如果能看到页面，就算是成功啦。 设置上传参数见作者博客：PicUploader: 各图床获取上传图片参数的方法","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"Caddy","slug":"Caddy","permalink":"https://zhul.in/tags/Caddy/"},{"name":"PicUploader","slug":"PicUploader","permalink":"https://zhul.in/tags/PicUploader/"}]},{"title":"Archlinux坚果云踩坑实录","slug":"nutstore-guide-on-archlinux-kde","date":"2021-10-01T16:21:34.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/10/02/nutstore-guide-on-archlinux-kde/","link":"","permalink":"https://zhul.in/2021/10/02/nutstore-guide-on-archlinux-kde/","excerpt":"","text":"在Archlinux上，坚果云似乎出现了一些问题。 安装1yay -S nutstore 这个没什么可说的，AUR还是Archlinuxcn都无所谓，都是一模一样的。 白屏双击图标，咦？怎么白屏了？ 看看AUR评论区，有人说nutstore-experimental修了？ 对比了一下，就是改了改/opt/nutstore/conf/nutstore.properties 1sudo sed -i &#x27;s|webui.enable=true|webui.enable=false|&#x27; /opt/nutstore/conf/nutstore.properties 轻松解决 窗口太小不能登陆 桌面使用了暗色主题导致部分字体不清晰？ 参考使用fakehome方案暂时解决跑在KDE暗色主题下的程序使用亮色字体的问题编写启动命令 1bwrap --dev-bind / / --tmpfs $HOME/.config /usr/bin/nutstore 本地markdown文件的文件类型被识别成了「坚果云 Markdown」这个是由于坚果云自作主张推广他自己并不好用的lightapp，写了几条 mime 的规则，如图 看来在我们的启动命令中也需要防止坚果云接触到$HOME/.local/share/这个路径，所以现在的启动命令得写成这样。 1bwrap --dev-bind / / --tmpfs $HOME/.config --tmpfs $HOME/.local/share/ /usr/bin/nutstore 修改desktop文件，使其使用我们自己攥写的启动命令首先，复制一份desktop文件到我们的 $HOME 目录下，好处是下次更新的时候我们所做的更改不会被包管理器覆盖。 1cp /usr/share/applications/nutstore.desktop $HOME/.local/share/applications/ 再修改$HOME/.local/share/applications/nutstore.desktop 12345678910111213[Desktop Entry]Encoding=UTF-8Type=ApplicationTerminal=falseIcon=nutstore-Exec=/usr/bin/nutstore+Exec=bwrap --dev-bind / / --tmpfs $HOME/.config --tmpfs $HOME/.local/share/applications StartupWMClass=NutstoreName=NutstoreName[zh_CN]=坚果云 Comment=Data Sync, Sharing, BackupComment[zh_CN]=数据同步,共享和备份Categories=Network;Application;","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"}]},{"title":"把老版的火狐顶栏UI带回来","slug":"bring-firefox-old-topbar-back","date":"2021-10-01T11:20:23.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/10/01/bring-firefox-old-topbar-back/","link":"","permalink":"https://zhul.in/2021/10/01/bring-firefox-old-topbar-back/","excerpt":"","text":"在Firefox更新UI以后，我就一直感觉不太适应。顶栏的一个个标签页占用的体积达到了原来的1.5~2倍。Thanks to black7375/Firefox-UI-Fix ，我们得以把以前的顶栏找回来。 加载新的cssclone该github项目并进入对应路径后，执行install.sh 123git clone https://github.com/black7375/Firefox-UI-Fix.gitcd Firefox-UI-Fix.git./install.sh 在接下来的对话中，我们选择Photon-Style，这是最接近老版UI的。 紧接着脚本会要求我们选择我们的Firefox数据文件夹，我们可以打开Firefox，在浏览器地址栏输入about:support查看到我们所使用的数据文件夹路径。 使用空格键选择我们的数据文件夹后，在终端上该路径开头处的[ ]中会被打上X，确认无误后，敲回车。 重启浏览器，顶栏就长成了这样。 添加主题为了进一步模仿Firefox经典的配色，我们可以安装上这个主题，变成这样 禁用暗色模式如果你的系统主题使用的是深色，导致了诸如TUNA镜像站自动为你启用了暗色模式，而你想禁用的话，之前通过修改about:config方案依然适用。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Firefox","slug":"Firefox","permalink":"https://zhul.in/tags/Firefox/"},{"name":"Bwrap","slug":"Bwrap","permalink":"https://zhul.in/tags/Bwrap/"}]},{"title":"记录一次原创文章被抄袭","slug":"csdn-copied-my-article","date":"2021-09-20T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/09/21/csdn-copied-my-article/","link":"","permalink":"https://zhul.in/2021/09/21/csdn-copied-my-article/","excerpt":"","text":"今天在网站自搜的时候偶然间发现了一个叫「程序员宝宝」的站点转载了我去年在知乎专栏上发的一篇文章《Ubuntu下对deepin-wine的使用详解》。 转载的质量并不高，超链接都没有转载上去，只有干巴巴的图片和文字。翻到结尾处，我一口老血喷出。 我就纳闷了，我作为原创博主，自己都没有给这篇文章挂上CC的版权协议，怎么就有人自称是原创给我挂上了CC协议，要知道我知乎还明确勾选了「转载需要申请」呢。 抱着吃瓜的心态在谷歌上搜索，我发现了五篇抄袭我的文章。CSDN三篇，还有「程序员宝宝」和「程序员宅基地」使用相同UI的、被我怀疑是机器人搬运的站点。 CSDN那边，我在页面页脚处找到了「在线客服」，注册帐号后联系了客服，客服反应非常迅速，5分钟内就对抄袭文章进行了下架处理，这点值得表扬。 至于「程序员宝宝」和「程序员宅基地」这两个站点，在他们的版权申明中写得很清楚。 如果你是文章作者： 请通过邮件联系我们，邮件内容包括： 待删除的文章链接 发件人是待删除文章作者的证明（如果发件人邮箱地址能证明你是文章作者，此项内容可以为空） 我们会在收到邮件后7个工作日内进行处理。 但我找遍了整个网站，根本没有发现站点方的邮箱。 不知诸位有何解决方案？","categories":[],"tags":[]},{"title":"使用AUR(Helper)安装软件时究竟发生了什么？对于常见的构建错误如何解决？","slug":"detailed-explanation-for-aur","date":"2021-09-11T11:22:29.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/09/11/detailed-explanation-for-aur/","link":"","permalink":"https://zhul.in/2021/09/11/detailed-explanation-for-aur/","excerpt":"","text":"虽然对于没有能力手动修改/编写PKGBUILD的Arch用户其实是不应该使用AUR中的包的，这些软件的PKGBUILD可以由个人随意发布，并不能保证安全性，但是作为Archlinux的特色，但随着AUR Helper的趋于便利，还是吸引了不少小白使用AUR。本文将主要讲一讲 AUR Helper 帮助我们安装软件时到底做了些什么事情，并提供一些使用AUR Helper构建时常见错误的解决方案。 PartⅠ基本原理makepkg是如何工作的？以钉钉举例，我们可以从AUR上使用 git clone https://aur.archlinux.org/dingtalk-bin.git 获取到由这个包的维护者为我们提前写好的构建脚本。他的目录大概是长成下面这个样子: 12345678dingtalk-bin├── com.alibabainc.dingtalk.desktop├── dingtalk.sh├── .git├── .gitignore├── PKGBUILD├── service-terms-zh└── .SRCINFO 其中，.git是git的工作目录，可以忽视。 .gitignore属于git的配置文件之一，我们也不用管。 PKGBUILD是这个目录下最重要的东西，是一个用于提供参数的脚本。makepkg通过执行PKGBUILD脚本来获取到参数，自动进行下载和构建过程。 service-terms-zh, com.alibabainc.dingtalk.desktop, dingtalk.sh是包里所需要用到的东西。 当我们cd到这个目录下执行makepkg时， makepkg会调用curl / git下载PKGBUILD中source=()部分中以http(s)协议头或者git+开头的链接，这些东西将会被下载到这个目录的src文件夹下。 对于curl下载的东西，makepkg会使用校验码核对下载到的文件是否完整、是否是当初这个包的维护者下载到的这一个。 校验通过后，makepkg会依次执行prepare()&#123;&#125;、build()&#123;&#125;、package()&#123;&#125;函数中的命令陆续完成准备、编译过程，并将最终要打进包里的文件放置到pkg文件夹下。 最后，makepkg将会将pkg文件夹的内容压缩成包。 AUR Helper 干了些什么我们还是以钉钉为例，看看我们执行yay dingtalk-bin时到底发生了什么。 PartⅡ常见错误解决方案如果有其他情况觉得可以完善的，欢迎在评论区留言。 1. base-devel 没有安装正如上面所说的，没有安装base-devel组，赶紧补上! 由于base-devel并不是一个具体的包，而是由多个包构成的包组，其实并没有很好的方法来检测你是否已经安装。 所以如果你不确定，你也可以执行下面的命令来确保自己已经安装。 1sudo pacman -S base-devel --noconfirm --needed 常见表现: 1ERROR: Cannot find the strip binary required for object file stripping. 1PKGBUILD: line XXX XXX: command not found 2. source源文件下载失败 网络问题国内的网络问题不用多说了，大多数情况下都是Github连接不上。 最简单的解决方案就是把source里下载失败的东西通过特殊手段（比如你浏览器设置下代理，或者找找fastgit这种反代）下载下来以后直接扔到PKGBUILD所在的路径，然后手动执行makepkg -si。 -s代表自动下载makedepend，-i表示构建成功以后自动安装 yay存放PKGBUILD的默认路径是在$HOME/.cache/yay/$pkgname下面，具体可以参考我的另一篇关于yay的用法详解的博客。 我在这里再讲一种使用 fastgit 作为反代加速github下载的方法。如果觉得fastgit帮助到了你，你可以考虑给fastgit项目打钱。 当你的yay出现这个询问菜单时，（也就是出现Diffs to show/显示哪些差异？字样时） 我们再开一个终端，输入 1sed -i &quot;s|github.com|hub.fastgit.org|g&quot; $HOME/.cache/yay/*/PKGBUILD 接着就下一步安装即可。 链接失效这种情况多见于维护者维护不到位，上游放出了新版本包并删除老版本包以后维护者没有及时跟进的。你可以去逛一逛AUR的评论区查看解决方案，或者去查找上游的最新版本是多少，尝试更改PKGBUILD中的pkgver参数和checksum以后尝试makepkg。 需要手动下载一般情况下是上游没有提供直链，makepkg无法自行下载，需要人工介入。解决方法同上面的网络问题 3. checksum 错误上文已经提到过，checksum用于判断你所下载到的软件和维护者当初下载到的是否一致。但是有些情况下，确实是维护者忘了更新checksum值了，因此我们需要做一个判断。 打开.SCRINFO，找到checksum报错的那个文件的链接。 使用wget/curl等工具将他下载下来，可以通过md5sum+文件名的方式获取他们的md5值。连续下载两次，核对两次的检验值是否一致。 如果结果一致，那么说明并不是网络波动导致的检验值不符，而是维护者没有及时跟进导致的，你可以使用yay -S $pkgname --skipchecksums的方式跳过验证校验值的过程，或者你可以修改PKGBUILD中的校验值为&quot;SKIP&quot;来跳过某一文件的校验后手动makepkg。 4. tuna反代受限tuna的服务器只有一个ip，但当使用他提供的AUR的反代服务时，全国的使用者都会被AUR认为是tuna这一个ip，过大的请求数量可能导致tuna的服务器超出AUR每天给每个ip限制的请求次数。 具体表现: 1Rate limit reached 解决方案，改回AUR的服务器，使用自己的ip进行请求 1yay --aururl &quot;https://aur.archlinux.org&quot; --save 写在最后关于AUR使用的更多细节可以阅读 《yay进阶》","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"}]},{"title":"使用fakehome方案暂时解决跑在KDE暗色主题下的程序使用亮色字体的问题","slug":"wrong-fonts-color-fix-under-kde-with-a-dark-theme","date":"2021-09-04T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/09/05/wrong-fonts-color-fix-under-kde-with-a-dark-theme/","link":"","permalink":"https://zhul.in/2021/09/05/wrong-fonts-color-fix-under-kde-with-a-dark-theme/","excerpt":"","text":"9月6日更新：AUR的wemeet-bin维护者sukanka已经将咱的运行指令直接打进了包内，故本文已经基本失去原本的应用意义，但仍可以作为一个案例来解决类似问题。 在使用腾讯最近推出的Linux原生腾讯会议的时候，咱遇到了个十分影响体验的问题。 我在使用KDE的暗色主题，腾讯回忆自作主张将字体颜色调成了白色。然而，字体背景是白色的没，因此导致对比度下降，字体难以辨认。效果大概是这个鬼样子: 然而我一时半会儿却找不到合适的变量在运行腾讯会议之前unset，无法指定它使用一个正确的字体颜色。 此时，我想到了fakehome的解决方案——bwrap。 关于bwrap，依云在ta的博客里讲过运行原理，我在这里直接摘一小段过来 bwrap 的原理是，把 / 放到一个 tmpfs 上，然后需要允许访问的目录通过 bind mount 弄进来。所以没弄进来的部分就是不存在，写数据的话就存在内存里，用完就扔掉了。 而我们要做的，就是开一个tmpfs作为$HOME/.config，让腾讯会议读取不到KDE的主题配置文件。 使用如下命令 1bwrap --dev-bind / / --tmpfs $HOME/.config wemeet 软件启动确认没有问题后，我们可以更改腾讯会议desktop中的启动命令 1sudo $EDITOR /usr/share/applications/wemeetapp.desktop 将Exec=后面的命令改成我们刚刚启动所使用的命令即可。 关键词: bwrap, linux, 暗色模式, 深色模式, 夜间模式, 白色字体, 亮色字体","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"Bwrap","slug":"Bwrap","permalink":"https://zhul.in/tags/Bwrap/"}]},{"title":"来，从AUR给Fedora偷个包","slug":"build-a-rpm-package-from-aur-with-archlinux","date":"2021-07-22T17:50:09.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/07/23/build-a-rpm-package-from-aur-with-archlinux/","link":"","permalink":"https://zhul.in/2021/07/23/build-a-rpm-package-from-aur-with-archlinux/","excerpt":"","text":"前一阵子，某Q群里的某初中生居然跳上了Fedora这辆灵车，还一直缠着我要我给他整个打rpm包的教程，说什么要复兴FedoraCN之类的我听不懂的话。碰巧听说Fedora似乎还没有wechat-uos，于是我就寻思着给Fedora打一个，顺便熟悉一下dnf的操作。 事实上，Fedora和Archlinux的目录结构很相似，理论上来讲Archlinux的大部分包都可以直接解压后塞到Fedora里直接用，对于咱这种日常偷Deb包的Arch用户来说基本没什么难度，唯一的难点在于处理依赖关系。 Tips1: 使用电脑端的访客可以在页面左下角打开侧栏以获取目录。 下载链接如果你是为了wechat-uos这个包而非教程而来的，下载链接在这里。https://zhullyb.lanzoui.com/ikN55rqr7ah 偷包环境 Archlinux实体机(打包) Fedora虚拟机(依赖查询、测试) 准备好wechat-uos首先，咱们先在Archlinux上把我们的wechat-uos先打包好，这个老生常谈的问题我不多赘述了。 1yay -S wechat-uos --noconfirm 查找wechat-uos在Archlinux上所需的依赖再去查看wechat-uos所需要的依赖 1234567891011121314151617181920212223[zhullyb@Archlinux ~]$ yay -Si wechat-uos:: Querying AUR...Repository : aurName : wechat-uosKeywords : electron patched uos wechat weixinVersion : 2:2.0.0-1145141919Description : UOS专业版微信 (迫真魔改版)URL : https://www.chinauos.com/resource/download-professionalAUR URL : https://aur.archlinux.org/packages/wechat-uosGroups : NoneLicenses : MITProvides : NoneDepends On : gtk2 gtk3 libxss gconf nss lsb-release bubblewrapMake Deps : imagemagickCheck Deps : NoneOptional Deps : NoneConflicts With : NoneMaintainer : DuckSoftVotes : 16Popularity : 0.603501First Submitted : Wed 30 Dec 2020 12:21:51 PM CSTLast Modified : Sat 20 Feb 2021 06:53:24 AM CSTOut-of-date : No 查找Fedora上的对应依赖包名然后我们需要去Fedora上找一找这些依赖在Fedora上的包名都叫什么。 比如这个bubblewrap，我们需要的是他提供的bwrap，所以我们直接在Fedora上sudo dnf provides bwrap 再比如gconf并没有在/usr/bin路径下直接留下什么非常具有代表性的可执行文件，所以在Fedora里面寻找等效包就稍微复杂一些，但也并非不能找。 先在Archlinux下使用pacman -Ql gconf，输出结果有点长，我就截一小段上来。 12345678910111213141516171819[zhullyb@Archlinux ~]$ pacman -Qlq gconf/etc//etc/gconf//etc/gconf/2//etc/gconf/2/evoldap.conf/etc/gconf/2/path/etc/gconf/gconf.xml.defaults//etc/gconf/gconf.xml.mandatory//etc/gconf/gconf.xml.system//etc/xdg//etc/xdg/autostart//etc/xdg/autostart/gsettings-data-convert.desktop/usr//usr/bin//usr/bin/gconf-merge-schema/usr/bin/gconf-merge-tree/usr/bin/gconfpkg/usr/bin/gconftool-2...... 可以发现，gconf还是有不少文件是非常具有代表性的，比如这里的/usr/bin/gconf-merge-tree，我们在Fedora上使用sudo dnf provides gconf-merge-tree很容易就能找到对应的包是GConf2。 lsb-release这个依赖中，我们只是需要/etc/lsb-release这个文件存在让我们的bwrap可以顺利地伪装成uos的样子。Fedora中虽然有redhat-lsb-core这个包算是lsb-release的等效包，但是并不提供这个文件，因此我们只需要在待会儿打包的时候带一个/etc/lsb-release的空文件即可，不需要将redhat-lsb-core写进依赖。 最终我们可以确定下来需要的依赖为gtk2,gtk3,libXScrnSaver,nss,bubblewrap,GConf2。 准备打包安装rpm-tools1sudo pacman -S rpm-tools 生成工作路径1mkdir -pv $HOME/rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125; 编写 spec 文件1234567891011121314151617181920212223242526272829303132333435Name: wechat-uosVersion: 2.0.0Release: 1Summary: A wechat client based on electron.License: NoneURL: https://www.chinauos.com/resource/download-professionalPackager: zhullybRequires: gtk2,gtk3,libXScrnSaver,nss,bubblewrap,GConf2AutoReqProv: no%description%prep%pre%post%preun%postun%files/etc/lsb-release/opt/wechat-uos//usr/bin/wechat-uos/usr/lib/license/libuosdevicea.so/usr/share/applications/wechat-uos.desktop/usr/share/icons/hicolor/128x128/apps/wechat.png/usr/share/icons/hicolor/16x16/apps/wechat.png/usr/share/icons/hicolor/256x256/apps/wechat.png/usr/share/icons/hicolor/48x48/apps/wechat.png/usr/share/icons/hicolor/64x64/apps/wechat.png 处理source 一般来说，我们需要配置各种奇奇怪怪的编译命令，但是我这里直接选择了打包二进制文件，一来是减少了对于spec的学习成本，二来是因为wechat-uos本来就不开源，也没什么好编译的。 创建我们wechat-uos的二进制文件所需要放入的文件夹。 1mkdir $HOME/rpmbuild/BUILDROOT/wechat-uos-2.0.0-1.x86_64 将我们的wechat-uos直接放入对应的文件夹中 补上我们的/etc/lsb-release 12mkdir $HOME/rpmbuild/BUILDROOT/wechat-uos-2.0.0-1.x86_64/etc/touch $HOME/rpmbuild/BUILDROOT/wechat-uos-2.0.0-1.x86_64/etc/lsb-release 正式打包1rpmbuild -bb --target=x86_64 SPECS/wechat-uos.spec --nodeps 安装测试1sudo dnf install ./wechat-uos-2.0.0-1.x86_64.rpm 写在最后rpm的打包工具是我近期最想吐槽的东西了，主要槽点有两个。 其一是：rpm在打包时的默认状态下，会使用 file 命令判断文件，如果是二进制的，用ldd判断依赖；如果是脚本，过滤文件中对应的 use/requires/import 语句，以此来找出内部依赖。这固然是个非常贴心的小善举，能够确保软件正常运行，但完全有可能造成比较奇怪的问题。比如我本次打包中rpm自作聪明地给我添加了一个libffmpeg.so的依赖，这东西整个Fedora自带的四个源里都不存在，在安装测试的时候出现了找不到依赖的情况。想我这种添加了找不到依赖的情况还算是运气好的，之前听说有人在使用opensuse的某个私人源的时候发现安装网易云音乐居然吧wps-office都给依赖上了，我想就是rpm自动检测到了网易云需要某个库，而wps恰好自带了这个库而导致的依赖误报。在Archlinux中，我们有一个叫namcap的小工具能够使用类似的方法检测软件运行时可能所需要的内部依赖，但他并不会默认启用，更不会自说自话的就直接把他添加为依赖，连一声也不吭。 其二是：rpm检测新增包内文件是否与系统已安装的软件包内的文件因为使用相同路径而冲突时，不仅会核对是否有冲突的同路径同名文件，他还会核对文件夹的文件占用情况。这说起来可能会有些抽象，我举个例子。在Fedora中，/usr/bin路径是被filesystem这个包所占有的，所以其他包在打包时是不能直接使用/usr/bin、/usr、甚至/来限定包内文件的范围的（也就是上面spec文件中的%files区域）。而我在第一次打包时，想要直接打包BUILDROOT下的所有文件，于是%files就直接填写了/作为限定，安装时提示/usr/bin和/usr/lib被filesystem这个包所占用，文件冲突。为此我还特意去仔细对比了Fedora自带的filesystem和我这个wechat-uos是否有冲突的文件，实则证明并没有，只是单纯这个检测机制过于死板罢了。而在Archlinux中，pacman安装时只会检测包内的文件是否与系统内的现有文件路径产生冲突，而不会非常无意义的去限定哪个文件夹是属于哪个包的。 附上本文的参考资料 为了避免源网页失效，我特意去互联网档案馆做了备份 「RPM打包原理、示例、详解及备查」 「Archive」 「在 Ubuntu 下直接将二进制文件制作成 rpm 包」 「Archive」 「解除RPM包的依赖的方法」 「Archive」 本文同时发布于「知乎专栏」，如果你恰好有知乎帐号的话或许可以考虑帮我点个赞？","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Fedora","slug":"Fedora","permalink":"https://zhul.in/tags/Fedora/"},{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"RPM Package","slug":"RPM-Package","permalink":"https://zhul.in/tags/RPM-Package/"}]},{"title":"下载一份openharmony的源码","slug":"download-openharmony-source-code","date":"2021-06-06T08:47:34.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/06/06/download-openharmony-source-code/","link":"","permalink":"https://zhul.in/2021/06/06/download-openharmony-source-code/","excerpt":"","text":"不知道为什么，总是有人告诉我鸿蒙已经开源了，不信可以自己去看源码balabala，其实鸿蒙的手机端目前为止依然没有开源，或者说没有完整完整开源。本文我将介绍如何拉取一份openharmony开源的源码。 首先需要准备以下东西 一台装有类unix环境的电脑（wsl大概也行） 6G磁盘剩余空间 互联网（如果使用手机流量的话大概是1.5G） 安装git没什么好说的，不再赘述。 设置git用户名和邮箱 12git config --global user.email &quot;you@example.com&quot;git config --global user.name &quot;Your Name&quot; 下载repo（这个大多数发行版自己都有打包，但是都比较滞后，不如直接下载最新版的二进制文件设置好path变量直接用） 12345678910111213mkdir -p ~/bincurl https://storage.googleapis.com/git-repo-downloads/repo ~/bin/repochmod a+x ~/bin/repocat ~/.bashrc &lt;&lt;EOF# set PATH so it includes user&#x27;s private bin if it existsif [ -d &quot;\\$HOME/bin&quot; ] ; then PATH=&quot;\\$HOME/bin:\\$PATH&quot;fiEOFsource ~/.bashrc 新建一个文件夹以同步源码 1mkdir openharmony 进入这个文件夹 1cd openharmony 初始化repo 1repo init -u https://gitee.com/openharmony/manifest.git --depth=1 ​ 注: --depth=1是为了仅保留一层commit记录，防止过多的历史commit占用空间，如果你想保留历 史commit，那可以把这里的--depth=1去掉。 使用repo正式开始同步源码 1repo sync repo在sync的时候其实可以加很多选项，可以通过repo help自行研究，我自己常用的是repo sync --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune -j$(nproc --all) -f1 看到以下提示代表同步成功 1repo sync has finished successfully. 后话结果就当源码下载好并开始checkout后，出现了以下错误 1234567Garbage collecting: 100% (220/220), done in 1.204sUpdating files: 100% (35/35), done.Updating files: 100% (27/27), done.git-lfs filter-process --skip: line 1: git-lfs: command not foundfatal: the remote end hung up unexpectedlyerror.GitError: Cannot checkout device_hisilicon_modules: Cannot initialize work tree for device_hisilicon_moduleserror: Cannot checkout device_hisilicon_modules 看着error很容易可以发现是我的系统没有git-lfs的原因，看样子openharmony使用了git-lfs来储存了某个大文件。 1sudo pacman -S git-lfs #别的发行版请自行查找相关安装方法 于是乎，安装好git-lfs重新sync源码 oepnharmony目录下，.repo文件夹内是你从git服务器上下载下来的原始数据，repo将在所有数据下载完成以后将他们自动checkout成代码。 源码结构是下面这个样子 123456789101112131415161718192021222324.├── applications├── base├── build├── build.py - build/lite/build.py├── build.sh - build/build_scripts/build.sh├── developtools├── device├── docs├── domains├── drivers├── foundation├── .gn - build/core/gn/dotfile.gn├── interface├── kernel├── prebuilts├── productdefine├── .repo├── test├── third_party├── utils└── vendor18 directories, 3 files 我提供个参考数据，AOSP源码不含.repo原始数据的大小是40G，就openharmony这个代码量，恐怕很难让我相信这是一个兼容安卓应用的系统的完整代码。","categories":[],"tags":[]},{"title":"在Windows与Linux双系统下共享蓝牙鼠标","slug":"share-xiaomi-bluetooth-mouse-on-both-windows-and-linux","date":"2021-05-29T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/05/30/share-xiaomi-bluetooth-mouse-on-both-windows-and-linux/","link":"","permalink":"https://zhul.in/2021/05/30/share-xiaomi-bluetooth-mouse-on-both-windows-and-linux/","excerpt":"","text":"我自己使用的鼠标是一只小米的无线蓝牙双模鼠标。但是由于我的USB接口不是很充裕，我平时还是蓝牙鼠标用的比较多。 但是，每当我在Windows和Archlinux上切换时，我不得不重新配对我的蓝牙鼠标。原因我在翻译Archwiki上关于蓝牙鼠标相关叙述时已经解释得非常清楚了，我摘在下面： “首先，计算机保存蓝牙设备的 MAC 地址和配对密钥；然后，蓝牙设备保存计算机的 MAC 地址和配对密钥。这两步通常不会有问题，不过设备蓝牙端口的 MAC 地址在 Linux 和 Windows 上都是相同的 (这在硬件层面上就设定好了)。然而，当在 Windows 或 Linux 中重新配对设备时，它会生成一个新密钥，覆盖了蓝牙设备之前保存的密钥，即与 Windows 配对产生的密钥会覆盖原先与 Linux 配对的密钥，反之亦然。“ 先在Linux上连接蓝牙鼠标，再重启到Windows重新配对蓝牙蓝牙鼠标。 到微软官网下载PsExec.zip，解压后，记住你所解压的路径。 在Windows中，使用管理员权限打开cmd.exe cd到PsExec解压目录，使用如下命令将我们所需要的蓝牙密钥信息保存到C盘根目录下。 1psexec.exe -s -i regedit /e C:\\BTKeys.reg HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\BTHPORT\\Parameters\\Keys 根目录的BTkeys.reg可以直接用记事本打开，内容大概是下面这个样子 为了方便后面的解说，我用各种颜色标注了起来。 在Linux下获取su权限以后，我们需要将Linux下随机分配给鼠标的蓝牙地址改成在Windows上获取的那个地址。上图中「红部分」划出来的就是Windows下获取的地址。 123456[zhullyb@Archlinux ~]$ suPassword: [root@Archlinux zhullyb]# cd /var/lib/bluetooth/E0\\:94\\:67\\:74\\:0D\\:5F/[root@Archlinux E0:94:67:74:0D:5F]# lsC6:2A:1B:33:2E:71 cache settings[root@Archlinux E0:94:67:74:0D:5F]# mv C6\\:2A\\:1B\\:33\\:2E\\:71/ C4\\:F6\\:B3\\:2C\\:BD\\:7E 再编辑/var/lib/bluetooth/&lt;本机蓝牙地址/&lt;鼠标蓝牙地址/info 原文件如下： 12345678910111213141516171819202122232425262728293031[General]Name=MiMouseAppearance=0x03c2AddressType=staticSupportedTechnologies=LE;Trusted=trueBlocked=falseWakeAllowed=trueServices=00001530-1212-efde-1523-785feabcd123;00001800-0000-1000-8000-00805f9b34fb;00001801-0000-1000-8000-00805f9b34fb;0000180a-0000-1000-8000-00805f9b34fb;0000180f-0000-1000-8000-00805f9b34fb;00001812-0000-1000-8000-00805f9b34fb;[IdentityResolvingKey]Key=067764BF59A7531E978AFDC6BB5EC8E1[LongTermKey]Key=E3C49B4F3256018192942EB0CDDEE6A3Authenticated=0EncSize=16EDiv=28209Rand=15970850852728832717[DeviceID]Source=2Vendor=10007Product=64Version=40[ConnectionParameters]MinInterval=6MaxInterval=9Latency=100Timeout=600 「黄色部分」LTK 对应 LongTermKey 下的 Key，把小写转换成大写并删去逗号即可。 「绿色部分」ERand 对应 Rand。这里比较特殊的是，我们必须先将 Windows 中的值倒转过来再转换为 10 进制。即c2,83,7f,8f,7c,76,b4,02-02,b4,76,7c,8f,7f,83,c2-194910961239294914 「蓝色部分」EDIV 对应 EDiv。把 16 进制转换成 10 进制即可，这里就不用倒转了。 具体的转换方法我不再赘述，我把我的转换过程放在下面，我相信各位读者能够看懂。 123456[zhullyb@Archlinux ~]$ echo &#x27;e3,c0,b2,8e,64,2b,12,16,d8,c2,d7,d4,59,55,92,cd&#x27; | tr a-z A-Z | sed &#x27;s/[[:punct:]]//g&#x27;E3C0B28E642B1216D8C2D7D4595592CD[zhullyb@Archlinux ~]$ echo $((16#02B4767C8F7F83C2)) #这里我是手动倒叙的194910961239294914[zhullyb@Archlinux ~]$ echo $((16#000055a3))21923 做完这些操作以后，sudo systemctl start bluetooth即可","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"Windows","slug":"Windows","permalink":"https://zhul.in/tags/Windows/"}]},{"title":"选择最新的Archlinux镜像源","slug":"choose-the-last-archlinux-mirror-site-in-china","date":"2021-05-28T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/05/29/choose-the-last-archlinux-mirror-site-in-china/","link":"","permalink":"https://zhul.in/2021/05/29/choose-the-last-archlinux-mirror-site-in-china/","excerpt":"","text":"找到最新的Archlinux镜像源我是testing+kde-unstable用户，平均每天更新4次，对于我而言，选择最新的Archlinux镜像是非常重要的。 Archlinux的主源并不开放给个人用户使用，仅开放给一级镜像站进行同步，因此我们需要手动寻找国内较新的镜像站。（理论上来说一级镜像站应该比二级镜像站更新，但是有些一级镜像站的同步频率并不高，同步延迟可能会比某些二级镜像站还要高） 一个archlinux的镜像目录大概是长下面这个样子 123456789101112131415161718archlinux/├── community├── community-staging├── community-testing├── core├── extra├── gnome-unstable├── images├── iso├── kde-unstable├── lastsync├── lastupdate├── multilib├── multilib-staging├── multilib-testing├── pool├── staging└── testing 其中的lastsync和lastupdate用unix时间戳记录着上一次同步时间和镜像的上一次变更时间。 因此，我们只需要对比各个镜像站的lastsync谁比较新就行了，我写了如下的辣鸡脚本 12345678910111213141516171819202122232425262728293031323334353637383940414243#!/bin/bashtuna=$(curl -s https://mirrors.tuna.tsinghua.edu.cn/archlinux/lastsync)bfsu=$(curl -s https://mirrors.bfsu.edu.cn/archlinux/lastsync)sjtug=$(curl -s https://mirror.sjtu.edu.cn/archlinux/lastsync)aliyun=$(curl -s https://mirrors.aliyun.com/archlinux/lastsync)ustc=$(curl -s https://mirrors.ustc.edu.cn/archlinux/lastsync)zju=$(curl -s https://mirrors.zju.edu.cn/archlinux/lastsync)cqu=$(curl -s https://mirrors.cqu.edu.cn/archlinux/lastsync)lzu=$(curl -s https://mirror.lzu.edu.cn/archlinux/lastsync)neusoft=$(curl -s https://mirrors.neusoft.edu.cn/archlinux/lastsync)dgut=$(curl -s https://mirrors.dgut.edu.cn/archlinux/lastsync)netease=$(curl -s https://mirrors.163.com/archlinux/lastsync)tencent=$(curl -s https://mirrors.tencent.com/archlinux/lastsync)hit=$(curl -s https://mirrors.hit.edu.cn/archlinux/lastsync)huaweicloud=$(curl -s https://mirrors.huaweicloud.com/archlinux/lastsync)sohu=$(curl -s https://mirrors.sohu.com/archlinux/lastsync)opentuna=$(curl -s https://opentuna.cn/archlinux/lastsync)pku=$(curl -s https://mirrors.pku.edu.cn/archlinux/lastsync)nju=$(curl -s https://mirrors.nju.edu.cn/archlinux/lastsync)njupt=$(curl -s https://mirrors.nju.edu.cn/archlinux/lastsync)echo &quot;&quot;&quot;$tuna #tuna$bfsu #bfsu$sjtug #sjtug$aliyun #aliyun$ustc #ustc$zju #zju$cqu #cqu$lzu #lzu$neusoft #neusoft$dgut #dgut$netease #netease$tencent #tencent$hit #hit$huaweicloud #huaweicloud$sohu #sohu$opentuna #opentuna$pku #pku$nju #nju$njupt #njupt&quot;&quot;&quot; | sort -r 其运行结果如下 123456789101112131415161718191622248120 #neusoft1622247879 #dgut1622247698 #hit1622246042 #zju1622246042 #tuna1622246042 #bfsu1622242426 #sjtug1622242426 #njupt1622242426 #nju1622240702 #ustc1622240522 #cqu1622238783 #netease1622235120 #lzu1622232241 #huaweicloud1622230871 #tencent1622217845 #aliyun1622217001 #pku1622203750 #sohu1622166379 #opentuna 通过不同时刻的多次测试可以看出，国内同步频率最高的是东软（neusoft）的镜像。顺手一查，没错，是个一级镜像站。通过unix时间戳得知，东软的archlinux镜像几乎是每分钟同步一次，恐怖如斯。。。 获得更好的下载速度我们已经得知东软是国内同步频率最高的Archlinux镜像站了，但是我用东软镜像站的下载速度并不太好看。此时，我们就要搬出依云大佬的神器——pacsync 在root用户下使用如下命令装载pacysnc后 12345678910echo &#x27;#!/bin/bash -eunshare -m bash &lt;&lt;&#x27;EOF&#x27;mount --make-rprivate /for f in /etc/pacman.d/*.sync; do filename=&quot;$&#123;f%.*&#125;&quot; mount --bind &quot;$f&quot; &quot;$filename&quot;donepacman -SyEOF&#x27; /usr/bin/pacsync 创建/etc/pacman.d/mirrorlist.sync指定我们用来同步pacman数据库（比如东软） /etc/pacman.d/mirrorlist中存放其他国内镜像源地址（按照同步速度从上到下） 以后的同步命令为 sudo pacsync &amp;&amp; yay -Su 觉得命令过长的话设置alias可以是个不错的选择。","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"}]},{"title":"请给 tuna/ustc 镜像站减压","slug":"relieve-the-pressure-of-tuna-mirror-site-please","date":"2021-05-27T13:25:48.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/05/27/relieve-the-pressure-of-tuna-mirror-site-please/","link":"","permalink":"https://zhul.in/2021/05/27/relieve-the-pressure-of-tuna-mirror-site-please/","excerpt":"","text":"不知道从什么时候开始，我总觉得tuna的镜像站提供的下载速度越来越慢，直到我前几天翻开tuna镜像站的「服务器状态」，我被眼前的景象给震惊到了。 我在这里大致观察了一下这张图：服务器流量主要是由四个部分组成，「http-ipv4」、「https-ipv4」、「http-ipv6」和「https-ipv6」。光是从过去24小时的平均出站流量来计算的话，大约就是2.4Gb/s，如果观察图中的流量高峰期的话，大概是4Gb/s的一个速率。这个流量大小是什么概念呢？根据我个人浅薄的建站经验来讲，这个流量可以让大部分供应商把你的网站判断为正在遭受攻击，你将被强制进入黑洞模式。然而对于tuna的镜像站而言，这个流量速率确是日常。换句话说，tuna的服务器都相当于每时每刻都在被来自全国的开发者“攻击”。 来自 2022 年的竹林: 我是真没想到去年 tuna 的网络负载只有这点的。2022 年的负载图在下面附上，已经翻了一倍不止了 因此，我们也就不难理解为什么tuna近些年来经常出现断流等一系列问题了。 客观上 TUNA 和 UTSC 是国内知名度和镜像项目数量以及同步速度都靠前的镜像站，但也因为如此，这两个镜像站每日的带宽负载是很大的；能跑满我的本地带宽速度是较理想的情况，但是那么大的负载，时间跨度长了体验到的波动差异也就多了起来。至少在我这里，长时间使用两个镜像站的速度波动挺大的。TUNA 也曾微言过带宽日益不堪重负，所以从道德情感和技术理论等角度上，尽管他们是理想的镜像站点，我个人不会优先使用这两个镜像站，也不会优先推荐别人使用。 ——WPlanck 国内的开源镜像站我大多都已经收集到这一篇博客中了，以下几个镜像站是我重点推荐的。 bfsutuna的姊妹站，通俗来讲就是tuna派人维护，北京外国语大学出钱。人少、稳定、涵盖项目较广。 sjtug上海交大的站点，也有不少项目，据说sjtug上的manjaro镜像是国内几个开源镜像站中同步最勤快的，用的人也不多。 opentunatuna那边用国内aws服务器搭的站点，速度超快，不过比较可惜的是现在同步的项目不多，同步频率低，大概是一天一次的样子。 pku是不是没想到北大也有镜像站？没记错的话是今年三四月左右刚开的，和opentuna情况差不多，用的人少、速度快、同步的项目不多。 hit哈尔滨工业大学的镜像站，速度我跑下来感觉一般，不是特别亮眼，不过同步频率高。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"镜像站","slug":"镜像站","permalink":"https://zhul.in/tags/%E9%95%9C%E5%83%8F%E7%AB%99/"}]},{"title":"我为什么选择Archlinux？","slug":"why-i-use-archlinux","date":"2021-05-22T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/05/23/why-i-use-archlinux/","link":"","permalink":"https://zhul.in/2021/05/23/why-i-use-archlinux/","excerpt":"","text":"对于我而言，我用Archlinux主要的原因就是实用主义。我可以很负责的说，Arch真的是在我所有用过的发行版当中最符合实用主义的一个了。 很多大佬一提到Archlinux就扯些什么kiss原则，在我看来则不然。 整洁规范的系统规范代码为的不是为了什么Art of Code，而是可读性的提升；遵循kiss原则亦是如此。 配置文件的路径写好了，符合规范，我们就能一下子找到，我们是为了实用主义而遵守kiss原则。 同样的，我同样可以为了实用主义而破坏kiss原则。比如在我的archiso-zhullyb中，我添加了一个pacman的hook将我的定制内核重命名为linux以确保其能够正确被ventoy所识别，这也是为了实用主义。 那么，什么时候我会破坏kiss原则呢？当我认为破坏kiss原则所带来的利大于弊时，我就会考虑以一个并不规范但却有效的方法来处理问题。 但很有趣的是，由于Archlinux的官方总是将kiss奉为圣旨，这就给我们提供了一个非常nice的环境了——在一个非常规范的系统内，破坏kiss原则所带来的代价并不会很大，这就好比在一个布线整齐的机房内临时私拉两三根线并不会给维护带来多大的困难。 Archlinux对上游软件包的发行策略不同于apt在源内提供了统一软件的多个版本供用户选择，pacman剑走偏锋，默认用户系统内所有软件都是最新的。 由此带来了一个好处——不会出现由于版本过高/过低导致的依赖问题。只要我保证系统内的所有软件都是最新的，就不会出问题，非常的简单粗暴。 此外，不考虑依赖版本这一特点对于打包人来说也是一种解脱。 pacman简单的打包方式不同于deb以及rpm，pacman的软件包应该是所有发行版中最省事儿的。 打包软件时，我们只需要写（改）一份PKGBUILD，就可以仅仅通过在PKGBUILD所在的路径执行makepkg命令来完成一次打包，这相比起deb而言可谓是天差地别。如此简单有效的打包方式注定其将被实用主义者所青睐。 超低的社区贡献成本很多发行版社区开发与贡献其实并不容易参与进去，我拿Ubuntu来做个比较。 附: Archwiki是先斩后奏类型的文档，在你按下保存按钮的那一刻，wiki将立即被更新，所有访客都将看到你改动后的内容。wiki文档拥有变更记录，不担心有人恶意搞破坏，向wiki管理员提出举报后破坏者的账号会被及时封禁，wiki可以非常简单地回滚到之前的状态。 AUR同样也是，你可以随意上传自己的PKGBUILD，可以被别的用户及时看到。如果上传恶意脚本，在别的用户举报后你将迅速被封号。 Wiki方面Ubuntu其实是我第一个上手的Linux发行版，在为期半年的Ubuntu体验中，我对于社区做出的贡献为0。这倒也不是我不热衷于参与社区贡献，而是对Ubuntu社区的贡献成本太高了。去贡献文档翻译，需要等待漫长的审核过程，在第一篇汉化文章正式展现在别的用户眼前后，我一定会被激发出继续翻译第二篇的热情。然而，面对太长的审核周期，再高涨的热情恐怕也会被浇灭。 Arch的社区则不一样，他并不像别的社区那样严谨——只要注册个wiki的账号便可以开始贡献文档。你可以随意地编辑一篇文章或者是新增一篇自己的文章，编辑后的文章将能够立即被别的用户所阅读到，没有任何审核过程，有了这份热情，我便继续翻译别的文档，我想，这应该就是archwiki为何涵盖面如此之广的原因。 AUR方面同样也是拿Ubuntu对比。 在Archlinux下，我只需要简单的写一个PKGBUILD即可轻松构建一个软件包，同时，我也可以将这份有我攥写的PKGBUILD上传到AUR供别的用户使用。AUR作为一个公开的储存库，任何Arch用户都可以通过AUR Helper轻松得从AUR中获取我写的PKGBUILD并在本地打成自己的包。与此同时，我也可以创建一个私人源，直接发行我构建的二进制包。 Ubutnu则不然，他的打包方式则要麻烦得多，同时也没有类似PKGBUILD一样的东西便于用户分享自己的打包脚本。唯一能够分享自己的劳动成果的方式无非就是直接分享自己打出来的deb包，最多也不过是建立自己的ppa，这对于用户来说是极为麻烦的。用户需要处心积虑地寻找自己所需要的deb包或是含有目标包的ppa地址并手动添加，不像Archlinux有AUR这种东西能够让我们知道在哪里能够找到我们所需要的包。","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"}]},{"title":"使用vercel创建一个随机图片api","slug":"create-a-random-picture-api-with-vercel","date":"2021-05-20T16:00:00.000Z","updated":"2022-04-09T05:57:20.000Z","comments":true,"path":"2021/05/21/create-a-random-picture-api-with-vercel/","link":"","permalink":"https://zhul.in/2021/05/21/create-a-random-picture-api-with-vercel/","excerpt":"","text":"如果你的网络环境不算太差的话，你在访问我博客的时候应该可以看到顶部有一张背景图。假如你访问我的博客时留心观察，你或许会发现每次你访问我博客时的背景都是不一样的。如果你没玩够，或许你可以尝试点击这里，我总共搜集了20张壁纸供诸位赏玩。 是的，这是使用php实现的随机图片api，托管于vercel，你可以在aya的博客上找到我使用的代码。具体配置方式我不再赘述。 然而，我们还需要解决一个问题: php在哪里运行？ 如果你拥有自己的服务器，在国内访问速度毫不逊色，那就好办了，直接扔自己服务器上即可。然而，我并没有。我需要找到一个在国内访问速度给力的地方来部署我的api，以确保访客在打开我的博客时可以在第一时间获取到图片的真实链接并开始加载。 起初，我将其部署在我的好朋友(你可以猜猜他是谁)的国内vps上，访问速度自然不用说。然而，他的服务器不支持https，这就导致使用chrome访问的时候chrome不会自动访问我的api，博客顶部一片惨蓝。。。 随后，我使用的是000webhost提供的虚拟主机，国内访问起来也还不错，大概正常运行了半个月左右的时间，然后莫名开始502了。我懂，作为不交钱的白嫖用户应该自觉滚蛋了，这点觉悟咱还是有。 随后，我找到了目前的方案——vercel vercel是被我用来部署静态网页的，但我没想到他也能支持php。参考了vercel-php项目后，我大致了解了整个仓库结构。 1234project├── api│ └── index.php└── vercel.json php和附带的资源文件(如果有的话)一定要放到api文件夹下才能够正常被vercel识别。 以下附vercel.json 1234567&#123; &quot;functions&quot;: &#123; &quot;api/index.php&quot;: &#123; &quot;runtime&quot;: &quot;vercel-php@0.4.0&quot; &#125; &#125;&#125;","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"https://zhul.in/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"禁止deepin-wine-tim使用simsun字体渲染","slug":"hide-simsun-from-deepin-wine-tim","date":"2021-04-26T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/04/27/hide-simsun-from-deepin-wine-tim/","link":"","permalink":"https://zhul.in/2021/04/27/hide-simsun-from-deepin-wine-tim/","excerpt":"","text":"本文中，我通过bwrap命令对运行Tim的wine程序屏蔽了simsun字体以获得了一个更为舒适的字体渲染效果。我所使用的Tim为deepin-wine-tim，至于deepin-wine-qq通过相同的方式应该也能达到相同的效果，spark商店的Tim我自己测试下来似乎是没法达到这样的效果，而使用其他方法安装simsun字体的网友们则需要注意灵活变通，不要照抄我给出的字体路径。 在Archlinux下，我们通常会使用deepin-wine5来运行QQ/Tim. 但是当我们在系统中倒入simsun字体时，无论使用什么奇迹淫巧似乎都无法阻止deepin-wine5找到simsun并优先使用它。于是，字体渲染就会变成如图这样奇奇怪怪的画风: 但是我并不喜欢这样的渲染效果，使用simsun渲染出来的字体总感觉有一种上世纪的风格，况且，在我的1080p小屏下显示并不清晰。 于是，在尝试了更改注册表、在wine容器的系统路径下直接塞入字体文件等等方式无果后，我选择了逃避——直接让wine程序读取不到simsun。 我的simsun是通过ttf-ms-win10-zh_cn这个包安装上去的，被安装在/usr/share/fonts/TTF/路径下。 使用pacman -Qo /usr/share/fonts/TTF/命令查找这个路径下所安装的字体包，我这里的输出如下: 1234567[zhullyb@Archlinux ~]$ pacman -Qo /usr/share/fonts/TTF//usr/share/fonts/TTF/ is owned by ttf-cascadia-code 2102.25-1/usr/share/fonts/TTF/ is owned by ttf-fira-code 5.2-1/usr/share/fonts/TTF/ is owned by ttf-hack 3.003-3/usr/share/fonts/TTF/ is owned by ttf-monaco 6.1-6/usr/share/fonts/TTF/ is owned by ttf-ms-win10-zh_cn 2019ltsc-1/usr/share/fonts/TTF/ is owned by ttf-opensans 1.101-2 可以看到，并没有什么对wine程序运行特别重要的字体包，于是我计划通过bwrap命令对运行Tim的wine程序直接屏蔽这个路径。 首先安装提供bwrap命令的bubblewrap程序: sudo pacman -S bubblewrap --needed 通过查找deepin-wine-tim的desktop文件发现Tim的启动命令是/opt/apps/com.qq.office.deepin/files/run.sh 在终端中输入命令进行测试bwrap --dev-bind / / --tmpfs /usr/share/fonts/TTF/ /opt/apps/com.qq.office.deepin/files/run.sh 出现如下界面，看来方法是可行的。 于是，我们进一步更改deepin-wine-tim的desktop文件，以方便我们不需要每次都在Terminal中执行这么一大长串命令。需要更改的地方如下图红色方框圈出部分 我这里附一下图中的命令方便诸位复制粘贴。 123456789101112131415[zhullyb@Archlinux ~]$ cat /usr/share/applications/com.qq.office.deepin.desktop #!/usr/bin/env xdg-open[Desktop Entry]Encoding=UTF-8Type=ApplicationX-Created-By=Deepin WINE TeamCategories=chat;Network;Icon=com.qq.office.deepinExec=bwrap --dev-bind / / --tmpfs /usr/share/fonts/TTF/ /opt/apps/com.qq.office.deepin/files/run.shName=TIMName[zh_CN]=TIMComment=Tencent TIM Client on Deepin WineStartupWMClass=tim.exeMimeType=","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"Bwrap","slug":"Bwrap","permalink":"https://zhul.in/tags/Bwrap/"}]},{"title":"在系统使用暗色主题时禁用Firefox的夜间模式","slug":"disable-firefox-nightmode-when-your-system-is-using-that","date":"2021-04-22T16:00:00.000Z","updated":"2022-08-10T08:31:39.000Z","comments":true,"path":"2021/04/23/disable-firefox-nightmode-when-your-system-is-using-that/","link":"","permalink":"https://zhul.in/2021/04/23/disable-firefox-nightmode-when-your-system-is-using-that/","excerpt":"","text":"在我使用Archlinux的时候经常会使用一些暗色主题，但是我并不希望我浏览网页时一些自作聪明的网页自动切换成夜间模式。 这个设置我找了好久，每次在谷歌上检索都会跳出来一堆教我改Firefox主题的、用插件开夜间模式的，却都不是我的目的。 我们所需要做的是在浏览器地址栏输入about:config进入高级设置 搜索并添加一个值 1ui.systemUsesDarkTheme 将这个选项的数值设置为0即可。 2021.12.13更新: Firefox 更新 95.0 以后，如果遇到原方案失效的问题，可以参考 CSL的博客。","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"记一次在Gitlab部署Jekyll博客时遇到的jekyll-github-metadata报错问题","slug":"fuck-jekyll-github-metadata-on-gitlab","date":"2021-04-15T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/04/16/fuck-jekyll-github-metadata-on-gitlab/","link":"","permalink":"https://zhul.in/2021/04/16/fuck-jekyll-github-metadata-on-gitlab/","excerpt":"","text":"我的博客是挂在GitlabPages上的，在为博客更换主题的时候遇到了一点点小麻烦。 报错如图： 当然，我这边也会附上详细的报错日志，以便后人能够通过关键词搜索到。 12345678910111213Configuration file: /builds/zhullyb/test/_config.yml Source: /builds/zhullyb/test Destination: public Incremental build: disabled. Enable with --incremental Generating... Jekyll Feed: Generating feed for posts GitHub Metadata: No GitHub API authentication could be found. Some fields may be missing or have incorrect data. GitHub Metadata: Error processing value &#x27;url&#x27;: ERROR: YOUR SITE COULD NOT BE BUILT: ------------------------------------ No repo name found. Specify using PAGES_REPO_NWO environment variables, &#x27;repository&#x27; in your configuration, or set up an &#x27;origin&#x27; git remote pointing to your github.com repository.Cleaning up file based variables 00:01ERROR: Job failed: exit code 1 经过了一番瞎折腾以后，我依然没有解决问题，而每次push都要等待gitlab的ci构建两三分钟，实在磨不动的我去看了jekyll-github-metadata的README，结合上文的报错，我一下子就看懂了。 jekyll-github-metadata可以通过github中的信息自动为jekyll提供site.github、site.title、site.description、site.url和site.baseurl。而由于我们在用的是Gitlab，所以jekyll-github-metadata就无法获取到这些信息，需要我们手动指定。报错中缺少的就是url 于是打开_config.yml，把url给补上，顺便把别的变量一同加上，如图：","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"我在Archlinux上的常用软件","slug":"the-software-i-use-on-archlinux","date":"2021-04-15T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/04/16/the-software-i-use-on-archlinux/","link":"","permalink":"https://zhul.in/2021/04/16/the-software-i-use-on-archlinux/","excerpt":"","text":"最近基本固定了在Archlinux上的常用软件，也供各位参考一下。 我是KDE用户，所以KDE家的软件会用得比较多。 浏览器：Firefox，Chromium备用（主要是使用chromium的网页翻译功能，还有就是打开一些对Firefox不太友好的网站） 下载器：curl，wget，motrix 根据不同使用场景更换下载器 终端：konsole 输入法：fcitx5-chinese-addons 即时通讯：telegram，deepin-wine-tim，deepin-wine-wechat，electron-qq，wechat-uos，linuxqq 播放器：vlc 编辑器：nano，kate，visual-studio-code-bin，typora，wps 图形类：pinta，drawio-desktop-bin，imagemagick 文件管理器：dolphin 文件传输：sftp（命令行里的），filezilla 系统、网络工具：latte-dock-git，v2raya，htop，gtop","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"}]},{"title":"使用Chrome的同步api为chromium开启同步功能","slug":"login-chromium-with-the-api-of-chrome","date":"2021-04-14T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/04/15/login-chromium-with-the-api-of-chrome/","link":"","permalink":"https://zhul.in/2021/04/15/login-chromium-with-the-api-of-chrome/","excerpt":"","text":"今年两三月的时候，Google限制了chromium的同步api次数，导致各个发行版内置的chromium将不再能继续使用Google的数据同步功能。 今天在翻 archlinuxcn 的群组的时候翻到了一段脚本: https://gist.github.com/foutrelis/14e339596b89813aa9c37fd1b4e5d9d5 大意就是说，由于Archlinux特殊的chromium启动方式导致我们可以在设置oauth2-client-id和oauth2-client-secret的情况下通过chrome的同步api继续使用Google的同步服务，说得太多了也没必要，毕竟原文就在那里，看不看取决于你，我这里直接给命令吧。 12echo &quot;--oauth2-client-id=77185425430.apps.googleusercontent.com--oauth2-client-secret=OTJgUOQcT7lO7GsGZq2G4IlT&quot; ~/.config/chromium-flags.conf 再次打开chromium,你就会发现你心心念念的同步功能回来了。 然而，并不是所有的发行版都像 Archlinux 这样考虑到 oauth，我们也不可能像 Archlinux 官方那样有这个闲情雅致为没一个 Chromium 去添加这个 patch 以后重新编译一遍，大部分人都是直接用发行版源里的。针对这种情况，我们可以直接手写一个脚本 1234#!/usr/bin/bashexport GOOGLE_DEFAULT_CLIENT_ID=77185425430.apps.googleusercontent.comexport GOOGLE_DEFAULT_CLIENT_SECRET=OTJgUOQcT7lO7GsGZq2G4IlTexec /usr/bin/chromium-browser &quot;$@&quot; # 我用的 Fedora 的启动命令是 chromium-browser，别的发行版用户还请自行调整 当我满心欢喜地把脚本扔进 $HOME/.local/bin 后，我却突然发现 Fedora 官方源中把 chromium 的启动命令写死在了 /usr/bin/chromium-browser，如果直接去改 /usr/bin/chromium-browser 的话，每次更新都会被覆盖。 正确的做法应该是把 desktop 文件复制一份到桌面，再去改内容。 123mkdir -p $HOME/.local/share/applications/cp /usr/share/applications/chromium-browser.desktop $HOME/.local/share/applications/sed -i &quot;s|/usr/bin/chromium-browser|GOOGLE_DEFAULT_CLIENT_ID=77185425430.apps.googleusercontent.com GOOGLE_DEFAULT_CLIENT_SECRET=OTJgUOQcT7lO7GsGZq2G4IlT /usr/bin/chromium-browser|g&quot; $HOME/.local/share/applications/chromium-browser.desktop","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Appimage的文件储存在哪里","slug":"where-will-appimage-put-its-file","date":"2021-04-12T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/04/13/where-will-appimage-put-its-file/","link":"","permalink":"https://zhul.in/2021/04/13/where-will-appimage-put-its-file/","excerpt":"","text":"我不饿： 有人知道怎么删除appimage的用户数据吗？ liolok | 李皓奇: 还是可以在用户的家目录下面乱写的吧 Lipis Apple: 不太讲武德：~/.local/share/(app) 算讲武德：~/.config/(app) 不讲武德：~/.(app)","categories":[],"tags":[{"name":"大佬对话笔记","slug":"大佬对话笔记","permalink":"https://zhul.in/tags/%E5%A4%A7%E4%BD%AC%E5%AF%B9%E8%AF%9D%E7%AC%94%E8%AE%B0/"}]},{"title":"使用Motrix接管Firefox的下载","slug":"use-motrix-install-of-firefox-to-download","date":"2021-04-10T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/04/11/use-motrix-install-of-firefox-to-download/","link":"","permalink":"https://zhul.in/2021/04/11/use-motrix-install-of-firefox-to-download/","excerpt":"","text":"本文是一篇个人笔记，不具有太强的技术性，仅仅是为后来者指个方向。 熟悉我的人都知道，我是一个Firefox的忠实用户，原因有二： ​ 一/ Firefox国际版同步功能国内可用 ​ 二/ moz://a（Firefox用户应该能在地址栏直接访问这个链接） 但是Motrix没有推出适用于Firefox的接管浏览器下载功能的插件，于是只能用aria2的插件。这个插件内置了AriaNG,对于aria2用户来说会比较实用，但是对于Motrix用户而言其实功能有些多余且不兼容，比如什么自动启动aria2什么的是无法实现的。 主要的配置过程我就图解了，退出前记得保存配置。","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"yay进阶","slug":"yay-more","date":"2021-04-03T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/04/04/yay-more/","link":"","permalink":"https://zhul.in/2021/04/04/yay-more/","excerpt":"","text":"yay是一个AUR Helper，他可以执行pacman的几乎所有操作，并在此基础上添加了很多额外用法。 我没有在网络上查找到关于yay的、除了pacman基础用法和安装AUR包以外的中文教程，英文的也几乎没有看到，这也是我写这篇文章的原因所在。 本文通篇详讲yay的每一个设置/选项（大概就是archwiki那种干涩的行文思路），最后会给出我自己的一些常用命令，但不会做解释。 写作时参考了yay的英文使用手册，如果你的arch安装了yay，那么即可通过man yay命令随时查阅它。 Tips1: 本文中出现的foo一般是指包名，标注*的表示该选项默认启用。 Tips2: 使用电脑端的访客可以在侧栏以获取目录。 基本用法yay的基本用法是yay &lt;operation [options] [targets]、yay foo和yay，yay &lt;operation [options] [targets]的用法可以讨论的点比较多，我会在后文中一一道来。 yay当我们仅执行yay，后面不跟任何参数时，yay会执行操作yay -Syu，他会先调用pacman更新源的数据库、更新所有从源内安装的软件包，并检查你的AUR包有没有更新。 yay foo通过yay后面直接跟包名的命令会让yay直接在源和AUR内搜索带有foo关键词的包（包名和简介中只要出现foo都会被一网打尽），以下是我执行yay dingtalk的输出 1234567891011125 aur/com.dingtalk.deepin 5.0.15deepin7-1 (+0 0.00) Deepin Wine dingtalk4 aur/deepin.com.dingtalk.com 5.1.28.12-2 (+1 0.12) DingTalk Client on Deepin Wine3 aur/dingtalk 2.1.3-1 (+3 0.00) 钉钉桌面版，基于electron和钉钉网页版开发，支持Windows、Linux和macOS2 aur/dingtalk-linux 3.5.5-1 (+6 0.12) May be the official Linux experimental version1 aur/dingtalk-electron 2.1.9-1 (+9 0.15) 钉钉Linux版本== Packages to install (eg: 1 2 3, 1-3 or ^4)== 输入每一项对应的序号即可进入相应的安装过程。 yay &lt;operation [options] [targets]在这里，&lt;operation每次只能有一个，[options]和[targets]可以有多个，且多个[options]可以合起来写在一起。比如yay -P -s -f可以直接写成yay -Psf，顺序也可以颠倒，-Psf和-sPf没区别。 -Y (--yay)-Y行为其实是yay的默认行为，当你没有加其他的行为参数时，yay就会执行-Y参数，可以跟--gendb和-c。 --gendb生成AUR数据库。仅当从另一个AUR Helper迁移到yay时，才应使用此选项。（根据我的个人理解，是根据你Arch内安装的源内找不到的包的包名去AUR里寻找对应的PKGBUILD，并且把能找到的PKGBUILD给clone到~/.cache/yay/目录下） 千玄子大佬说：“简单说来就是把在 AUR 的 PKGBUILD 下下来然后比对是否要更新。” -c（--clean）清除不再需要的、没有被依赖的包。（相当于apt中的autoremove） -P(--show)执行特定的Print操作。可以跟的[option]有-c、-f、-d、-g、-n、-s、-u、-w、-q -c(--complete)Print所有源内和AUR软件包的列表。这是给命令行操作提供的，并不打算由用户直接使用。（意思是启用了这个选项以后你的终端会出现一大串长常的列表来告诉你你的Arch到底可以从哪里安装哪些包，并不是直接给你用的，是作为数据留给别的命令来玩耍的） -f(--fish)在输出结果到终端时，会专门为fish用户做微调。（但是根据SamLukeYes大佬说他用fish体验下来并没有感知到加不加有什么区别，应该是属于感知不强的选项） -d(--defaultconfig)Print默认的yay配置。 -g(--currentconfig)Print当前的yay配置。 -n(--numberupgrades)数一数你现在还有多少AUR包待更新。yay作者不推荐你使用呢，他推荐你用yay -Qu或者wc -l来代替它。 -s(--stats)会展示一大堆信息，如下 1234567891011121314151617181920212223[zhullyb@Archlinux ~]$ yay -Ps== Yay version v10.2.0 #yay版本============================================= Total installed packages: 1240 #总共安装了多少包== Total foreign installed packages: 24 #多少包不是从源里安装的== Explicitly installed packages: 271 #有多少包是你自己主动安装的(而不是作为依赖安装的)== Total Size occupied by packages: 14.3 GiB #安装的所有包合在一起一共占了你多少空间============================================= Ten biggest packages: #十个体积最大的包wps-office-cn: 990.9 MiBttf-sarasa-gothic: 855.5 MiBlinux-firmware: 652.3 MiBbaidunetdisk-bin: 494.7 MiBcom.antutu.benchmark: 412.0 MiBwine: 402.2 MiBlinux-xanmod-cacule-uksm-cjktty: 324.4 MiBmicrosoft-edge-dev-bin: 316.4 MiBwine-mono: 316.2 MiBdeepin-wine5-i386: 259.5 MiB===========================================:: Querying AUR... - Missing AUR Packages: zhullyb-archlinux-git #AUR里找不到的包 - Flagged Out Of Date AUR Packages: xml2 #AUR中被人标注过期的包 -u(--upgrades)展示你所有待更新的包。 -w(--news)展示来自archlinux.org的新闻。需要注意的是，这里的新闻是具有时效性的，只有在你的Arch最后一次更新以后发出来的新闻才会被显示出来。如果你不想要yay判断新闻时效性，你可以通过yay -Pww（即两个w）来获取所有能获得的新闻。 -q(--quiet)在输出新闻的时候，仅输出新闻的标题。该功能需要与-w连用，即yay -Pwq。 -G(--getpkgbuild)后跟包名。需要注意的是，如果指定的包不存在于官方源，则无法输出，后跟-f、-p参数。 如果希望仅获取来自AUR（即排除第三方源的干扰）的PKGBUILD，后需跟-a参数。 -f(--force)强制下载AUR中的PKGBUILD，如果它在yay缓存目录已经存在了，那就覆盖它！ -p(--print)Print指定包的PKGBUILD。 pacman 拓展用法yay虽然可以使用pacman的所有&lt;operation，但是它远不仅于此。在这一段，我将向你介绍yay中包含的那些pacman不包括的pacman &lt;operation -S-S, -Si, -Sl, -Ss, -Su, -Sc, -Qu这些操作pacman都支持，而与pacman不同的是，yay的这些操作可以涵盖到官方源/第三方源和AUR中的所有包。 -Scyay将会清除AUR包构建时的缓存和没有被track的文件。没有被track的文件在这里指AUR包构建时下载的sources或者构建完成的pkg包，但是vcs sources会被保留（比如.git文件夹） 全局的[options]全局是指在所有&lt;operation下都可以加啦。 --repo假定你给出的包名只存在源里（忽视AUR的存在） -a(--aur)假定你给出的包名只存在AUR中（忽视源的存在） 配置设置原版的man手册排的比较混乱，我这里自己细分了几个类型，或许不是特别专业，但我希望能够帮助你们理解。 自定义调用命令型--editor &lt;command设置编辑时调用的编辑器。 --makepkg &lt;command设置makepkg时需要调用makepkg命令（一般情况下用不到） --pacman &lt;command设置运行pacman时需要调用pacman命令（一般情况下用不到） --tar &lt;command设置makepkg解压tar资源时调用的tar命令（一般情况下用不到） --git &lt;command设置makepkg clone git资源时调用的git命令（比如你可以安装AUR中的fgit-go，使用--git fgit参数来让fastgit代理clone的过程） --gpg &lt;command设置gpg验证资源时调用的gpg命令 --sudo &lt;command设置调用sudo获取su权限安装pkg时所调用的sudo命令。 自定义配置文件型--config &lt;file设置读取的pacman配置文件。 --makepkgconf &lt;file设置读取的makepkg配置文件。 --nomakepkgconf不读取系统中的makepkg.conf，仅使用Arch默认状态下的配置文件。 自定义路径类型--builddir &lt;dir设置build路径，默认路径为~/.cache/yay/ --absdir &lt;dir 设置abs路径，默认路径为~/.cache/yay/abs/ 参数传递型--editorflags &lt;flags后跟需要跟随传递给编辑器的参数。如果需要传递多个参数，可以使用引号。 --mflags &lt;flags后跟需要跟随传递给makepkg的参数。如果需要传递多个参数，可以使用引号。 这个用的人不多，但其实是非常好用的一个功能。在我们安装deepin-wine-tim等包的时候，很可能会遇到文件明明完整但checksum不通过的情况，这时我们可以跟一个--skipchecksums参数传递给makepkg以跳过checksum的过程。 --gpgflags &lt;flags后跟需要跟随传递给pgp的参数。如果需要传递多个参数，可以使用引号。 --sudoflags &lt;flags后跟需要跟随传递给sudo的参数。如果需要传递多个参数，可以使用引号。 菜单配置型clean菜单*--cleanmenu启用清除询问菜单。（询问你是否需要清除已存在的文件） --nocleanmenu禁用清除询问菜单。（不询问你是否需要清除已存在的文件） --answerclean 自动回答cleanmenu，后跟&lt;All|None|Installed|NotInstalled参数。 *--noanswerclean不设置自动回答。 diff菜单*--diffmenu启用对比询问菜单。（询问你是否需要对比本地文件和AUR文件） --nodiffmenu禁用对比询问菜单。（不询问你是否需要对比本地文件和AUR文件） --answerdiff自动回答cleanmenu，后跟&lt;All|None|Installed|NotInstalled参数。 *--noanswerdiff不设置自动回答。 edit菜单--editmenu启用修改询问菜单。（询问你是否需要修改PKGBUILD以及相关文件） *--noeditmenu禁用修改询问菜单。（不询问你是否需要修改PKGBUILD以及相关文件） --answeredit自动回答editmenu，后跟&lt;All|None|Installed|NotInstalled参数。 *--noansweredit不设置自动回答。 upgrade菜单*--upgrademenu启用更新询问菜单。（询问你是否需要更新AUR包） --noupgrademenu禁用更新询问菜单。（不询问你是否需要更新AUR包） --answerupgrade自动回答upgrademenu，后跟&lt;All|None|Installed|NotInstalled参数。 *--noanswerupgrade不设置自动回答。 removemake菜单*--askremovemake在编译结束后，询问是否删除make depend。 --removemake在编译结束后，删除make depend。 --noremovemake在编译结束后，不删除make depend。 provides菜单*--provides搜索AUR包时，一同寻找其在AUR上的依赖程序。 当找到多个提供该依赖的包时，将出现一个菜单，提示您选择一个。尽管这不会引起注意，但这会增加依赖项解决时间。 --noprovides搜索AUR包时，不在AUR上寻找其依赖程序。尽管yay不会再次弹出依赖菜单供你选择，yay调用pacman时依然会出现pacman的选择菜单让你选择。 pgpfetch菜单*--pgpfetch询问你是否从每个PKGBUILD的validpgpkeys字段导入未知的PGP密钥。 --nopgpfetch不自动导入陌生的PGP密钥。 useask选项*--useask调用pacman的–ask询问用户是否删除系统中与当前包冲突的软件包。 --nouseask不调用pacman的–ask询问用户是否删除系统中与当前包冲突的软件包，遇到冲突的软件包时直接报错，由用户来手动解决。 combinedupgrade菜单--combinedupgrade在系统更新期间，将源内包和AUR包的更新菜单合并到一起。 *--nocombinedupgrade在系统更新期间，先支持源内包的升级，完成后再进行AUR包的升级。 T or F 型devel--devel在系统更新期间，检查AUR的vcs包是否有更新，当前仅支持AUR的-git包。 devel查询是使用git ls-remote对比安装时和现在最新的commit_id完成的。 *--nodevel在系统更新期间， 不检查AUR的vcs包是否有更新。 timeupdate--timeupdate在系统更新期间，将已安装软件包的构建时间与每个软件包的AUR的最后修改时间进行比较。 *--notimeupdate在系统更新期间，不将已安装软件包的构建时间与每个软件包的AUR的最后修改时间进行比较。 redownload--redownload就算PKGBUILD已经存在，也要重新从AUR上获取一份新的PKGBUILD并覆盖原有PKGBUILD。 --redownloadall就算PKGBUILD已经存在，也要重新从AUR上获取所有AUR包的PKGBUILD并覆盖原有PKGBUILD。 *--noredownload当下载PKGBUILD时，，如果发现cache中的PKGBUILD版本＞＝AUR上的版本时，直接使用本地的PKGBUILD。 rebuild--rebuild即使在cache中有可用的二进制包的情况下，也始终要重新编译目标软件包。 --rebuildall即使在cache中有可用的二进制包的情况下，也始终要重新编译所有的AUR包。 --rebuildtree安装AUR包时，以递归方式重新编译并重新安装其所有AUR依赖包，即使已安装的依赖项也是如此。 该选项使您可以轻松地针对当前系统的库重新构建软件包，如果它们变得不兼容。（比如python3.8-3.9） *--norebuild构建软件包时，如果在缓存中找到该软件包并且该软件包与想要的软件包的版本相同，则跳过软件包的编译过程并使用现有的二进制程序。 sudoloop--sudoloop在后台循环调用sudo，以防止sudo授权在长时间构建期间超时。 *--nosudoloop不在后台循环调用sudo，可能会导致sudo授权在长时间构建期间超时。 batchinstall--batchinstall在构建和安装AUR包时，对每个软件包的安装进行排序，而并非在构建之后立刻安装每个软件包时。 需要注意的是，一旦构建了所有软件包，或者需要构建队列中的软件包作为构建另一个软件包的依赖项，应当在安装队列中安装所有软件包。 *--nobatchinstall在构建AUR包成功后立即安装。 clearafter--cleanafter在构建AUR包完成以后清除cache文件。 *--nocleanafter在构建AUR包完成以后不清除cache文件。 其他型--save把你这一次执行yay后面跟的配置参数永久保存下来。 --aururl更改aur源地址（默认为 https://aur.archlinux.org ），适用于中国用户，可以使用此参数将AUR的地址设置成清华的反代，具体的配置命令为 1yay --aururl &quot;https://aur.tuna.tsinghua.edu.cn&quot; --save TUNA 的反代已经取消，可以使用如下命令设置回 AUR 官方源 1yay --aururl &quot;https://aur.archlinux.org&quot; --save --sortby在搜索过程中，按特定条件对AUR结果进行排序，后跟&lt;votes|popularity|id|baseid|name|base|submitted|modified参数，默认为votes。 --searchby通过指定查询类型来搜索AUR软件包，后跟&lt;name|name-desc|maintainer|depends|checkdepends|makedepends|optdepends参数，默认为name-desc。 *--topdown优先展示源内包，其次才是AUR包 --bottomup优先展示AUR包，其次才是源内包 --requestsplitn &lt;number设置在每次向AUR的请求的最大数值（默认150）。数值越高，请求时间越短，但是单次请求的数值过大会导致error。当这个数值＞500时你应当特别注意这一点。 --completioninterval &lt;days刷新完成高速缓存的时间（以天为单位,默认为7）。 将此值设置为0将导致每次刷新缓存，而将其设置为-1将导致永远不刷新缓存。 我个人的常用命令12345678yayyay fooyay -Sa fooyay -Sccyay -Psyay -Pwwyay -Gpayay -Ga 本文同时发布于「知乎专栏」，如果你恰好有知乎帐号的话或许可以考虑帮我点个赞？","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"}]},{"title":"抛弃DisplayManager，拥抱startx","slug":"lets-fuck-dm-and-use-startx","date":"2021-03-13T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/03/14/lets-fuck-dm-and-use-startx/","link":"","permalink":"https://zhul.in/2021/03/14/lets-fuck-dm-and-use-startx/","excerpt":"","text":"在正常情况下，我们会给Linux装上一个DisplayManager以方便我们输入账号密码来进入图形化系统，但是我不想要额外装一个DM来启动我的图形化系统（而且之前我一直用的sddm也出过一小阵子的问题） 首先卸载我的sddm 1sudo pacman -Rsnc sddm sddm-kcm 安装startx所在的软件包 1sudo pacman -S xorg-xinit 从/etc/X11/xinit/xinitrc拷贝一份.xinitrc 1cp /etc/X11/xinit/xinitrc ~/.xinitrc 注释掉最后5行 12345#twm &amp;#xclock -geometry 50x50-1+1 &amp;#xterm -geometry 80x50+494+51 &amp;#xterm -geometry 80x20+494-0 &amp;#exec xterm -geometry 80x66+0+0 -name login 然后需要在结尾处写上我们的配置。我用的桌面是Plasma，查询wiki To start Plasma with xinit/startx, append export DESKTOP_SESSION=plasma and exec startplasma-x11 to your .xinitrc file. If you want to start Xorg at login, please see Start X at login. 然后在xinitrx文件末尾处写上我们的配置 12export DESKTOP_SESSION=plasmastartplasma-x11 Ps: 在第二行中，wiki中让我们使用exec，代表当xorg桌面会话结束后自动退出当前用户，而我不想退出，所以没加 至此，我们的startx就已经配置完成了，重启后只需要在tty界面登录用户后输入startx并回车即可进入图形化界面。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"}]},{"title":"竹林源","slug":"arch-source","date":"2021-03-11T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/03/12/arch-source/","link":"","permalink":"https://zhul.in/2021/03/12/arch-source/","excerpt":"","text":"无力维护，现已将 arch.zhullyb.top 和 mirror.zhullyb.top 的所有请求分别转发到 Clansty 维护的 repo.lwqwq.com 和 pacman.ltd ，如果您凑巧看到本消息，建议立即访问 pacman.ltd 并按照其要求修改源配置文件。Hello，这里是竹林里有冰的私人源。 其实Archlinux已经有了一个打包了各种常用软件的第三方源叫archlinuxcn，国内拥有多个镜像站为其提供镜像服务。但是他们作为一个开源社区，显然会受到许多限制，诸如不能收录未经授权的商业软件等。目前已经有多个软件因为没有得到授权而不得不下架，详见 #1968、#2455、#2458、#2460、#2462。因此我创建了这样一个方便我自己使用的源。 主要收集了一些侵权软件、闭源软件、不清真的软件，目前主要是作为archlinuxcn源的补充。 目前源在OneDrive上，采用onemanager解析直链，速度取决于各位的网络供应商。 使用方法：在 /etc/pacman.conf 尾部添加 1234[zhullyb]SigLevel = NeverServer = https://mirror.zhullyb.topServer = https://arch.zhullyb.top 注，我这里将SigLevel指定为Never，是因为我认为我一个辣鸡的个人源没有必要验证keyring，况且由于OneDrive的直链解析会带来较高的延迟，再额外下载一个sig文件将会极大地破坏体验。 如果你坚持要验证，我这里也提供了zhullyb-keyring，请自行下载以后使用pacman -U进行安装。此外，由于pacman会通过拼接db跳转的链接来下载sig签名，会导致onedrive返回的报错信息被pacman误认为sig文件，这里可以使用由web-worker.cn站长提供的反代，使pacman尝试下载sig文件时接收到404状态码来跳过对db的验证。 1Server = https://pkg.web-worker.cn/zhullyb/ 现有软件列表 Removed.","categories":[],"tags":[{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"}]},{"title":"FireFox? IceDoge!!!","slug":"change-your-firefox-icon-into-a-bluedoge","date":"2021-02-26T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/02/27/change-your-firefox-icon-into-a-bluedoge/","link":"","permalink":"https://zhul.in/2021/02/27/change-your-firefox-icon-into-a-bluedoge/","excerpt":"","text":"事情的起因是这样的。 Solidot Mozilla 强调 Firefox 的 logo 仍然包含小狐狸 2021-02-27 20:02 #Firefox 过去几天一个广泛流传的 meme 宣称，Firefox 著名的红色小狐狸 logo 正被逐渐简化直至消失。Mozilla 官方博客对此做出了回应，强调 Firefox 的 logo 将会始终包含小狐狸，他们没有消除狐狸的计划。作为反击这一 meme 行动的一部分，Mozilla 修改了Firefox Nightly 的 logo，将著名的网络 meme 狗币中的柴犬图像与红色小狐狸 logo 整合在一起。如果你下载安装 Nightly 版本，你会看到狗狗在看着你。 这只狗是非常可爱，大概是长下图这个样子。 但是我是一个将Firefox当成主浏览器的用户，咱不可能去用Nightly，所以我就打算把我这里这只稳定版的红色小狐狸 换成上面的那只狗。 通过直接写入用户目录下的icon可以在不覆盖浏览器原图标、不给包管理器惹麻烦的情况下实现我们的目标，所以，代码如下 12345678910111213141516171819#/usr/bin/sh# This script will change icon of you Firefox Browser into a bluedoge# Depend on imagemagickcd ~curl https://www.mozilla.org/media/img/logos/firefox/logo-nightdoge-lg-high-res.14f40a7985fe.png logo-nightdoge-lg-high-res.14f40a7985fe.pngfor _resolution in 16 22 24 32 48 64 128 192 256 384do mkdir -p ~/.local/share/icons/hicolor/$&#123;_resolution&#125;x$&#123;_resolution&#125;/apps/ convert -resize &quot;$&#123;_resolution&#125;x$&#123;_resolution&#125;&quot; &quot;logo-nightdoge-lg-high-res.14f40a7985fe.png&quot; &quot;firefox$&#123;_resolution&#125;.png&quot; mv &quot;firefox$&#123;_resolution&#125;.png&quot; ~/.local/share/icons/hicolor/$&#123;_resolution&#125;x$&#123;_resolution&#125;/apps/firefox.pngdonerm logo-nightdoge-lg-high-res.14f40a7985fe.png# If you want to change back your icons, run the command bellow# rm ~/.local/share/icons/hicolor/*/apps/firefox.png","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Fun","slug":"Fun","permalink":"https://zhul.in/tags/Fun/"}]},{"title":"在Archlinux上解包A/B机型的payload.bin","slug":"extract-payload-dot-bin-on-archlinux","date":"2021-02-06T16:00:00.000Z","updated":"2021-10-13T13:48:10.000Z","comments":true,"path":"2021/02/07/extract-payload-dot-bin-on-archlinux/","link":"","permalink":"https://zhul.in/2021/02/07/extract-payload-dot-bin-on-archlinux/","excerpt":"","text":"解包A/B机型的OTA更新包时，会发现zip文件中只有一个payload.bin文件 解包这个文件，我们需要用到这个叫payload_dumper的python脚本，同时需要安装依赖: community/python-google-api-core和python-bsdiff4，我解包的时候发现缺少python3版本的python-bsdiff4，因此已经打包上传至AUR 1234git clone https://github.com/vm03/payload_dumper.gitcd payload_dumpermv path/to/payload.bin payload_dumperpython payload_dumper.py payload.bin 然后就可以在该项目文件夹的output路径下找到解包后的img镜像","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://zhul.in/tags/Android/"},{"name":"Rom编译","slug":"Rom编译","permalink":"https://zhul.in/tags/Rom%E7%BC%96%E8%AF%91/"},{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"Python","slug":"Python","permalink":"https://zhul.in/tags/Python/"}]},{"title":"如何解决adb未授权的问题","slug":"how-to-solve-the-adb-devices-unauthorized-problem","date":"2021-01-24T16:00:00.000Z","updated":"2021-10-13T13:48:10.000Z","comments":true,"path":"2021/01/25/how-to-solve-the-adb-devices-unauthorized-problem/","link":"","permalink":"https://zhul.in/2021/01/25/how-to-solve-the-adb-devices-unauthorized-problem/","excerpt":"","text":"在调试安卓设备的时候，我们经常会遇到adb未授权的问题，本方案适用于未开机时遇到以下两种情况。 当我们编译eng的时候，adb应该会默认授权所有设备，但是有部分Rom并不会。 当我们编译userdebug的时候，adb就不会授权给所有设备了，如果卡开机，使用adb抓取log将会是非常麻烦的事情。 此时我们需要手动导入我们的adbkey 手机重启到Recovery模式 找到你电脑的adbkey公钥，一般叫做adbkey.pub 1adb push $&#123;the/location/to/your/key&#125; /data/misc/adb/adb_keys 比如我就是 1adb push ~/.android/adbkey.pub /data/misc/adb/adb_keys 重启手机，愉快苦逼地去抓log","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://zhul.in/tags/Android/"},{"name":"Rom编译","slug":"Rom编译","permalink":"https://zhul.in/tags/Rom%E7%BC%96%E8%AF%91/"},{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"}]},{"title":"虚拟Python环境","slug":"python-virtualenv","date":"2021-01-19T16:00:00.000Z","updated":"2021-10-13T13:48:10.000Z","comments":true,"path":"2021/01/20/python-virtualenv/","link":"","permalink":"https://zhul.in/2021/01/20/python-virtualenv/","excerpt":"","text":"在python使用中，我们经常会遇到本地默认python版本与程序所需要的python版本不一致的问题，此时我们需要创建一个虚拟的python环境。 安装目标python版本Ubuntu系主程序参考https://www.cnblogs.com/m3721w/articles/10344887.html pip12sudo apt isntall python-pip #python2sudo apt isntall python3-pip #python3 Archlinux1yay -S python【xx】 #如yay -S python38 源码安装主程序:123456wget https://www.python.org/ftp/python/【x.x.x】/Python-【x.x.x】.tgztar xzvf Python-【x.x.x】.tgzcd Python-x.x.x./configuremakesudo make install pip123curl https://bootstrap.pypa.io/get-pip.py -o get-pip.pysudo python【x.x】 get-pip.py -i https://mirrors.bfsu.edu.cn/pypi/web/simplepip config set global.index-url https://mirrors.bfsu.edu.cn/pypi/web/simple #换源 安装virtualenv常规发行版12pip install virtualenv #python2pip3 install virtualenv #python3 Archlinux12sudo pacman -S python2-virtualenv #python2sudo pacman -S python-virtualenv #python3 使用virtualenv创建virtualenv环境常规发行版1virtualenv $(TRAGET_PATH) python=python【x.x】 Archlinux12virtualenv2 $(TRAGET_PATH) python=python2.【x】 #python2virtualenv $(TRAGET_PATH) python=python3.【x】 #python3 启用virtualenv环境1source $(TARGET_PATH)/bin/activate 退出virtualenv环境1deactivate 删除virtualenv环境1rm -rf $(TRAGET_PATH)","categories":[],"tags":[{"name":"Rom编译","slug":"Rom编译","permalink":"https://zhul.in/tags/Rom%E7%BC%96%E8%AF%91/"},{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Python","slug":"Python","permalink":"https://zhul.in/tags/Python/"}]},{"title":"为什么我不推荐Manjaro","slug":"Why-I-dont-recommend-Manjaro","date":"2020-12-31T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2021/01/01/Why-I-dont-recommend-Manjaro/","link":"","permalink":"https://zhul.in/2021/01/01/Why-I-dont-recommend-Manjaro/","excerpt":"","text":"说起Linux发行版，很多人都会去推荐Manjaro给新手使用，原因很简单——安装简单、有庞大的AUR和ArchlinuxCN提供软件、有丰富的ArchWiki以供新手查阅。那么，为什么大多数Archlinux用户（包括我）始终不推荐Manjaro作为自己使用的发行版呢。 首先来了解一下两款Linux发行版Archlinux Archlinux是一款滚动发行版，所有的软件全部都基于上游最新的源代码进行编译，源内也仅仅保留最新版本，是最为激进的发行版之一，甚至或许没有之一。 Manjaro Manjaro是一款基于Archlinux的滚动发行版，部分软件同样基于上游源代码编译，同时也有部分软件包直接从Archlinux源内直接拿二进制包。与Archlinux不同的是，Manjaro大部分软件更新相比Archlinux会滞后一个星期，一些比较重要的软件甚至会滞后两个星期以上（比如Python3.9就滞后了19天）以保证稳定性。（虽然我目前观察下来这个稳定性就是出现Bug和修复Bug都比Archlinux慢一个礼拜） 接下来就是正文Archlinux 和 Manjaro 都不适合Linux小白Archlinux和Manjaro都是激进的滚动发行版，作为一个滚动发行版都会有滚坏的风险，这就要求用户有一定的Linux使用基础，能够多关注更新动态，在系统罢工后有修复系统的能力，因此我不会给小白推荐Archlinux/Manjaro这样的发行版（虽说能够用纯cli界面安装Archlinux的用户其实已经有一定的水平了）。 ArchWiki 不是 ManjaroWikiManjaro官方为了最大限度地降低用户的使用门槛，为用户打造了一套开箱即用的环境，这听起来很好。 但是Manjaro官方为了降低用户使用门槛，不得不替用户去做一些选择，写上一些默认配置，在必要的地方对系统进行魔改。因此，ArchWiki上面的解决方案并非在Manjaro上能够100%适用，因此不要指望在系统使用过程中ArchWiki能够解决你所有的问题，有相当一部分问题你需要去查阅纯英文版的ManjaroWiki。 AUR(Archlinux User Repository)&amp;ArchlinuxCN 并不是为 Manjaro 准备的AUR和ArchlinuxCN源都是Archlinux用户为Archlinux打包的常用软件，因此所有的软件都是选择Archlinux最新的软件作为依赖来编译/打包的。上文中我们提到过，Manjaro源内的软件会滞后更新。因此AUR和ArchlinuxCN内一些对于依赖版本要求比较苛刻的软件会在Manjaro这个更新比较落后的发行版上不工作。 我知道这听起来会有些荒唐，不过我可以举出一个就发生在不久之前的生动的例子。 Archlinux在2020年10月17日将grpc从1.30更新到了1.32，qv2ray开发者反应迅速，在几个小时内直接更新了基于grpc-1.32的qv2ray，接着是仍然在使用grpc-1.30的Manjaro用户的一片哀嚎。。。 解决方法有很多，比如临时使用Archlinux源把grpc更新到1.32、通过AppImage安装qv2ray等等，但是如你所见，Manjaro用户使用AUR&amp;ArchlinuxCN确实容易出现问题。 附：AUR上需要下载源码的自己编译的包不会碰到依赖的版本问题，但是仍然有部分情况下PKGBUILD会直接因为依赖版本号被写死而编译出错。而ArchlinuxCN清一色是编译好的二进制包，所以Manjaro用户使用ArchlinuxCN相比AUR出问题的几率更加大一点。 此外，他们延迟两周，并不是在测试 Arch 包打包本身的质量，而是在测试他们拿来 Arch 的包和他们自己乱改的核心包之间的兼容性。以下内容来自于一位 Archlinux Trusted User manjaro 這個分三個 channel 延遲兩週的做法，原因出於兩點他們處理打包方面非常存疑的做法 他們想要自己打包一部分非常核心的包，包括 glibc 內核 驅動 systemd 他們不想重新打整個發行版所有包，想直接從 Arch 拿二進制來用。 這兩個做法單獨只做一個沒啥事，放一起做就很容易導致他們自己打包的核心包破壞了二進制兼容，以至於他們從 Arch 拿的二進制包壞掉。所以他們延遲兩週，並不是在測試 Arch 包打包本身的質量，而是在測試他們拿來 Arch 的包和他們自己亂改的核心包之間的兼容性。Arch 本身有一套機制保證 Arch 打包放出來的時候是測試好相互兼容的，被他們替換掉幾個核心包之後就不一定兼容了，他們也沒有渠道涉足 Arch 內部打包機制，從 Arch 組織內部了解什麼時候放出包之類的信息。綜合這些情況，對他們來說合理的做法就是延遲一陣子讓他們自己的人測試一下。 所以作為證據你看他們的打包者開發者很少會向 Arch 上游反饋測試打包遇到的問題…因為 manjaro unstable 和 manjaro testing 會遇到的問題大部分都是他們自己造成的問題而不是 Arch 的問題。 要是他們誠實地把這個情況傳達給他們用戶的話我不責怪他們。Arch整個滾動發布的生態也不利於下游發行版。Debian 這種上游打包時可以約定版本兼容性的範圍，可以鎖 abi ，Arch 打包本身就不考慮這些，作為Arch下游就的確很難操作。我反感 manjaro 的點在於他們把這種難看的做法宣傳成他們的優勢，還為了這個看起來是優勢故意去抹黑 Arch 作為上游的打包質量…做法就很難看了。 —— farseerfc Manjaro 没有 Archive 源Archlinux拥有一个archive源，通过Archive源，你可以将你的系统滚到任何一天的状态，比如在你不知道更新了什么滚炸了以后，你可以用Archive源回滚到三天前的状态，等bug修复完以后再用回正常的Archlinux源。况且，这个Archive源在国内拥有tuna和bfsu两个镜像源（虽然这两个镜像源并不是完整的镜像，而是每隔7天镜像一次），不会存在访问速度过慢的状况。有名的downgrade软件也是基于Archive源使用的。而Manjaro？很遗憾，没有。 写在最后如果你有一定的Linux基础，阅读了我上面的科普以后仍然要去使用Manjaro也没有关系，但是记得遵守以下几点以确保你在Arch社区不会被打死。 谨慎使用AUR和ArchlinuxCN 使用AUR和ArchlinuxCN时遇到问题请不要反馈 在Arch社区提问时请提前说明自己在使用Manjaro 不要根据Manjaro的使用经验随意编辑ArchWiki","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"}]},{"title":"UOS到底有没有Secure Boot签名/UOS引导怎么修复","slug":"Did-UOS-have-Secure-Boot-Signature","date":"2020-12-21T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2020/12/22/Did-UOS-have-Secure-Boot-Signature/","link":"","permalink":"https://zhul.in/2020/12/22/Did-UOS-have-Secure-Boot-Signature/","excerpt":"","text":"以下内容来自2020年12月22日晚上的大佬对话，非本人原创。 吃瓜群众: 话说UOS到底有没有Secure boot签名啊 某dalao: 用的是ubuntu的 吃瓜群众: 哪来的签名？ 某dalao: 这就不得不讲到另一个槽点了s 吃瓜群众: ubuntu给他们签？ 某dalao: 不不不，用的是ubuntu签好名的那个binary 然后ubuntu的那个binary会在EFI分区的ubuntu目录找配置 于是他们在安装器里写了个逻辑 把deepin目录的内容复制一份到ubuntu目录 （而不是patch grub包，或者写在grub包的postinst之类的地方） 后果是用户只要搞坏了引导 用网上任何教程都恢复不了 因为没人会教你建一个ubuntu目录，然后把deepin目录的内容复制进去） 如果不做这一步，任你怎么grub-install啊，update-grub啊，引导就还是坏的","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"大佬对话笔记","slug":"大佬对话笔记","permalink":"https://zhul.in/tags/%E5%A4%A7%E4%BD%AC%E5%AF%B9%E8%AF%9D%E7%AC%94%E8%AE%B0/"},{"name":"deepin","slug":"deepin","permalink":"https://zhul.in/tags/deepin/"}]},{"title":"Rom自身bug反馈须知","slug":"Before-Report-A-Rom-Issue","date":"2020-12-18T16:00:00.000Z","updated":"2021-10-13T13:48:10.000Z","comments":true,"path":"2020/12/19/Before-Report-A-Rom-Issue/","link":"","permalink":"https://zhul.in/2020/12/19/Before-Report-A-Rom-Issue/","excerpt":"","text":"学业繁忙，不便花太多时间在接收问题的反馈上，特制定此须知。须知非常繁杂，一来是为了尽可能多的获得问题的信息，同时便于我归类，二来是为了提升你们的反馈成本以过滤低级问题。 本须知仅针对Rom自身的bug反馈，对于其他奇奇怪怪的问题(比如下载链接挂了一类的)可以直接评论反馈。无法开机等一类bug就用不着反馈了，我发布的每一个版本都经过我亲自测试，出现此类问题就是你自己的操作问题。 以下是正文 仅接受邮箱反馈 &#122;&#104;&#117;&#108;&#108;&#121;&#98;&#64;&#x6f;&#x75;&#116;&#x6c;&#111;&#111;&#x6b;&#x2e;&#x63;&#111;&#109; 请在默认Kernel，卸载所有模块，删除所有调度，卸载所有奇奇怪怪的软件(比如黑阈或者Thanos)的情况下进行反馈，具体原因请看这里 仅接受Rom最新版本的问题反馈 进行反馈时请注明自己的Gapps版本(如系统内置、X月X日的XXXGapps等等) 请注明bug的具体表现，以及复现方法，如有可能附上log 偶然性bug请不要反馈，除非你能够抓到当时的log log请以附件的形式发送，文件名请改为202XXXXX+酷安用户名的形式，文件名后缀为.log，如: 20201231竹林里有冰.log 以上没有做到的，我会立刻拉黑。当然，我会允许你继续查看我的动态，因为拉黑你的目的只是为了防止我的时间再被你浪费而不是为了对你进行报复。","categories":[],"tags":[{"name":"Rom","slug":"Rom","permalink":"https://zhul.in/tags/Rom/"}]},{"title":"刷机常见问题Q&A","slug":"RomFlash_QA","date":"2020-11-12T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2020/11/13/RomFlash_QA/","link":"","permalink":"https://zhul.in/2020/11/13/RomFlash_QA/","excerpt":"","text":"我现在想要XXX/从XXX刷到XXX，是否需要格式化/清除data分区？首先先来明确一下概念，什么是【格式化data分区】和【清除data分区】。【格式化data分区】是指在TWRP界面需要你输入YES手动确认的那个，而【清除data分区】则是在TWRP界面会让你勾选你所需要清除的分区并滑动滑动确认的。【格式化data分区】会将整个data分区彻底格式化，所有的数据都会被删除，而【清除data分区】则会保留你在内置储存区域的文件。 在大多数情况下其实是并没有必要【格式化data分区】的，除了一种情况——data分区被强制加密。data分区被强制加密的表现是TWRP进入的时候要求你输入密码，如果不输入密码直接进入，则你看到的文件都会变成乱码。这是你的系统进行了文件加密来保证你的手机在丢了的情况下，没有人能在不用密码的前提下拿到你的数据。加密的文件可以在你输入密码以后被读取，但是不能变成未加密的状态，这时我们就只能通过【格式化data分区】来格式化整个data分区。 除此以外，大多数情况下只需要清除data分区就可以了，有些底层比较相似的Rom甚至连data分区都不需要清除就可以正常使用，但是我仍然推荐你在换Rom之前清除data分区，否则仍然有可能会有奇奇怪怪的bug。我上次就在ArrowOS不清除data分区的情况下刷入了AICP导致了基带丢失。 总而言之，除了同一安卓大版本的同一作者的同一Rom更新以外，换Rom我都建议你清除data分区。当然从类原生到另一个类原生你也可以保证试试看的心态不清除data分区直接换Rom，前提是你一定要备份好数据，谁都不能保证你会不会因此而卡米、丢失重要数据。在做好两手准备的前提下，我不反对你进行尝试，同一Rom的安卓大版本更新也是同理。 我为什么强调反馈问题时不要使用第三方内核/模块/修改？ 你平时可以使用任何修改。你的手机你自己做主，怎么用起来开心你说了算。问题在于，我不是那些模块、内核、修改的作者，我也没办法知道他们具体会对手机做什么，我维护的ROM究竟跟这些东西兼容不兼容。如果你遇到了问题，我如何知道问题的来源究竟是那些修改，还是ROM本身的问题呢？ 你反馈一个问题过来，我这边会亲自尝试复现，检查代码，并联系其他熟悉的测试者来测试。我重视你的每一句话，也请你尊重我和这些测试者的时间。已经不知道多少次了，某个用户反馈问题时就一句话，也没提过自己用了什么其他东西，我这边花了几个小时各种检查，最后发现其实是某个模块导致的。这种案例一天来个几次，我就不用干别的了。 基于AOSP的ROM和MIUI在许多层面上都很不一样，所以很多在MIUI上没问题的修改，并不适合照搬到AOSP上面。尤其是一些所谓的对性能有提升的内核或者调度，你刷完以后，真的对比过前后的差别吗，你能确定性能是在提升而不是倒退吗？绝大部分用户可能根本不知道如何科学的测试某一项性能指标，也不是随便什么跑分都能做到这一点的。不可重复的、无法量化的“体感”对于判断性能没有任何帮助。在你不确定自己在做什么的时候，做减法比做加法重要。 ——引自jjpprrrr的酷安 这次更新了什么？我不知道，我不清楚，自己去看Rom的github，我没那个闲工夫给你写更新日志。 类原生安卓11打不开微信？我这边确实收到了很多用户的反馈，说我们的类原生11打不开微信，目前情况未知，但是可以确定的是，刷了gapps的用户都没有出现这个问题，因此你可以尝试下输入gapps，如果对于gapps不怎么使用的用户我这边推荐你刷bitgapps，刷完以后不用打开放在那里就行。据说是eng的问题，现在都已经改用userdebug了，不会再出现这个问题。 这个包带不带gapps/firmware/vendor，我该用什么版本的firmware？带不带vendor或者firmware其实很容易判断，打开zip包看一眼就知道了，如图： 至于没有firmware的包直接用最新开发版的firmware就可以了。 带不带gapps可以直接从包的大小看出，带gapps的包比不带gapps的包要大上个两三百MB，像PixelExperience带了完整全家桶的还会更大。对于小米8的类原生来说你可以直接以包是否大于1G来作为判断依据，大于1G的基本上都是带gapps的。 小米8屏下指纹版能不能刷？很抱歉，我手里就只有小米8普通版的机子，没有办法对屏下指纹版本做适配，所以你可以试着刷一刷，但是这Rom并不是为你的机型适配的。","categories":[],"tags":[{"name":"Rom","slug":"Rom","permalink":"https://zhul.in/tags/Rom/"}]},{"title":"No Hello","slug":"NoHello","date":"2020-10-07T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2020/10/08/NoHello/","link":"","permalink":"https://zhul.in/2020/10/08/NoHello/","excerpt":"","text":"Don’t Just Say “Hello” in Chat. 别在向别人问问题的时候问“在吗？” 英文原版请查阅这里，此处是我个人的翻译版。 123452010-07-19 12:32:12 你: 在吗？2010-07-19 12:32:15 我: 在的。## 我就这这里静静的等待你打字描述自己的问题2010-07-19 12:34:01 你: 我正在进行 [莫些事情] 然后我正尝试 [等等。。。]2010-07-19 12:35:21 我: 这样啊，你应该 [我的回答] 这就像是你在和某人打电话，你接起电话说了一声：”喂？“，然后放下手机打开免提等待着对方的提问，这很低效 请使用如下格式： 122010-07-19 12:32:12 你: 你好，我正在进行 [某些事情] 然后我正尝试 [等等。。。]2010-07-19 12:33:32 我: [我的回答] 这样做的原因是：你可以更快速地获得你想要的答案，而不是让对方在那边傻傻地等待你以龟速打字。 你的潜意识里试图不打断对方的回应，得到对方的回复以后再回答以显示你的礼貌，正如你在给别人打电话时那样。但是，网络聊天并不是打电话，通常情况下，打字要比说话慢得多。你的行为不是在彰显自己的礼貌，而是在浪费对方的时间。 其他的用语比如“你好，你在吗？”，“老王，问你个很简单的问题。”，“你有空吗？”都是很愚蠢的行为，在网络聊天中直接问问题就好。 如果你觉得直接问问题不礼貌，你可以采用以下的格式： 12010-07-19 12:32:12 你: 你好，如果你不介意的话我想问个问题，我正在进行 [莫些事情] 然后我正尝试 [等等。。。] 这样提问的另一个好处是：你的提问题同时具有即时性和留言性。如果对方不在，而你在对方上线之前就离开了，他们仍然可以回答您的问题，而不仅仅是盯着你发的“在吗”并为你究竟想要问什么问题而好奇。 （如果你使用的聊天软件支持查看对方的在线状态或者对方是否看到消息，你要做好被对方忽视的准备）","categories":[],"tags":[{"name":"翻译","slug":"翻译","permalink":"https://zhul.in/tags/%E7%BF%BB%E8%AF%91/"}]},{"title":"安卓解包笔记","slug":"AndroidUnpack","date":"2020-08-09T16:00:00.000Z","updated":"2021-10-13T13:48:10.000Z","comments":true,"path":"2020/08/10/AndroidUnpack/","link":"","permalink":"https://zhul.in/2020/08/10/AndroidUnpack/","excerpt":"","text":"123brotli -d system.new.dat.brsdat2img system.transfer.list system.new.datmount system.img &#123;known_path&#125; Get brotli here &amp; sdat2img here","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://zhul.in/tags/Android/"},{"name":"Rom编译","slug":"Rom编译","permalink":"https://zhul.in/tags/Rom%E7%BC%96%E8%AF%91/"},{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"}]},{"title":"git笔记","slug":"GitNotes","date":"2020-07-10T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2020/07/11/GitNotes/","link":"","permalink":"https://zhul.in/2020/07/11/GitNotes/","excerpt":"","text":"git自动填入账号密码打开终端，输入 1git config --global credential.helper store 此时，我们就已经开启了git账号密码的本地储存，在下一次push时只要输入账号密码就可以一劳永逸了。 git设置默认的commit编辑器1git config --global core.editor $editor_name Ps: $editor_name指的是你选用的编辑器，一般为nano、vim等 pick一个仓库中连续的几个commit1git cherry-pick &lt;commit1_id..^&lt;cimmitn_id Ps: &lt;commit1_id和&lt;commitn_id分别指第一个你想要pick的commit_id和最后一个你想要pick的commit_id pick失败时如何撤销此次pick1git cherry-pick --abort 踩坑记录发生背景： clone了一个内核仓库，大概是1.4G左右的大小，在github新建了一个repository，打算push上去，报错如下 1234567891011[zhullyb@Archlinux sdm845]$ git push -u origin masterEnumerating objects: 5724101, done.Counting objects: 100% (5724101/5724101), done.Delta compression using up to 4 threadsCompressing objects: 100% (983226/983226), done.Writing objects: 100% (5724101/5724101), 1.34 GiB | 2.46 MiB/s, done.Total 5724101 (delta 4693465), reused 5723950 (delta 4693375), pack-reused 0error: RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: INTERNAL_ERROR (err 2)send-pack: unexpected disconnect while reading sideband packetfatal: the remote end hung up unexpectedlyEverything up-to-date 搜索互联网，最终使用的解决方案 1git config http.version HTTP/1.1 #原文中加了--global，不过我就临时遇到这种情况，不考虑加 最终应该可以使用如下命令设置回来 1git config http.version HTTP/2","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"笔记","slug":"笔记","permalink":"https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"repo笔记","slug":"RepoNotes","date":"2020-07-10T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2020/07/11/RepoNotes/","link":"","permalink":"https://zhul.in/2020/07/11/RepoNotes/","excerpt":"","text":"清除同步过程中产生的不完整碎片文件在源码路径/.repo下搜索tmp_pack将搜索结果中出现的所有文件全部删除 以下命令仅供参考 1rm -rf */*/*/*/objects/pack/tmp_pack_* repo自动同步下载脚本123456789echo #!/bin/bashecho &quot;======start repo sync======&quot;repo sync --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune -j$(nproc --all)while [ $? == 1 ]; doecho &quot;======sync failed, re-sync again======&quot;sleep 3repo sync --force-sync --current-branch --no-tags --no-clone-bundle --optimized-fetch --prune -j$(nproc --all)done repo.sh 授予运行权限 1chmod a+x repo.sh 运行脚本1bash repo.sh","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"笔记","slug":"笔记","permalink":"https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"国内Linux镜像源列表","slug":"china-mainland-mirrorlist","date":"2020-07-10T16:00:00.000Z","updated":"2022-08-10T15:25:00.000Z","comments":true,"path":"2020/07/11/china-mainland-mirrorlist/","link":"","permalink":"https://zhul.in/2020/07/11/china-mainland-mirrorlist/","excerpt":"","text":"企业镜像阿里https://developer.aliyun.com/mirror/ 腾讯https://mirrors.cloud.tencent.com/ 网易http://mirrors.163.com/ 华为https://mirrors.huaweicloud.com/ 首都在线http://mirrors.yun-idc.com/ 搜狐http://mirrors.sohu.com/ 平安云https://mirrors.pinganyun.com/ 高校镜像清华大学https://mirrors.tuna.tsinghua.edu.cn/ https://opentuna.cn/ farseerfc: tuna 有兩個服務器互相負載均衡，這倆服務器之間不同步，就偶爾遇到版本回退。 中国科技大学http://mirrors.ustc.edu.cn/ 浙江大学http://mirrors.zju.edu.cn/ 北京外国语大学https://mirrors.bfsu.edu.cn/ 北京大学https://mirrors.pku.edu.cn/Mirrors 北京交通大学https://mirror.bjtu.edu.cn/ 北京理工大学http://mirror.bit.edu.cn/web/ 上海交通大学https://mirrors.sjtug.sjtu.edu.cn/ 大连东软信息学院http://mirrors.neusoft.edu.cn/ 兰州大学http://mirror.lzu.edu.cn/ 南京大学（2021-05-29发现无法访问，具体情况未知）http://mirrors.nju.edu.cn/ 哈尔滨工业大学https://mirrors.hit.edu.cn/ 南京邮电大学http://mirrors.njupt.edu.cn/ 山东大学http://mirrors.sdu.edu.cn/ 华中科技大学http://mirror.hust.edu.cn/ 东北大学http://mirror.neu.edu.cn/ 大连理工大学http://mirror.dlut.edu.cn/ 南洋理工学院https://mirror.nyist.edu.cn/ 南方科技大学https://mirrors.sustech.edu.cn 重庆大学http://mirrors.cqu.edu.cn/ 西北农林科技大学https://mirrors.nwsuaf.edu.cn/ 山东女子学院https://mirrors.sdwu.edu.cn/","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"镜像站","slug":"镜像站","permalink":"https://zhul.in/tags/%E9%95%9C%E5%83%8F%E7%AB%99/"}]},{"title":"在Windows下给cmd设置代理","slug":"set-proxy-for-cmd-under-windows","date":"2020-03-02T16:00:00.000Z","updated":"2021-10-13T13:48:10.000Z","comments":true,"path":"2020/03/03/set-proxy-for-cmd-under-windows/","link":"","permalink":"https://zhul.in/2020/03/03/set-proxy-for-cmd-under-windows/","excerpt":"","text":"cmd打开方法按住win+R键，调出一个运行框，接着输入cmd并回车即可 设置cmd代理一般性使用的如果是ShadowsockR的话，代理端口都是1080，v2ray的话则是10808 ShadowsocksR12set http_proxy=http://127.0.0.1:1080set https_proxy=http://127.0.0.1:1080 v2ray12set http_proxy=http://127.0.0.1:10808set https_proxy=http://127.0.0.1:10808 为git设置代理ShadowsocksR12git config --global http.proxy http://127.0.0.1:1080git config --global https.proxy http://127.0.0.1:1080 v2ray12git config --global http.proxy http://127.0.0.1:10808git config --global https.proxy http://127.0.0.1:10808","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"https://zhul.in/tags/%E7%BD%91%E7%BB%9C/"},{"name":"Windows","slug":"Windows","permalink":"https://zhul.in/tags/Windows/"}]}],"categories":[],"tags":[{"name":"Fedora","slug":"Fedora","permalink":"https://zhul.in/tags/Fedora/"},{"name":"nodejs","slug":"nodejs","permalink":"https://zhul.in/tags/nodejs/"},{"name":"openssl","slug":"openssl","permalink":"https://zhul.in/tags/openssl/"},{"name":"Linux","slug":"Linux","permalink":"https://zhul.in/tags/Linux/"},{"name":"Fun","slug":"Fun","permalink":"https://zhul.in/tags/Fun/"},{"name":"笔记","slug":"笔记","permalink":"https://zhul.in/tags/%E7%AC%94%E8%AE%B0/"},{"name":"KDE","slug":"KDE","permalink":"https://zhul.in/tags/KDE/"},{"name":"Caddy","slug":"Caddy","permalink":"https://zhul.in/tags/Caddy/"},{"name":"Experience","slug":"Experience","permalink":"https://zhul.in/tags/Experience/"},{"name":"Shell Script","slug":"Shell-Script","permalink":"https://zhul.in/tags/Shell-Script/"},{"name":"图床","slug":"图床","permalink":"https://zhul.in/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"Lsky Pro","slug":"Lsky-Pro","permalink":"https://zhul.in/tags/Lsky-Pro/"},{"name":"RPM Package","slug":"RPM-Package","permalink":"https://zhul.in/tags/RPM-Package/"},{"name":"Archlinux","slug":"Archlinux","permalink":"https://zhul.in/tags/Archlinux/"},{"name":"OpenSource Project","slug":"OpenSource-Project","permalink":"https://zhul.in/tags/OpenSource-Project/"},{"name":"electron","slug":"electron","permalink":"https://zhul.in/tags/electron/"},{"name":"Casual Talk","slug":"Casual-Talk","permalink":"https://zhul.in/tags/Casual-Talk/"},{"name":"deepin","slug":"deepin","permalink":"https://zhul.in/tags/deepin/"},{"name":"翻译","slug":"翻译","permalink":"https://zhul.in/tags/%E7%BF%BB%E8%AF%91/"},{"name":"Waydroid","slug":"Waydroid","permalink":"https://zhul.in/tags/Waydroid/"},{"name":"PicUploader","slug":"PicUploader","permalink":"https://zhul.in/tags/PicUploader/"},{"name":"Firefox","slug":"Firefox","permalink":"https://zhul.in/tags/Firefox/"},{"name":"Bwrap","slug":"Bwrap","permalink":"https://zhul.in/tags/Bwrap/"},{"name":"Windows","slug":"Windows","permalink":"https://zhul.in/tags/Windows/"},{"name":"镜像站","slug":"镜像站","permalink":"https://zhul.in/tags/%E9%95%9C%E5%83%8F%E7%AB%99/"},{"name":"网络","slug":"网络","permalink":"https://zhul.in/tags/%E7%BD%91%E7%BB%9C/"},{"name":"大佬对话笔记","slug":"大佬对话笔记","permalink":"https://zhul.in/tags/%E5%A4%A7%E4%BD%AC%E5%AF%B9%E8%AF%9D%E7%AC%94%E8%AE%B0/"},{"name":"Android","slug":"Android","permalink":"https://zhul.in/tags/Android/"},{"name":"Rom编译","slug":"Rom编译","permalink":"https://zhul.in/tags/Rom%E7%BC%96%E8%AF%91/"},{"name":"Python","slug":"Python","permalink":"https://zhul.in/tags/Python/"},{"name":"Rom","slug":"Rom","permalink":"https://zhul.in/tags/Rom/"}]}